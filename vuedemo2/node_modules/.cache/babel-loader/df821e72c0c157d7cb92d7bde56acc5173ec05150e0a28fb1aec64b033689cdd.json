{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport { SINGLE_REFERRING } from '../util/model.js';\nimport { error } from '../util/log.js';\n/**\n * FIXME:\n * `nonSeriesBoxCoordSysCreators` and `_nonSeriesBoxMasterList` are hardcoded implementations.\n * Regarding \"coord sys layout based on another coord sys\", currently we only exprimentally support one level\n * dpendency, such as, \"grid(cartesian)s can be laid out based on matrix/calendar coord sys.\"\n * But a comprehensive implementation may need to support:\n *  - Recursive dependencies. e.g., a matrix coord sys lays out based on another matrix coord sys.\n *    That requires in the implementation `create` and `update` of coord sys are called by a dependency graph.\n *    (@see enableTopologicalTravel in `util/component.ts`)\n */\nvar nonSeriesBoxCoordSysCreators = {};\nvar normalCoordSysCreators = {};\nvar CoordinateSystemManager = /** @class */function () {\n  function CoordinateSystemManager() {\n    this._normalMasterList = [];\n    this._nonSeriesBoxMasterList = [];\n  }\n  /**\n   * Typically,\n   *  - in `create`, a coord sys lays out based on a given rect;\n   *  - in `update`, update the pixel and data extent of there axes (if any) based on processed `series.data`.\n   * After that, a coord sys can serve (typically by `dataToPoint`/`dataToLayout`/`pointToData`).\n   * If the coordinate system do not lay out based on `series.data`, `update` is not needed.\n   */\n  CoordinateSystemManager.prototype.create = function (ecModel, api) {\n    this._nonSeriesBoxMasterList = dealCreate(nonSeriesBoxCoordSysCreators, true);\n    this._normalMasterList = dealCreate(normalCoordSysCreators, false);\n    function dealCreate(creatorMap, canBeNonSeriesBox) {\n      var coordinateSystems = [];\n      zrUtil.each(creatorMap, function (creator, type) {\n        var list = creator.create(ecModel, api);\n        coordinateSystems = coordinateSystems.concat(list || []);\n        if (process.env.NODE_ENV !== 'production') {\n          if (canBeNonSeriesBox) {\n            // Disallow `update` is a brutal way to ensure `_nonSeriesBoxMasterList`s are ready to\n            // serve after `create`. But if `update` has to be involved in `_nonSeriesBoxMasterList`\n            // for some future case, more complicated mechanisms need to be introduced.\n            zrUtil.each(list, function (master) {\n              return zrUtil.assert(!master.update);\n            });\n          }\n        }\n      });\n      return coordinateSystems;\n    }\n  };\n  /**\n   * @see CoordinateSystem['create']\n   */\n  CoordinateSystemManager.prototype.update = function (ecModel, api) {\n    zrUtil.each(this._normalMasterList, function (coordSys) {\n      coordSys.update && coordSys.update(ecModel, api);\n    });\n  };\n  CoordinateSystemManager.prototype.getCoordinateSystems = function () {\n    return this._normalMasterList.concat(this._nonSeriesBoxMasterList);\n  };\n  CoordinateSystemManager.register = function (type, creator) {\n    if (type === 'matrix' || type === 'calendar') {\n      // FIXME: hardcode, @see nonSeriesBoxCoordSysCreators\n      nonSeriesBoxCoordSysCreators[type] = creator;\n      return;\n    }\n    normalCoordSysCreators[type] = creator;\n  };\n  CoordinateSystemManager.get = function (type) {\n    return normalCoordSysCreators[type] || nonSeriesBoxCoordSysCreators[type];\n  };\n  return CoordinateSystemManager;\n}();\nfunction canBeNonSeriesBoxCoordSys(coordSysType) {\n  return !!nonSeriesBoxCoordSysCreators[coordSysType];\n}\nexport var BoxCoordinateSystemCoordFrom = {\n  // By default fetch coord from `model.get('coord')`.\n  coord: 1,\n  // Some model/series, such as pie, is allowed to also get coord from `model.get('center')`,\n  // if cannot get from `model.get('coord')`. But historically pie use `center` option, but\n  // geo use `layoutCenter` option to specify layout center; they are not able to be unified.\n  // Therefor it is not recommended.\n  coord2: 2\n};\n/**\n * @see_also `createBoxLayoutReference`\n * @see_also `injectCoordSysByOption`\n */\nexport function registerLayOutOnCoordSysUsage(opt) {\n  if (process.env.NODE_ENV !== 'production') {\n    zrUtil.assert(!coordSysUseMap.get(opt.fullType));\n  }\n  coordSysUseMap.set(opt.fullType, {\n    getCoord2: undefined\n  }).getCoord2 = opt.getCoord2;\n}\nvar coordSysUseMap = zrUtil.createHashMap();\n/**\n * @return Be an object, but never be NullUndefined.\n */\nexport function getCoordForBoxCoordSys(model) {\n  var coord = model.getShallow('coord', true);\n  var from = BoxCoordinateSystemCoordFrom.coord;\n  if (coord == null) {\n    var store = coordSysUseMap.get(model.type);\n    if (store && store.getCoord2) {\n      from = BoxCoordinateSystemCoordFrom.coord2;\n      coord = store.getCoord2(model);\n    }\n  }\n  return {\n    coord: coord,\n    from: from\n  };\n}\n/**\n * - \"dataCoordSys\": each data item is laid out based on a coord sys.\n * - \"boxCoordSys\": the overall bounding rect or anchor point is calculated based on a coord sys.\n *   e.g.,\n *      grid rect (cartesian rect) is calculate based on matrix/calendar coord sys;\n *      pie center is calculated based on calendar/cartesian;\n *\n * The default value (if not declared in option `coordinateSystemUsage`):\n *  For series, use `dataCoordSys`, since this is the most case and backward compatible.\n *  For non-series components, use `boxCoordSys`, since `dataCoordSys` is not applicable.\n */\nexport var CoordinateSystemUsageKind = {\n  none: 0,\n  dataCoordSys: 1,\n  boxCoordSys: 2\n};\nexport function decideCoordSysUsageKind(\n// Component or series\nmodel, printError) {\n  // For backward compat, still not use `true` in model.get.\n  var coordSysType = model.getShallow('coordinateSystem');\n  var coordSysUsageOption = model.getShallow('coordinateSystemUsage', true);\n  var isDeclaredExplicitly = coordSysUsageOption != null;\n  var kind = CoordinateSystemUsageKind.none;\n  if (coordSysType) {\n    var isSeries = model.mainType === 'series';\n    if (coordSysUsageOption == null) {\n      coordSysUsageOption = isSeries ? 'data' : 'box';\n    }\n    if (coordSysUsageOption === 'data') {\n      kind = CoordinateSystemUsageKind.dataCoordSys;\n      if (!isSeries) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (isDeclaredExplicitly && printError) {\n            error('coordinateSystemUsage \"data\" is not supported in non-series components.');\n          }\n        }\n        kind = CoordinateSystemUsageKind.none;\n      }\n    } else if (coordSysUsageOption === 'box') {\n      kind = CoordinateSystemUsageKind.boxCoordSys;\n      if (!isSeries && !canBeNonSeriesBoxCoordSys(coordSysType)) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (isDeclaredExplicitly && printError) {\n            error(\"coordinateSystem \\\"\" + coordSysType + \"\\\" cannot be used\" + (\" as coordinateSystemUsage \\\"box\\\" for \\\"\" + model.type + \"\\\" yet.\"));\n          }\n        }\n        kind = CoordinateSystemUsageKind.none;\n      }\n    }\n  }\n  return {\n    coordSysType: coordSysType,\n    kind: kind\n  };\n}\n/**\n * These cases are considered:\n *  (A) Most series can use only \"dataCoordSys\", but \"boxCoordSys\" is not applicable:\n *    - e.g., series.heatmap, series.line, series.bar, series.scatter, ...\n *  (B) Some series and most components can use only \"boxCoordSys\", but \"dataCoordSys\" is not applicable:\n *    - e.g., series.pie, series.funnel, ...\n *    - e.g., grid, polar, geo, title, ...\n *  (C) Several series can use both \"boxCoordSys\" and \"dataCoordSys\", even at the same time:\n *    - e.g., series.graph, series.map\n *      - If graph or map series use a \"boxCoordSys\", it creates a internal \"dataCoordSys\" to lay out its data.\n *      - Graph series can use matrix coord sys as either the \"dataCoordSys\" (each item layout on one cell)\n *        or \"boxCoordSys\" (the entire series are layout within one cell).\n *    - To achieve this effect,\n *      `series.coordinateSystemUsage: 'box'` needs to be specified explicitly.\n *\n * Check these echarts option settings:\n *  - If `series: {type: 'bar'}`:\n *      dataCoordSys: \"cartesian2d\", boxCoordSys: \"none\".\n *      (since `coordinateSystem: 'cartesian2d'` is the default option in bar.)\n *  - If `grid: {coordinateSystem: 'matrix'}`\n *      dataCoordSys: \"none\", boxCoordSys: \"matrix\".\n *  - If `series: {type: 'pie', coordinateSystem: 'matrix'}`:\n *      dataCoordSys: \"none\", boxCoordSys: \"matrix\".\n *      (since `coordinateSystemUsage: 'box'` is the default option in pie.)\n *  - If `series: {type: 'graph', coordinateSystem: 'matrix'}`:\n *      dataCoordSys: \"matrix\", boxCoordSys: \"none\"\n *  - If `series: {type: 'graph', coordinateSystem: 'matrix', coordinateSystemUsage: 'box'}`:\n *      dataCoordSys: \"an internal view\", boxCoordSys: \"the internal view is laid out on a matrix\"\n *  - If `series: {type: 'map'}`:\n *      dataCoordSys: \"a internal geo\", boxCoordSys: \"none\"\n *  - If `series: {type: 'map', coordinateSystem: 'geo', geoIndex: 0}`:\n *      dataCoordSys: \"a geo\", boxCoordSys: \"none\"\n *  - If `series: {type: 'map', coordinateSystem: 'matrix'}`:\n *      not_applicable\n *  - If `series: {type: 'map', coordinateSystem: 'matrix', coordinateSystemUsage: 'box'}`:\n *      dataCoordSys: \"an internal geo\", boxCoordSys: \"the internal geo is laid out on a matrix\"\n *\n * @usage\n * For case (A) & (B),\n *  call `injectCoordSysByOption({coordSysType: 'aaa', ...})` once for each series/components.\n * For case (C),\n *  call `injectCoordSysByOption({coordSysType: 'aaa', ...})` once for each series/components,\n *  and then call `injectCoordSysByOption({coordSysType: 'bbb', ..., isDefaultDataCoordSys: true})`\n *  once for each series/components.\n *\n * @return Whether injected.\n */\nexport function injectCoordSysByOption(opt) {\n  var targetModel = opt.targetModel,\n    coordSysType = opt.coordSysType,\n    coordSysProvider = opt.coordSysProvider,\n    isDefaultDataCoordSys = opt.isDefaultDataCoordSys,\n    allowNotFound = opt.allowNotFound;\n  if (process.env.NODE_ENV !== 'production') {\n    zrUtil.assert(!!coordSysType);\n  }\n  var _a = decideCoordSysUsageKind(targetModel, true),\n    kind = _a.kind,\n    declaredType = _a.coordSysType;\n  if (isDefaultDataCoordSys && kind !== CoordinateSystemUsageKind.dataCoordSys) {\n    // If both dataCoordSys and boxCoordSys declared in one model.\n    // There is the only case in series-graph, and no other cases yet.\n    kind = CoordinateSystemUsageKind.dataCoordSys;\n    declaredType = coordSysType;\n  }\n  if (kind === CoordinateSystemUsageKind.none || declaredType !== coordSysType) {\n    return false;\n  }\n  var coordSys = coordSysProvider(coordSysType, targetModel);\n  if (!coordSys) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowNotFound) {\n        error(coordSysType + \" cannot be found for\" + (\" \" + targetModel.type + \" (index: \" + targetModel.componentIndex + \").\"));\n      }\n    }\n    return false;\n  }\n  if (kind === CoordinateSystemUsageKind.dataCoordSys) {\n    if (process.env.NODE_ENV !== 'production') {\n      zrUtil.assert(targetModel.mainType === 'series');\n    }\n    targetModel.coordinateSystem = coordSys;\n  } else {\n    // kind === 'boxCoordSys'\n    targetModel.boxCoordinateSystem = coordSys;\n  }\n  return true;\n}\nexport var simpleCoordSysInjectionProvider = function (coordSysType, injectTargetModel) {\n  var coordSysModel = injectTargetModel.getReferringComponents(coordSysType, SINGLE_REFERRING).models[0];\n  return coordSysModel && coordSysModel.coordinateSystem;\n};\nexport default CoordinateSystemManager;","map":{"version":3,"names":["zrUtil","SINGLE_REFERRING","error","nonSeriesBoxCoordSysCreators","normalCoordSysCreators","CoordinateSystemManager","_normalMasterList","_nonSeriesBoxMasterList","prototype","create","ecModel","api","dealCreate","creatorMap","canBeNonSeriesBox","coordinateSystems","each","creator","type","list","concat","process","env","NODE_ENV","master","assert","update","coordSys","getCoordinateSystems","register","get","canBeNonSeriesBoxCoordSys","coordSysType","BoxCoordinateSystemCoordFrom","coord","coord2","registerLayOutOnCoordSysUsage","opt","coordSysUseMap","fullType","set","getCoord2","undefined","createHashMap","getCoordForBoxCoordSys","model","getShallow","from","store","CoordinateSystemUsageKind","none","dataCoordSys","boxCoordSys","decideCoordSysUsageKind","printError","coordSysUsageOption","isDeclaredExplicitly","kind","isSeries","mainType","injectCoordSysByOption","targetModel","coordSysProvider","isDefaultDataCoordSys","allowNotFound","_a","declaredType","componentIndex","coordinateSystem","boxCoordinateSystem","simpleCoordSysInjectionProvider","injectTargetModel","coordSysModel","getReferringComponents","models"],"sources":["D:/Program Files/JetBrains/IDEAProject/springboot-vue-wms_test/vuedemo2/node_modules/echarts/lib/core/CoordinateSystem.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport { SINGLE_REFERRING } from '../util/model.js';\nimport { error } from '../util/log.js';\n/**\n * FIXME:\n * `nonSeriesBoxCoordSysCreators` and `_nonSeriesBoxMasterList` are hardcoded implementations.\n * Regarding \"coord sys layout based on another coord sys\", currently we only exprimentally support one level\n * dpendency, such as, \"grid(cartesian)s can be laid out based on matrix/calendar coord sys.\"\n * But a comprehensive implementation may need to support:\n *  - Recursive dependencies. e.g., a matrix coord sys lays out based on another matrix coord sys.\n *    That requires in the implementation `create` and `update` of coord sys are called by a dependency graph.\n *    (@see enableTopologicalTravel in `util/component.ts`)\n */\nvar nonSeriesBoxCoordSysCreators = {};\nvar normalCoordSysCreators = {};\nvar CoordinateSystemManager = /** @class */function () {\n  function CoordinateSystemManager() {\n    this._normalMasterList = [];\n    this._nonSeriesBoxMasterList = [];\n  }\n  /**\n   * Typically,\n   *  - in `create`, a coord sys lays out based on a given rect;\n   *  - in `update`, update the pixel and data extent of there axes (if any) based on processed `series.data`.\n   * After that, a coord sys can serve (typically by `dataToPoint`/`dataToLayout`/`pointToData`).\n   * If the coordinate system do not lay out based on `series.data`, `update` is not needed.\n   */\n  CoordinateSystemManager.prototype.create = function (ecModel, api) {\n    this._nonSeriesBoxMasterList = dealCreate(nonSeriesBoxCoordSysCreators, true);\n    this._normalMasterList = dealCreate(normalCoordSysCreators, false);\n    function dealCreate(creatorMap, canBeNonSeriesBox) {\n      var coordinateSystems = [];\n      zrUtil.each(creatorMap, function (creator, type) {\n        var list = creator.create(ecModel, api);\n        coordinateSystems = coordinateSystems.concat(list || []);\n        if (process.env.NODE_ENV !== 'production') {\n          if (canBeNonSeriesBox) {\n            // Disallow `update` is a brutal way to ensure `_nonSeriesBoxMasterList`s are ready to\n            // serve after `create`. But if `update` has to be involved in `_nonSeriesBoxMasterList`\n            // for some future case, more complicated mechanisms need to be introduced.\n            zrUtil.each(list, function (master) {\n              return zrUtil.assert(!master.update);\n            });\n          }\n        }\n      });\n      return coordinateSystems;\n    }\n  };\n  /**\n   * @see CoordinateSystem['create']\n   */\n  CoordinateSystemManager.prototype.update = function (ecModel, api) {\n    zrUtil.each(this._normalMasterList, function (coordSys) {\n      coordSys.update && coordSys.update(ecModel, api);\n    });\n  };\n  CoordinateSystemManager.prototype.getCoordinateSystems = function () {\n    return this._normalMasterList.concat(this._nonSeriesBoxMasterList);\n  };\n  CoordinateSystemManager.register = function (type, creator) {\n    if (type === 'matrix' || type === 'calendar') {\n      // FIXME: hardcode, @see nonSeriesBoxCoordSysCreators\n      nonSeriesBoxCoordSysCreators[type] = creator;\n      return;\n    }\n    normalCoordSysCreators[type] = creator;\n  };\n  CoordinateSystemManager.get = function (type) {\n    return normalCoordSysCreators[type] || nonSeriesBoxCoordSysCreators[type];\n  };\n  return CoordinateSystemManager;\n}();\nfunction canBeNonSeriesBoxCoordSys(coordSysType) {\n  return !!nonSeriesBoxCoordSysCreators[coordSysType];\n}\nexport var BoxCoordinateSystemCoordFrom = {\n  // By default fetch coord from `model.get('coord')`.\n  coord: 1,\n  // Some model/series, such as pie, is allowed to also get coord from `model.get('center')`,\n  // if cannot get from `model.get('coord')`. But historically pie use `center` option, but\n  // geo use `layoutCenter` option to specify layout center; they are not able to be unified.\n  // Therefor it is not recommended.\n  coord2: 2\n};\n/**\n * @see_also `createBoxLayoutReference`\n * @see_also `injectCoordSysByOption`\n */\nexport function registerLayOutOnCoordSysUsage(opt) {\n  if (process.env.NODE_ENV !== 'production') {\n    zrUtil.assert(!coordSysUseMap.get(opt.fullType));\n  }\n  coordSysUseMap.set(opt.fullType, {\n    getCoord2: undefined\n  }).getCoord2 = opt.getCoord2;\n}\nvar coordSysUseMap = zrUtil.createHashMap();\n/**\n * @return Be an object, but never be NullUndefined.\n */\nexport function getCoordForBoxCoordSys(model) {\n  var coord = model.getShallow('coord', true);\n  var from = BoxCoordinateSystemCoordFrom.coord;\n  if (coord == null) {\n    var store = coordSysUseMap.get(model.type);\n    if (store && store.getCoord2) {\n      from = BoxCoordinateSystemCoordFrom.coord2;\n      coord = store.getCoord2(model);\n    }\n  }\n  return {\n    coord: coord,\n    from: from\n  };\n}\n/**\n * - \"dataCoordSys\": each data item is laid out based on a coord sys.\n * - \"boxCoordSys\": the overall bounding rect or anchor point is calculated based on a coord sys.\n *   e.g.,\n *      grid rect (cartesian rect) is calculate based on matrix/calendar coord sys;\n *      pie center is calculated based on calendar/cartesian;\n *\n * The default value (if not declared in option `coordinateSystemUsage`):\n *  For series, use `dataCoordSys`, since this is the most case and backward compatible.\n *  For non-series components, use `boxCoordSys`, since `dataCoordSys` is not applicable.\n */\nexport var CoordinateSystemUsageKind = {\n  none: 0,\n  dataCoordSys: 1,\n  boxCoordSys: 2\n};\nexport function decideCoordSysUsageKind(\n// Component or series\nmodel, printError) {\n  // For backward compat, still not use `true` in model.get.\n  var coordSysType = model.getShallow('coordinateSystem');\n  var coordSysUsageOption = model.getShallow('coordinateSystemUsage', true);\n  var isDeclaredExplicitly = coordSysUsageOption != null;\n  var kind = CoordinateSystemUsageKind.none;\n  if (coordSysType) {\n    var isSeries = model.mainType === 'series';\n    if (coordSysUsageOption == null) {\n      coordSysUsageOption = isSeries ? 'data' : 'box';\n    }\n    if (coordSysUsageOption === 'data') {\n      kind = CoordinateSystemUsageKind.dataCoordSys;\n      if (!isSeries) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (isDeclaredExplicitly && printError) {\n            error('coordinateSystemUsage \"data\" is not supported in non-series components.');\n          }\n        }\n        kind = CoordinateSystemUsageKind.none;\n      }\n    } else if (coordSysUsageOption === 'box') {\n      kind = CoordinateSystemUsageKind.boxCoordSys;\n      if (!isSeries && !canBeNonSeriesBoxCoordSys(coordSysType)) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (isDeclaredExplicitly && printError) {\n            error(\"coordinateSystem \\\"\" + coordSysType + \"\\\" cannot be used\" + (\" as coordinateSystemUsage \\\"box\\\" for \\\"\" + model.type + \"\\\" yet.\"));\n          }\n        }\n        kind = CoordinateSystemUsageKind.none;\n      }\n    }\n  }\n  return {\n    coordSysType: coordSysType,\n    kind: kind\n  };\n}\n/**\n * These cases are considered:\n *  (A) Most series can use only \"dataCoordSys\", but \"boxCoordSys\" is not applicable:\n *    - e.g., series.heatmap, series.line, series.bar, series.scatter, ...\n *  (B) Some series and most components can use only \"boxCoordSys\", but \"dataCoordSys\" is not applicable:\n *    - e.g., series.pie, series.funnel, ...\n *    - e.g., grid, polar, geo, title, ...\n *  (C) Several series can use both \"boxCoordSys\" and \"dataCoordSys\", even at the same time:\n *    - e.g., series.graph, series.map\n *      - If graph or map series use a \"boxCoordSys\", it creates a internal \"dataCoordSys\" to lay out its data.\n *      - Graph series can use matrix coord sys as either the \"dataCoordSys\" (each item layout on one cell)\n *        or \"boxCoordSys\" (the entire series are layout within one cell).\n *    - To achieve this effect,\n *      `series.coordinateSystemUsage: 'box'` needs to be specified explicitly.\n *\n * Check these echarts option settings:\n *  - If `series: {type: 'bar'}`:\n *      dataCoordSys: \"cartesian2d\", boxCoordSys: \"none\".\n *      (since `coordinateSystem: 'cartesian2d'` is the default option in bar.)\n *  - If `grid: {coordinateSystem: 'matrix'}`\n *      dataCoordSys: \"none\", boxCoordSys: \"matrix\".\n *  - If `series: {type: 'pie', coordinateSystem: 'matrix'}`:\n *      dataCoordSys: \"none\", boxCoordSys: \"matrix\".\n *      (since `coordinateSystemUsage: 'box'` is the default option in pie.)\n *  - If `series: {type: 'graph', coordinateSystem: 'matrix'}`:\n *      dataCoordSys: \"matrix\", boxCoordSys: \"none\"\n *  - If `series: {type: 'graph', coordinateSystem: 'matrix', coordinateSystemUsage: 'box'}`:\n *      dataCoordSys: \"an internal view\", boxCoordSys: \"the internal view is laid out on a matrix\"\n *  - If `series: {type: 'map'}`:\n *      dataCoordSys: \"a internal geo\", boxCoordSys: \"none\"\n *  - If `series: {type: 'map', coordinateSystem: 'geo', geoIndex: 0}`:\n *      dataCoordSys: \"a geo\", boxCoordSys: \"none\"\n *  - If `series: {type: 'map', coordinateSystem: 'matrix'}`:\n *      not_applicable\n *  - If `series: {type: 'map', coordinateSystem: 'matrix', coordinateSystemUsage: 'box'}`:\n *      dataCoordSys: \"an internal geo\", boxCoordSys: \"the internal geo is laid out on a matrix\"\n *\n * @usage\n * For case (A) & (B),\n *  call `injectCoordSysByOption({coordSysType: 'aaa', ...})` once for each series/components.\n * For case (C),\n *  call `injectCoordSysByOption({coordSysType: 'aaa', ...})` once for each series/components,\n *  and then call `injectCoordSysByOption({coordSysType: 'bbb', ..., isDefaultDataCoordSys: true})`\n *  once for each series/components.\n *\n * @return Whether injected.\n */\nexport function injectCoordSysByOption(opt) {\n  var targetModel = opt.targetModel,\n    coordSysType = opt.coordSysType,\n    coordSysProvider = opt.coordSysProvider,\n    isDefaultDataCoordSys = opt.isDefaultDataCoordSys,\n    allowNotFound = opt.allowNotFound;\n  if (process.env.NODE_ENV !== 'production') {\n    zrUtil.assert(!!coordSysType);\n  }\n  var _a = decideCoordSysUsageKind(targetModel, true),\n    kind = _a.kind,\n    declaredType = _a.coordSysType;\n  if (isDefaultDataCoordSys && kind !== CoordinateSystemUsageKind.dataCoordSys) {\n    // If both dataCoordSys and boxCoordSys declared in one model.\n    // There is the only case in series-graph, and no other cases yet.\n    kind = CoordinateSystemUsageKind.dataCoordSys;\n    declaredType = coordSysType;\n  }\n  if (kind === CoordinateSystemUsageKind.none || declaredType !== coordSysType) {\n    return false;\n  }\n  var coordSys = coordSysProvider(coordSysType, targetModel);\n  if (!coordSys) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowNotFound) {\n        error(coordSysType + \" cannot be found for\" + (\" \" + targetModel.type + \" (index: \" + targetModel.componentIndex + \").\"));\n      }\n    }\n    return false;\n  }\n  if (kind === CoordinateSystemUsageKind.dataCoordSys) {\n    if (process.env.NODE_ENV !== 'production') {\n      zrUtil.assert(targetModel.mainType === 'series');\n    }\n    targetModel.coordinateSystem = coordSys;\n  } else {\n    // kind === 'boxCoordSys'\n    targetModel.boxCoordinateSystem = coordSys;\n  }\n  return true;\n}\nexport var simpleCoordSysInjectionProvider = function (coordSysType, injectTargetModel) {\n  var coordSysModel = injectTargetModel.getReferringComponents(coordSysType, SINGLE_REFERRING).models[0];\n  return coordSysModel && coordSysModel.coordinateSystem;\n};\nexport default CoordinateSystemManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}