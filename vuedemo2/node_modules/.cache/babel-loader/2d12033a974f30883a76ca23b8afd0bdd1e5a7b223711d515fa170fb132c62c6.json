{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.every.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nexport default {\n  name: \"MyTest\",\n  data() {\n    return {\n      selectedAlgorithm: \"ddpg\",\n      // 默认选择 DDPG 算法\n      inputData: {\n        max_episodes: \"\",\n        // DDPG 算法的输入\n        custom_param: \"\" // 其他算法的输入\n      },\n      // 表格数据\n      tableData: [],\n      workers: [\"工人1\", \"工人2\", \"工人3\", \"工人4\", \"工人5\", \"工人6\"],\n      // 工人列表\n      // 需要输入的单元格索引（行和列从 1 开始，列从工人1开始）\n      inputCells: [{\n        row: 1,\n        col: 1\n      }, {\n        row: 2,\n        col: 2\n      }, {\n        row: 3,\n        col: 2\n      }, {\n        row: 4,\n        col: 3\n      }, {\n        row: 5,\n        col: 3\n      }, {\n        row: 6,\n        col: 5\n      }, {\n        row: 7,\n        col: 5\n      }, {\n        row: 8,\n        col: 5\n      }, {\n        row: 9,\n        col: 5\n      }, {\n        row: 10,\n        col: 3\n      }, {\n        row: 11,\n        col: 3\n      }, {\n        row: 12,\n        col: 3\n      }, {\n        row: 13,\n        col: 3\n      }, {\n        row: 14,\n        col: 6\n      }, {\n        row: 15,\n        col: 3\n      }],\n      result: null,\n      // 算法返回的结果\n      isLoading: false,\n      // 加载状态\n      progressVisible: false,\n      // 是否显示进度条\n      progressPercentage: 0,\n      // 进度条百分比\n      progressStatus: null // 进度条状态（success/exception）\n    };\n  },\n  created() {\n    // 初始化表格数据\n    this.tableData = [{\n      task: \"搭架子\"\n    }, {\n      task: \"拆保温\"\n    }, {\n      task: \"打磨\"\n    }, {\n      task: \"宏观检验\"\n    }, {\n      task: \"壁厚测定\"\n    }, {\n      task: \"射线检测\"\n    }, {\n      task: \"表面检测\"\n    }, {\n      task: \"超声检测\"\n    }, {\n      task: \"其他无损检测\"\n    }, {\n      task: \"铁素体检测\"\n    }, {\n      task: \"硬度检测\"\n    }, {\n      task: \"金相检验\"\n    }, {\n      task: \"检验结果评定\"\n    }, {\n      task: \"返修\"\n    }, {\n      task: \"返修结果确认\"\n    }];\n\n    // 为每个工人列初始化数据\n    this.tableData.forEach((row, rowIndex) => {\n      this.workers.forEach((worker, colIndex) => {\n        // 检查当前单元格是否需要输入\n        const isInputCell = this.inputCells.some(cell => cell.row === rowIndex + 1 && cell.col === colIndex + 1);\n        // 如果需要输入，初始化为空；否则填充 999\n        row[worker] = isInputCell ? null : \"999\";\n      });\n    });\n  },\n  methods: {\n    // 判断某个单元格是否需要输入\n    isInputCell(row, col) {\n      return this.inputCells.some(cell => cell.row === row && cell.col === col);\n    },\n    async runAlgorithm() {\n      if (!this.selectedAlgorithm) {\n        this.$message.error(\"请选择算法\");\n        return;\n      }\n\n      // 检查输入是否为空\n      if (this.selectedAlgorithm === 'ddpg' && !this.inputData.max_episodes) {\n        this.$message.error(\"请输入训练的最大迭代次数\");\n        return;\n      }\n      if ((this.selectedAlgorithm === 'ddqn' || this.selectedAlgorithm === 'ga') && !this.isTableDataValid()) {\n        this.$message.error(\"请填写完整的表格数据\");\n        return;\n      }\n      this.isLoading = true; // 开始加载\n      this.progressVisible = true; // 显示进度条\n      this.progressPercentage = 0; // 重置进度条\n      this.progressStatus = null; // 重置状态\n\n      try {\n        // 构造请求数据\n        let requestData = {};\n        if (this.selectedAlgorithm === 'ddpg') {\n          // DDPG 算法需要 max_episodes\n          requestData = {\n            algorithm_name: this.selectedAlgorithm,\n            max_episodes: parseInt(this.inputData.max_episodes) // 确保输入值不为空\n          };\n        } else if (this.selectedAlgorithm === 'ddqn' || this.selectedAlgorithm === 'ga') {\n          // DDQN 和 GA 算法需要 table_data\n          requestData = {\n            algorithm_name: this.selectedAlgorithm,\n            table_data: this.tableData // 表格数据\n          };\n        }\n\n        // 检查输入是否为有效数字\n        if (this.selectedAlgorithm === 'ddpg' && isNaN(requestData.max_episodes)) {\n          this.$message.error(\"请输入有效的整数\");\n          return;\n        }\n\n        // 发送 POST 请求到 Flask 后端\n        const response = await this.$axios.post(\"http://localhost:5000/run_rl\", requestData);\n\n        // 模拟进度更新\n        const maxEpisodes = parseInt(this.inputData.max_episodes) || 10;\n        for (let i = 1; i <= maxEpisodes; i++) {\n          await new Promise(resolve => setTimeout(resolve, 500)); // 模拟每次训练耗时\n          this.progressPercentage = Math.round(i / maxEpisodes * 100); // 更新进度\n        }\n        this.result = response.data;\n        this.progressStatus = \"success\"; // 进度条状态：成功\n      } catch (error) {\n        console.error(\"调用算法失败:\", error);\n        this.$message.error(\"调用算法失败，请检查输入或后端服务\");\n        this.progressStatus = \"exception\"; // 进度条状态：失败\n      } finally {\n        this.isLoading = false; // 结束加载\n      }\n    },\n    // 检查表格数据是否完整\n    isTableDataValid() {\n      return this.inputCells.every(cell => {\n        const row = this.tableData[cell.row - 1];\n        const worker = this.workers[cell.col - 1];\n        return row[worker] !== null && !isNaN(row[worker]); // 确保需要输入的单元格是有效数字\n      });\n    }\n  }\n};","map":{"version":3,"names":["name","data","selectedAlgorithm","inputData","max_episodes","custom_param","tableData","workers","inputCells","row","col","result","isLoading","progressVisible","progressPercentage","progressStatus","created","task","forEach","rowIndex","worker","colIndex","isInputCell","some","cell","methods","runAlgorithm","$message","error","isTableDataValid","requestData","algorithm_name","parseInt","table_data","isNaN","response","$axios","post","maxEpisodes","i","Promise","resolve","setTimeout","Math","round","console","every"],"sources":["src/components/user/Test.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 选择算法 -->\r\n    <el-select v-model=\"selectedAlgorithm\" placeholder=\"请选择算法\" style=\"width: 200px; margin-right: 10px;\">\r\n      <el-option label=\"DDPG\" value=\"ddpg\"></el-option>\r\n      <el-option label=\"DDQN\" value=\"ddqn\"></el-option>\r\n      <el-option label=\"GA\" value=\"ga\"></el-option>\r\n      <el-option label=\"其他算法\" value=\"other_algorithm\"></el-option>\r\n    </el-select>\r\n\r\n    <!-- 运行按钮 -->\r\n    <el-button type=\"primary\" @click=\"runAlgorithm\" :loading=\"isLoading\" style=\"margin-top: 10px;\">运行算法</el-button>\r\n\r\n    <!-- 动态输入字段 -->\r\n    <div v-if=\"selectedAlgorithm === 'ddpg'\" style=\"margin-top: 10px;\">\r\n      <el-input v-model=\"inputData.max_episodes\" placeholder=\"请输入训练的最大迭代次数\" style=\"width: 300px; margin-right: 10px;\"></el-input>\r\n    </div>\r\n\r\n    <!-- DDQN 和 GA 的表格输入 -->\r\n    <div v-if=\"selectedAlgorithm === 'ddqn' || selectedAlgorithm === 'ga'\" style=\"margin-top: 10px;\">\r\n      <el-table :data=\"tableData\" border style=\"width: 100%;\">\r\n        <!-- 第一列：任务和工序 -->\r\n        <el-table-column prop=\"task\" label=\"任务\" width=\"180\" fixed>\r\n          <template #default=\"{ row }\">\r\n            <span>{{ row.task }}</span>\r\n          </template>\r\n        </el-table-column>\r\n\r\n        <!-- 动态列：工人1到工人6 -->\r\n        <el-table-column\r\n            v-for=\"(worker, colIndex) in workers\"\r\n            :key=\"colIndex\"\r\n            :label=\"worker\"\r\n            :prop=\"worker\"\r\n            width=\"120\"\r\n        >\r\n          <template #default=\"{ row, $index }\">\r\n            <!-- 检查当前单元格是否需要输入 -->\r\n            <template v-if=\"isInputCell($index + 1, colIndex + 1)\">\r\n              <!-- 需要输入的单元格 -->\r\n              <el-input\r\n                  v-model=\"row[worker]\"\r\n                  placeholder=\"请输入\"\r\n                  size=\"small\"\r\n                  type=\"number\"\r\n              ></el-input>\r\n            </template>\r\n            <template v-else>\r\n              <!-- 不需要输入的单元格 -->\r\n              <span>{{ row[worker] }}</span>\r\n            </template>\r\n          </template>\r\n        </el-table-column>\r\n      </el-table>\r\n    </div>\r\n\r\n    <!-- 进度条 -->\r\n    <div v-if=\"progressVisible\" style=\"margin-top: 20px;\">\r\n      <el-progress :percentage=\"progressPercentage\" :status=\"progressStatus\"></el-progress>\r\n      <p style=\"margin-top: 10px;\">当前进度：{{ progressPercentage }}%</p>\r\n    </div>\r\n\r\n    <!-- 显示算法结果 -->\r\n    <div v-if=\"result\" style=\"margin-top: 20px;\">\r\n      <h3>算法结果：</h3>\r\n      <pre>{{ result }}</pre>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"MyTest\",\r\n  data() {\r\n    return {\r\n      selectedAlgorithm: \"ddpg\", // 默认选择 DDPG 算法\r\n      inputData: {\r\n        max_episodes: \"\", // DDPG 算法的输入\r\n        custom_param: \"\", // 其他算法的输入\r\n      },\r\n      // 表格数据\r\n      tableData: [],\r\n      workers: [\"工人1\", \"工人2\", \"工人3\", \"工人4\", \"工人5\", \"工人6\"], // 工人列表\r\n      // 需要输入的单元格索引（行和列从 1 开始，列从工人1开始）\r\n      inputCells: [\r\n        { row: 1, col: 1 },\r\n        { row: 2, col: 2 },\r\n        { row: 3, col: 2 },\r\n        { row: 4, col: 3 },\r\n        { row: 5, col: 3 },\r\n        { row: 6, col: 5 },\r\n        { row: 7, col: 5 },\r\n        { row: 8, col: 5 },\r\n        { row: 9, col: 5 },\r\n        { row: 10, col: 3 },\r\n        { row: 11, col: 3 },\r\n        { row: 12, col: 3 },\r\n        { row: 13, col: 3 },\r\n        { row: 14, col: 6 },\r\n        { row: 15, col: 3 },\r\n      ],\r\n      result: null, // 算法返回的结果\r\n      isLoading: false, // 加载状态\r\n      progressVisible: false, // 是否显示进度条\r\n      progressPercentage: 0, // 进度条百分比\r\n      progressStatus: null, // 进度条状态（success/exception）\r\n    };\r\n  },\r\n  created() {\r\n    // 初始化表格数据\r\n    this.tableData = [\r\n      { task: \"搭架子\" },\r\n      { task: \"拆保温\" },\r\n      { task: \"打磨\" },\r\n      { task: \"宏观检验\" },\r\n      { task: \"壁厚测定\" },\r\n      { task: \"射线检测\" },\r\n      { task: \"表面检测\" },\r\n      { task: \"超声检测\" },\r\n      { task: \"其他无损检测\" },\r\n      { task: \"铁素体检测\" },\r\n      { task: \"硬度检测\" },\r\n      { task: \"金相检验\" },\r\n      { task: \"检验结果评定\" },\r\n      { task: \"返修\" },\r\n      { task: \"返修结果确认\" },\r\n    ];\r\n\r\n    // 为每个工人列初始化数据\r\n    this.tableData.forEach((row, rowIndex) => {\r\n      this.workers.forEach((worker, colIndex) => {\r\n        // 检查当前单元格是否需要输入\r\n        const isInputCell = this.inputCells.some(\r\n            (cell) => cell.row === rowIndex + 1 && cell.col === colIndex + 1\r\n        );\r\n        // 如果需要输入，初始化为空；否则填充 999\r\n        row[worker] = isInputCell ? null : \"999\";\r\n      });\r\n    });\r\n  },\r\n  methods: {\r\n    // 判断某个单元格是否需要输入\r\n    isInputCell(row, col) {\r\n      return this.inputCells.some((cell) => cell.row === row && cell.col === col);\r\n    },\r\n    async runAlgorithm() {\r\n      if (!this.selectedAlgorithm) {\r\n        this.$message.error(\"请选择算法\");\r\n        return;\r\n      }\r\n\r\n      // 检查输入是否为空\r\n      if (this.selectedAlgorithm === 'ddpg' && !this.inputData.max_episodes) {\r\n        this.$message.error(\"请输入训练的最大迭代次数\");\r\n        return;\r\n      }\r\n      if ((this.selectedAlgorithm === 'ddqn' || this.selectedAlgorithm === 'ga') && !this.isTableDataValid()) {\r\n        this.$message.error(\"请填写完整的表格数据\");\r\n        return;\r\n      }\r\n\r\n      this.isLoading = true; // 开始加载\r\n      this.progressVisible = true; // 显示进度条\r\n      this.progressPercentage = 0; // 重置进度条\r\n      this.progressStatus = null; // 重置状态\r\n\r\n      try {\r\n        // 构造请求数据\r\n        let requestData = {};\r\n        if (this.selectedAlgorithm === 'ddpg') {\r\n          // DDPG 算法需要 max_episodes\r\n          requestData = {\r\n            algorithm_name: this.selectedAlgorithm,\r\n            max_episodes: parseInt(this.inputData.max_episodes), // 确保输入值不为空\r\n          };\r\n        } else if (this.selectedAlgorithm === 'ddqn' || this.selectedAlgorithm === 'ga') {\r\n          // DDQN 和 GA 算法需要 table_data\r\n          requestData = {\r\n            algorithm_name: this.selectedAlgorithm,\r\n            table_data: this.tableData, // 表格数据\r\n          };\r\n        }\r\n\r\n        // 检查输入是否为有效数字\r\n        if (this.selectedAlgorithm === 'ddpg' && isNaN(requestData.max_episodes)) {\r\n          this.$message.error(\"请输入有效的整数\");\r\n          return;\r\n        }\r\n\r\n        // 发送 POST 请求到 Flask 后端\r\n        const response = await this.$axios.post(\"http://localhost:5000/run_rl\", requestData);\r\n\r\n        // 模拟进度更新\r\n        const maxEpisodes = parseInt(this.inputData.max_episodes) || 10;\r\n        for (let i = 1; i <= maxEpisodes; i++) {\r\n          await new Promise((resolve) => setTimeout(resolve, 500)); // 模拟每次训练耗时\r\n          this.progressPercentage = Math.round((i / maxEpisodes) * 100); // 更新进度\r\n        }\r\n\r\n        this.result = response.data;\r\n        this.progressStatus = \"success\"; // 进度条状态：成功\r\n      } catch (error) {\r\n        console.error(\"调用算法失败:\", error);\r\n        this.$message.error(\"调用算法失败，请检查输入或后端服务\");\r\n        this.progressStatus = \"exception\"; // 进度条状态：失败\r\n      } finally {\r\n        this.isLoading = false; // 结束加载\r\n      }\r\n    },\r\n    // 检查表格数据是否完整\r\n    isTableDataValid() {\r\n      return this.inputCells.every((cell) => {\r\n        const row = this.tableData[cell.row - 1];\r\n        const worker = this.workers[cell.col - 1];\r\n        return row[worker] !== null && !isNaN(row[worker]); // 确保需要输入的单元格是有效数字\r\n      });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\npre {\r\n  background-color: #f5f5f5;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  font-family: monospace;\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}