{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport OrdinalScale from '../scale/Ordinal.js';\nimport IntervalScale from '../scale/Interval.js';\nimport Scale from '../scale/Scale.js';\nimport { prepareLayoutBarSeries, makeColumnLayout, retrieveColumnLayout } from '../layout/barGrid.js';\nimport TimeScale from '../scale/Time.js';\nimport LogScale from '../scale/Log.js';\nimport { getStackedDimension } from '../data/helper/dataStackHelper.js';\nimport { ensureScaleRawExtentInfo } from './scaleRawExtentInfo.js';\nimport { parseTimeAxisLabelFormatter } from '../util/time.js';\nimport { getScaleBreakHelper } from '../scale/break.js';\nimport { error } from '../util/log.js';\n/**\n * Get axis scale extent before niced.\n * Item of returned array can only be number (including Infinity and NaN).\n *\n * Caution:\n * Precondition of calling this method:\n * The scale extent has been initialized using series data extent via\n * `scale.setExtent` or `scale.unionExtentFromData`;\n */\nexport function getScaleExtent(scale, model) {\n  var scaleType = scale.type;\n  var rawExtentResult = ensureScaleRawExtentInfo(scale, model, scale.getExtent()).calculate();\n  scale.setBlank(rawExtentResult.isBlank);\n  var min = rawExtentResult.min;\n  var max = rawExtentResult.max;\n  // If bars are placed on a base axis of type time or interval account for axis boundary overflow and current axis\n  // is base axis\n  // FIXME\n  // (1) Consider support value axis, where below zero and axis `onZero` should be handled properly.\n  // (2) Refactor the logic with `barGrid`. Is it not need to `makeBarWidthAndOffsetInfo` twice with different extent?\n  //     Should not depend on series type `bar`?\n  // (3) Fix that might overlap when using dataZoom.\n  // (4) Consider other chart types using `barGrid`?\n  // See #6728, #4862, `test/bar-overflow-time-plot.html`\n  var ecModel = model.ecModel;\n  if (ecModel && scaleType === 'time' /* || scaleType === 'interval' */) {\n    var barSeriesModels = prepareLayoutBarSeries('bar', ecModel);\n    var isBaseAxisAndHasBarSeries_1 = false;\n    zrUtil.each(barSeriesModels, function (seriesModel) {\n      isBaseAxisAndHasBarSeries_1 = isBaseAxisAndHasBarSeries_1 || seriesModel.getBaseAxis() === model.axis;\n    });\n    if (isBaseAxisAndHasBarSeries_1) {\n      // Calculate placement of bars on axis. TODO should be decoupled\n      // with barLayout\n      var barWidthAndOffset = makeColumnLayout(barSeriesModels);\n      // Adjust axis min and max to account for overflow\n      var adjustedScale = adjustScaleForOverflow(min, max, model, barWidthAndOffset);\n      min = adjustedScale.min;\n      max = adjustedScale.max;\n    }\n  }\n  return {\n    extent: [min, max],\n    // \"fix\" means \"fixed\", the value should not be\n    // changed in the subsequent steps.\n    fixMin: rawExtentResult.minFixed,\n    fixMax: rawExtentResult.maxFixed\n  };\n}\nfunction adjustScaleForOverflow(min, max, model,\n// Only support cartesian coord yet.\nbarWidthAndOffset) {\n  // Get Axis Length\n  var axisExtent = model.axis.getExtent();\n  var axisLength = Math.abs(axisExtent[1] - axisExtent[0]);\n  // Get bars on current base axis and calculate min and max overflow\n  var barsOnCurrentAxis = retrieveColumnLayout(barWidthAndOffset, model.axis);\n  if (barsOnCurrentAxis === undefined) {\n    return {\n      min: min,\n      max: max\n    };\n  }\n  var minOverflow = Infinity;\n  zrUtil.each(barsOnCurrentAxis, function (item) {\n    minOverflow = Math.min(item.offset, minOverflow);\n  });\n  var maxOverflow = -Infinity;\n  zrUtil.each(barsOnCurrentAxis, function (item) {\n    maxOverflow = Math.max(item.offset + item.width, maxOverflow);\n  });\n  minOverflow = Math.abs(minOverflow);\n  maxOverflow = Math.abs(maxOverflow);\n  var totalOverFlow = minOverflow + maxOverflow;\n  // Calculate required buffer based on old range and overflow\n  var oldRange = max - min;\n  var oldRangePercentOfNew = 1 - (minOverflow + maxOverflow) / axisLength;\n  var overflowBuffer = oldRange / oldRangePercentOfNew - oldRange;\n  max += overflowBuffer * (maxOverflow / totalOverFlow);\n  min -= overflowBuffer * (minOverflow / totalOverFlow);\n  return {\n    min: min,\n    max: max\n  };\n}\n// Precondition of calling this method:\n// The scale extent has been initialized using series data extent via\n// `scale.setExtent` or `scale.unionExtentFromData`;\nexport function niceScaleExtent(scale, inModel) {\n  var model = inModel;\n  var extentInfo = getScaleExtent(scale, model);\n  var extent = extentInfo.extent;\n  var splitNumber = model.get('splitNumber');\n  if (scale instanceof LogScale) {\n    scale.base = model.get('logBase');\n  }\n  var scaleType = scale.type;\n  var interval = model.get('interval');\n  var isIntervalOrTime = scaleType === 'interval' || scaleType === 'time';\n  scale.setBreaksFromOption(retrieveAxisBreaksOption(model));\n  scale.setExtent(extent[0], extent[1]);\n  scale.calcNiceExtent({\n    splitNumber: splitNumber,\n    fixMin: extentInfo.fixMin,\n    fixMax: extentInfo.fixMax,\n    minInterval: isIntervalOrTime ? model.get('minInterval') : null,\n    maxInterval: isIntervalOrTime ? model.get('maxInterval') : null\n  });\n  // If some one specified the min, max. And the default calculated interval\n  // is not good enough. He can specify the interval. It is often appeared\n  // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard\n  // to be 60.\n  // FIXME\n  if (interval != null) {\n    scale.setInterval && scale.setInterval(interval);\n  }\n}\n/**\n * @param axisType Default retrieve from model.type\n */\nexport function createScaleByModel(model, axisType) {\n  axisType = axisType || model.get('type');\n  if (axisType) {\n    switch (axisType) {\n      // Buildin scale\n      case 'category':\n        return new OrdinalScale({\n          ordinalMeta: model.getOrdinalMeta ? model.getOrdinalMeta() : model.getCategories(),\n          extent: [Infinity, -Infinity]\n        });\n      case 'time':\n        return new TimeScale({\n          locale: model.ecModel.getLocaleModel(),\n          useUTC: model.ecModel.get('useUTC')\n        });\n      default:\n        // case 'value'/'interval', 'log', or others.\n        return new (Scale.getClass(axisType) || IntervalScale)();\n    }\n  }\n}\n/**\n * Check if the axis cross 0\n */\nexport function ifAxisCrossZero(axis) {\n  var dataExtent = axis.scale.getExtent();\n  var min = dataExtent[0];\n  var max = dataExtent[1];\n  return !(min > 0 && max > 0 || min < 0 && max < 0);\n}\n/**\n * @param axis\n * @return Label formatter function.\n *         param: {number} tickValue,\n *         param: {number} idx, the index in all ticks.\n *                         If category axis, this param is not required.\n *         return: {string} label string.\n */\nexport function makeLabelFormatter(axis) {\n  var labelFormatter = axis.getLabelModel().get('formatter');\n  if (axis.type === 'time') {\n    var parsed_1 = parseTimeAxisLabelFormatter(labelFormatter);\n    return function (tick, idx) {\n      return axis.scale.getFormattedLabel(tick, idx, parsed_1);\n    };\n  } else if (zrUtil.isString(labelFormatter)) {\n    return function (tick) {\n      // For category axis, get raw value; for numeric axis,\n      // get formatted label like '1,333,444'.\n      var label = axis.scale.getLabel(tick);\n      var text = labelFormatter.replace('{value}', label != null ? label : '');\n      return text;\n    };\n  } else if (zrUtil.isFunction(labelFormatter)) {\n    if (axis.type === 'category') {\n      return function (tick, idx) {\n        // The original intention of `idx` is \"the index of the tick in all ticks\".\n        // But the previous implementation of category axis do not consider the\n        // `axisLabel.interval`, which cause that, for example, the `interval` is\n        // `1`, then the ticks \"name5\", \"name7\", \"name9\" are displayed, where the\n        // corresponding `idx` are `0`, `2`, `4`, but not `0`, `1`, `2`. So we keep\n        // the definition here for back compatibility.\n        return labelFormatter(getAxisRawValue(axis, tick), tick.value - axis.scale.getExtent()[0], null // Using `null` just for backward compat.\n        );\n      };\n    }\n    var scaleBreakHelper_1 = getScaleBreakHelper();\n    return function (tick, idx) {\n      // Using `null` just for backward compat. It's been found that in the `test/axis-customTicks.html`,\n      // there is a formatter `function (value, index, revers = true) { ... }`. Although the third param\n      // `revers` is incorrect and always `null`, changing it might introduce a breaking change.\n      var extra = null;\n      if (scaleBreakHelper_1) {\n        extra = scaleBreakHelper_1.makeAxisLabelFormatterParamBreak(extra, tick[\"break\"]);\n      }\n      return labelFormatter(getAxisRawValue(axis, tick), idx, extra);\n    };\n  } else {\n    return function (tick) {\n      return axis.scale.getLabel(tick);\n    };\n  }\n}\nexport function getAxisRawValue(axis, tick) {\n  // In category axis with data zoom, tick is not the original\n  // index of axis.data. So tick should not be exposed to user\n  // in category axis.\n  return axis.type === 'category' ? axis.scale.getLabel(tick) : tick.value;\n}\n/**\n * @param model axisLabelModel or axisTickModel\n * @return {number|String} Can be null|'auto'|number|function\n */\nexport function getOptionCategoryInterval(model) {\n  var interval = model.get('interval');\n  return interval == null ? 'auto' : interval;\n}\n/**\n * Set `categoryInterval` as 0 implicitly indicates that\n * show all labels regardless of overlap.\n * @param {Object} axis axisModel.axis\n */\nexport function shouldShowAllLabels(axis) {\n  return axis.type === 'category' && getOptionCategoryInterval(axis.getLabelModel()) === 0;\n}\nexport function getDataDimensionsOnAxis(data, axisDim) {\n  // Remove duplicated dat dimensions caused by `getStackedDimension`.\n  var dataDimMap = {};\n  // Currently `mapDimensionsAll` will contain stack result dimension ('__\\0ecstackresult').\n  // PENDING: is it reasonable? Do we need to remove the original dim from \"coord dim\" since\n  // there has been stacked result dim?\n  zrUtil.each(data.mapDimensionsAll(axisDim), function (dataDim) {\n    // For example, the extent of the original dimension\n    // is [0.1, 0.5], the extent of the `stackResultDimension`\n    // is [7, 9], the final extent should NOT include [0.1, 0.5],\n    // because there is no graphic corresponding to [0.1, 0.5].\n    // See the case in `test/area-stack.html` `main1`, where area line\n    // stack needs `yAxis` not start from 0.\n    dataDimMap[getStackedDimension(data, dataDim)] = true;\n  });\n  return zrUtil.keys(dataDimMap);\n}\nexport function unionAxisExtentFromData(dataExtent, data, axisDim) {\n  if (data) {\n    zrUtil.each(getDataDimensionsOnAxis(data, axisDim), function (dim) {\n      var seriesExtent = data.getApproximateExtent(dim);\n      seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);\n      seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);\n    });\n  }\n}\nexport function isNameLocationCenter(nameLocation) {\n  return nameLocation === 'middle' || nameLocation === 'center';\n}\nexport function shouldAxisShow(axisModel) {\n  return axisModel.getShallow('show');\n}\nexport function retrieveAxisBreaksOption(model) {\n  var option = model.get('breaks', true);\n  if (option != null) {\n    if (!getScaleBreakHelper()) {\n      if (process.env.NODE_ENV !== 'production') {\n        error('Must `import {AxisBreak} from \"echarts/features.js\"; use(AxisBreak);` first if using breaks option.');\n      }\n      return undefined;\n    }\n    if (!isSupportAxisBreak(model.axis)) {\n      if (process.env.NODE_ENV !== 'production') {\n        error(\"Axis '\" + model.axis.dim + \"'-'\" + model.axis.type + \"' does not support break.\");\n      }\n      return undefined;\n    }\n    return option;\n  }\n}\nfunction isSupportAxisBreak(axis) {\n  // The polar radius axis can also support break feasibly. Do not do it until the requirements are met.\n  return (axis.dim === 'x' || axis.dim === 'y' || axis.dim === 'z' || axis.dim === 'single') && axis.type !== 'category';\n}","map":{"version":3,"names":["zrUtil","OrdinalScale","IntervalScale","Scale","prepareLayoutBarSeries","makeColumnLayout","retrieveColumnLayout","TimeScale","LogScale","getStackedDimension","ensureScaleRawExtentInfo","parseTimeAxisLabelFormatter","getScaleBreakHelper","error","getScaleExtent","scale","model","scaleType","type","rawExtentResult","getExtent","calculate","setBlank","isBlank","min","max","ecModel","barSeriesModels","isBaseAxisAndHasBarSeries_1","each","seriesModel","getBaseAxis","axis","barWidthAndOffset","adjustedScale","adjustScaleForOverflow","extent","fixMin","minFixed","fixMax","maxFixed","axisExtent","axisLength","Math","abs","barsOnCurrentAxis","undefined","minOverflow","Infinity","item","offset","maxOverflow","width","totalOverFlow","oldRange","oldRangePercentOfNew","overflowBuffer","niceScaleExtent","inModel","extentInfo","splitNumber","get","base","interval","isIntervalOrTime","setBreaksFromOption","retrieveAxisBreaksOption","setExtent","calcNiceExtent","minInterval","maxInterval","setInterval","createScaleByModel","axisType","ordinalMeta","getOrdinalMeta","getCategories","locale","getLocaleModel","useUTC","getClass","ifAxisCrossZero","dataExtent","makeLabelFormatter","labelFormatter","getLabelModel","parsed_1","tick","idx","getFormattedLabel","isString","label","getLabel","text","replace","isFunction","getAxisRawValue","value","scaleBreakHelper_1","extra","makeAxisLabelFormatterParamBreak","getOptionCategoryInterval","shouldShowAllLabels","getDataDimensionsOnAxis","data","axisDim","dataDimMap","mapDimensionsAll","dataDim","keys","unionAxisExtentFromData","dim","seriesExtent","getApproximateExtent","isNameLocationCenter","nameLocation","shouldAxisShow","axisModel","getShallow","option","process","env","NODE_ENV","isSupportAxisBreak"],"sources":["D:/Program Files/JetBrains/IDEAProject/springboot-vue-wms_test/vuedemo2/node_modules/echarts/lib/coord/axisHelper.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport OrdinalScale from '../scale/Ordinal.js';\nimport IntervalScale from '../scale/Interval.js';\nimport Scale from '../scale/Scale.js';\nimport { prepareLayoutBarSeries, makeColumnLayout, retrieveColumnLayout } from '../layout/barGrid.js';\nimport TimeScale from '../scale/Time.js';\nimport LogScale from '../scale/Log.js';\nimport { getStackedDimension } from '../data/helper/dataStackHelper.js';\nimport { ensureScaleRawExtentInfo } from './scaleRawExtentInfo.js';\nimport { parseTimeAxisLabelFormatter } from '../util/time.js';\nimport { getScaleBreakHelper } from '../scale/break.js';\nimport { error } from '../util/log.js';\n/**\n * Get axis scale extent before niced.\n * Item of returned array can only be number (including Infinity and NaN).\n *\n * Caution:\n * Precondition of calling this method:\n * The scale extent has been initialized using series data extent via\n * `scale.setExtent` or `scale.unionExtentFromData`;\n */\nexport function getScaleExtent(scale, model) {\n  var scaleType = scale.type;\n  var rawExtentResult = ensureScaleRawExtentInfo(scale, model, scale.getExtent()).calculate();\n  scale.setBlank(rawExtentResult.isBlank);\n  var min = rawExtentResult.min;\n  var max = rawExtentResult.max;\n  // If bars are placed on a base axis of type time or interval account for axis boundary overflow and current axis\n  // is base axis\n  // FIXME\n  // (1) Consider support value axis, where below zero and axis `onZero` should be handled properly.\n  // (2) Refactor the logic with `barGrid`. Is it not need to `makeBarWidthAndOffsetInfo` twice with different extent?\n  //     Should not depend on series type `bar`?\n  // (3) Fix that might overlap when using dataZoom.\n  // (4) Consider other chart types using `barGrid`?\n  // See #6728, #4862, `test/bar-overflow-time-plot.html`\n  var ecModel = model.ecModel;\n  if (ecModel && scaleType === 'time' /* || scaleType === 'interval' */) {\n    var barSeriesModels = prepareLayoutBarSeries('bar', ecModel);\n    var isBaseAxisAndHasBarSeries_1 = false;\n    zrUtil.each(barSeriesModels, function (seriesModel) {\n      isBaseAxisAndHasBarSeries_1 = isBaseAxisAndHasBarSeries_1 || seriesModel.getBaseAxis() === model.axis;\n    });\n    if (isBaseAxisAndHasBarSeries_1) {\n      // Calculate placement of bars on axis. TODO should be decoupled\n      // with barLayout\n      var barWidthAndOffset = makeColumnLayout(barSeriesModels);\n      // Adjust axis min and max to account for overflow\n      var adjustedScale = adjustScaleForOverflow(min, max, model, barWidthAndOffset);\n      min = adjustedScale.min;\n      max = adjustedScale.max;\n    }\n  }\n  return {\n    extent: [min, max],\n    // \"fix\" means \"fixed\", the value should not be\n    // changed in the subsequent steps.\n    fixMin: rawExtentResult.minFixed,\n    fixMax: rawExtentResult.maxFixed\n  };\n}\nfunction adjustScaleForOverflow(min, max, model,\n// Only support cartesian coord yet.\nbarWidthAndOffset) {\n  // Get Axis Length\n  var axisExtent = model.axis.getExtent();\n  var axisLength = Math.abs(axisExtent[1] - axisExtent[0]);\n  // Get bars on current base axis and calculate min and max overflow\n  var barsOnCurrentAxis = retrieveColumnLayout(barWidthAndOffset, model.axis);\n  if (barsOnCurrentAxis === undefined) {\n    return {\n      min: min,\n      max: max\n    };\n  }\n  var minOverflow = Infinity;\n  zrUtil.each(barsOnCurrentAxis, function (item) {\n    minOverflow = Math.min(item.offset, minOverflow);\n  });\n  var maxOverflow = -Infinity;\n  zrUtil.each(barsOnCurrentAxis, function (item) {\n    maxOverflow = Math.max(item.offset + item.width, maxOverflow);\n  });\n  minOverflow = Math.abs(minOverflow);\n  maxOverflow = Math.abs(maxOverflow);\n  var totalOverFlow = minOverflow + maxOverflow;\n  // Calculate required buffer based on old range and overflow\n  var oldRange = max - min;\n  var oldRangePercentOfNew = 1 - (minOverflow + maxOverflow) / axisLength;\n  var overflowBuffer = oldRange / oldRangePercentOfNew - oldRange;\n  max += overflowBuffer * (maxOverflow / totalOverFlow);\n  min -= overflowBuffer * (minOverflow / totalOverFlow);\n  return {\n    min: min,\n    max: max\n  };\n}\n// Precondition of calling this method:\n// The scale extent has been initialized using series data extent via\n// `scale.setExtent` or `scale.unionExtentFromData`;\nexport function niceScaleExtent(scale, inModel) {\n  var model = inModel;\n  var extentInfo = getScaleExtent(scale, model);\n  var extent = extentInfo.extent;\n  var splitNumber = model.get('splitNumber');\n  if (scale instanceof LogScale) {\n    scale.base = model.get('logBase');\n  }\n  var scaleType = scale.type;\n  var interval = model.get('interval');\n  var isIntervalOrTime = scaleType === 'interval' || scaleType === 'time';\n  scale.setBreaksFromOption(retrieveAxisBreaksOption(model));\n  scale.setExtent(extent[0], extent[1]);\n  scale.calcNiceExtent({\n    splitNumber: splitNumber,\n    fixMin: extentInfo.fixMin,\n    fixMax: extentInfo.fixMax,\n    minInterval: isIntervalOrTime ? model.get('minInterval') : null,\n    maxInterval: isIntervalOrTime ? model.get('maxInterval') : null\n  });\n  // If some one specified the min, max. And the default calculated interval\n  // is not good enough. He can specify the interval. It is often appeared\n  // in angle axis with angle 0 - 360. Interval calculated in interval scale is hard\n  // to be 60.\n  // FIXME\n  if (interval != null) {\n    scale.setInterval && scale.setInterval(interval);\n  }\n}\n/**\n * @param axisType Default retrieve from model.type\n */\nexport function createScaleByModel(model, axisType) {\n  axisType = axisType || model.get('type');\n  if (axisType) {\n    switch (axisType) {\n      // Buildin scale\n      case 'category':\n        return new OrdinalScale({\n          ordinalMeta: model.getOrdinalMeta ? model.getOrdinalMeta() : model.getCategories(),\n          extent: [Infinity, -Infinity]\n        });\n      case 'time':\n        return new TimeScale({\n          locale: model.ecModel.getLocaleModel(),\n          useUTC: model.ecModel.get('useUTC')\n        });\n      default:\n        // case 'value'/'interval', 'log', or others.\n        return new (Scale.getClass(axisType) || IntervalScale)();\n    }\n  }\n}\n/**\n * Check if the axis cross 0\n */\nexport function ifAxisCrossZero(axis) {\n  var dataExtent = axis.scale.getExtent();\n  var min = dataExtent[0];\n  var max = dataExtent[1];\n  return !(min > 0 && max > 0 || min < 0 && max < 0);\n}\n/**\n * @param axis\n * @return Label formatter function.\n *         param: {number} tickValue,\n *         param: {number} idx, the index in all ticks.\n *                         If category axis, this param is not required.\n *         return: {string} label string.\n */\nexport function makeLabelFormatter(axis) {\n  var labelFormatter = axis.getLabelModel().get('formatter');\n  if (axis.type === 'time') {\n    var parsed_1 = parseTimeAxisLabelFormatter(labelFormatter);\n    return function (tick, idx) {\n      return axis.scale.getFormattedLabel(tick, idx, parsed_1);\n    };\n  } else if (zrUtil.isString(labelFormatter)) {\n    return function (tick) {\n      // For category axis, get raw value; for numeric axis,\n      // get formatted label like '1,333,444'.\n      var label = axis.scale.getLabel(tick);\n      var text = labelFormatter.replace('{value}', label != null ? label : '');\n      return text;\n    };\n  } else if (zrUtil.isFunction(labelFormatter)) {\n    if (axis.type === 'category') {\n      return function (tick, idx) {\n        // The original intention of `idx` is \"the index of the tick in all ticks\".\n        // But the previous implementation of category axis do not consider the\n        // `axisLabel.interval`, which cause that, for example, the `interval` is\n        // `1`, then the ticks \"name5\", \"name7\", \"name9\" are displayed, where the\n        // corresponding `idx` are `0`, `2`, `4`, but not `0`, `1`, `2`. So we keep\n        // the definition here for back compatibility.\n        return labelFormatter(getAxisRawValue(axis, tick), tick.value - axis.scale.getExtent()[0], null // Using `null` just for backward compat.\n        );\n      };\n    }\n    var scaleBreakHelper_1 = getScaleBreakHelper();\n    return function (tick, idx) {\n      // Using `null` just for backward compat. It's been found that in the `test/axis-customTicks.html`,\n      // there is a formatter `function (value, index, revers = true) { ... }`. Although the third param\n      // `revers` is incorrect and always `null`, changing it might introduce a breaking change.\n      var extra = null;\n      if (scaleBreakHelper_1) {\n        extra = scaleBreakHelper_1.makeAxisLabelFormatterParamBreak(extra, tick[\"break\"]);\n      }\n      return labelFormatter(getAxisRawValue(axis, tick), idx, extra);\n    };\n  } else {\n    return function (tick) {\n      return axis.scale.getLabel(tick);\n    };\n  }\n}\nexport function getAxisRawValue(axis, tick) {\n  // In category axis with data zoom, tick is not the original\n  // index of axis.data. So tick should not be exposed to user\n  // in category axis.\n  return axis.type === 'category' ? axis.scale.getLabel(tick) : tick.value;\n}\n/**\n * @param model axisLabelModel or axisTickModel\n * @return {number|String} Can be null|'auto'|number|function\n */\nexport function getOptionCategoryInterval(model) {\n  var interval = model.get('interval');\n  return interval == null ? 'auto' : interval;\n}\n/**\n * Set `categoryInterval` as 0 implicitly indicates that\n * show all labels regardless of overlap.\n * @param {Object} axis axisModel.axis\n */\nexport function shouldShowAllLabels(axis) {\n  return axis.type === 'category' && getOptionCategoryInterval(axis.getLabelModel()) === 0;\n}\nexport function getDataDimensionsOnAxis(data, axisDim) {\n  // Remove duplicated dat dimensions caused by `getStackedDimension`.\n  var dataDimMap = {};\n  // Currently `mapDimensionsAll` will contain stack result dimension ('__\\0ecstackresult').\n  // PENDING: is it reasonable? Do we need to remove the original dim from \"coord dim\" since\n  // there has been stacked result dim?\n  zrUtil.each(data.mapDimensionsAll(axisDim), function (dataDim) {\n    // For example, the extent of the original dimension\n    // is [0.1, 0.5], the extent of the `stackResultDimension`\n    // is [7, 9], the final extent should NOT include [0.1, 0.5],\n    // because there is no graphic corresponding to [0.1, 0.5].\n    // See the case in `test/area-stack.html` `main1`, where area line\n    // stack needs `yAxis` not start from 0.\n    dataDimMap[getStackedDimension(data, dataDim)] = true;\n  });\n  return zrUtil.keys(dataDimMap);\n}\nexport function unionAxisExtentFromData(dataExtent, data, axisDim) {\n  if (data) {\n    zrUtil.each(getDataDimensionsOnAxis(data, axisDim), function (dim) {\n      var seriesExtent = data.getApproximateExtent(dim);\n      seriesExtent[0] < dataExtent[0] && (dataExtent[0] = seriesExtent[0]);\n      seriesExtent[1] > dataExtent[1] && (dataExtent[1] = seriesExtent[1]);\n    });\n  }\n}\nexport function isNameLocationCenter(nameLocation) {\n  return nameLocation === 'middle' || nameLocation === 'center';\n}\nexport function shouldAxisShow(axisModel) {\n  return axisModel.getShallow('show');\n}\nexport function retrieveAxisBreaksOption(model) {\n  var option = model.get('breaks', true);\n  if (option != null) {\n    if (!getScaleBreakHelper()) {\n      if (process.env.NODE_ENV !== 'production') {\n        error('Must `import {AxisBreak} from \"echarts/features.js\"; use(AxisBreak);` first if using breaks option.');\n      }\n      return undefined;\n    }\n    if (!isSupportAxisBreak(model.axis)) {\n      if (process.env.NODE_ENV !== 'production') {\n        error(\"Axis '\" + model.axis.dim + \"'-'\" + model.axis.type + \"' does not support break.\");\n      }\n      return undefined;\n    }\n    return option;\n  }\n}\nfunction isSupportAxisBreak(axis) {\n  // The polar radius axis can also support break feasibly. Do not do it until the requirements are met.\n  return (axis.dim === 'x' || axis.dim === 'y' || axis.dim === 'z' || axis.dim === 'single') && axis.type !== 'category';\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}