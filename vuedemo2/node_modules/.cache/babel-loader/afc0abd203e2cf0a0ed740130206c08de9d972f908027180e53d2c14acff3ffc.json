{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport SeriesModel from '../../model/Series.js';\nimport Tree from '../../data/Tree.js';\nimport Model from '../../model/Model.js';\nimport { wrapTreePathInfo } from '../helper/treeHelper.js';\nimport { normalizeToArray } from '../../util/model.js';\nimport { createTooltipMarkup } from '../../component/tooltip/tooltipMarkup.js';\nimport enableAriaDecalForTree from '../helper/enableAriaDecalForTree.js';\nimport tokens from '../../visual/tokens.js';\nvar TreemapSeriesModel = /** @class */function (_super) {\n  __extends(TreemapSeriesModel, _super);\n  function TreemapSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = TreemapSeriesModel.type;\n    _this.preventUsingHoverLayer = true;\n    return _this;\n  }\n  /**\n   * @override\n   */\n  TreemapSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    // Create a virtual root.\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    completeTreeValue(root);\n    var levels = option.levels || [];\n    // Used in \"visual priority\" in `treemapVisual.js`.\n    // This way is a little tricky, must satisfy the precondition:\n    //   1. There is no `treeNode.getModel('itemStyle.xxx')` used.\n    //   2. The `Model.prototype.getModel()` will not use any clone-like way.\n    var designatedVisualItemStyle = this.designatedVisualItemStyle = {};\n    var designatedVisualModel = new Model({\n      itemStyle: designatedVisualItemStyle\n    }, this, ecModel);\n    levels = option.levels = setDefault(levels, ecModel);\n    var levelModels = zrUtil.map(levels || [], function (levelDefine) {\n      return new Model(levelDefine, designatedVisualModel, ecModel);\n    }, this);\n    // Make sure always a new tree is created when setOption,\n    // in TreemapView, we check whether oldTree === newTree\n    // to choose mappings approach among old shapes and new shapes.\n    var tree = Tree.createTree(root, this, beforeLink);\n    function beforeLink(nodeData) {\n      nodeData.wrapMethod('getItemModel', function (model, idx) {\n        var node = tree.getNodeByDataIndex(idx);\n        var levelModel = node ? levelModels[node.depth] : null;\n        // If no levelModel, we also need `designatedVisualModel`.\n        model.parentModel = levelModel || designatedVisualModel;\n        return model;\n      });\n    }\n    return tree.data;\n  };\n  TreemapSeriesModel.prototype.optionUpdated = function () {\n    this.resetViewRoot();\n  };\n  /**\n   * @override\n   * @param {number} dataIndex\n   * @param {boolean} [mutipleSeries=false]\n   */\n  TreemapSeriesModel.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    var data = this.getData();\n    var value = this.getRawValue(dataIndex);\n    var name = data.getName(dataIndex);\n    return createTooltipMarkup('nameValue', {\n      name: name,\n      value: value\n    });\n  };\n  /**\n   * Add tree path to tooltip param\n   *\n   * @override\n   * @param {number} dataIndex\n   * @return {Object}\n   */\n  TreemapSeriesModel.prototype.getDataParams = function (dataIndex) {\n    var params = _super.prototype.getDataParams.apply(this, arguments);\n    var node = this.getData().tree.getNodeByDataIndex(dataIndex);\n    params.treeAncestors = wrapTreePathInfo(node, this);\n    // compatitable the previous code.\n    params.treePathInfo = params.treeAncestors;\n    return params;\n  };\n  /**\n   * @public\n   * @param {Object} layoutInfo {\n   *                                x: containerGroup x\n   *                                y: containerGroup y\n   *                                width: containerGroup width\n   *                                height: containerGroup height\n   *                            }\n   */\n  TreemapSeriesModel.prototype.setLayoutInfo = function (layoutInfo) {\n    /**\n     * @readOnly\n     * @type {Object}\n     */\n    this.layoutInfo = this.layoutInfo || {};\n    zrUtil.extend(this.layoutInfo, layoutInfo);\n  };\n  /**\n   * @param  {string} id\n   * @return {number} index\n   */\n  TreemapSeriesModel.prototype.mapIdToIndex = function (id) {\n    // A feature is implemented:\n    // index is monotone increasing with the sequence of\n    // input id at the first time.\n    // This feature can make sure that each data item and its\n    // mapped color have the same index between data list and\n    // color list at the beginning, which is useful for user\n    // to adjust data-color mapping.\n    /**\n     * @private\n     * @type {Object}\n     */\n    var idIndexMap = this._idIndexMap;\n    if (!idIndexMap) {\n      idIndexMap = this._idIndexMap = zrUtil.createHashMap();\n      /**\n       * @private\n       * @type {number}\n       */\n      this._idIndexMapCount = 0;\n    }\n    var index = idIndexMap.get(id);\n    if (index == null) {\n      idIndexMap.set(id, index = this._idIndexMapCount++);\n    }\n    return index;\n  };\n  TreemapSeriesModel.prototype.getViewRoot = function () {\n    return this._viewRoot;\n  };\n  TreemapSeriesModel.prototype.resetViewRoot = function (viewRoot) {\n    viewRoot ? this._viewRoot = viewRoot : viewRoot = this._viewRoot;\n    var root = this.getRawData().tree.root;\n    if (!viewRoot || viewRoot !== root && !root.contains(viewRoot)) {\n      this._viewRoot = root;\n    }\n  };\n  TreemapSeriesModel.prototype.enableAriaDecal = function () {\n    enableAriaDecalForTree(this);\n  };\n  TreemapSeriesModel.type = 'series.treemap';\n  TreemapSeriesModel.layoutMode = 'box';\n  TreemapSeriesModel.defaultOption = {\n    // Disable progressive rendering\n    progressive: 0,\n    // size: ['80%', '80%'],            // deprecated, compatible with ec2.\n    // `coordinateSystem` can be declared as 'matrix', 'calendar',\n    //  which provides box layout container.\n    coordinateSystemUsage: 'box',\n    left: tokens.size.l,\n    top: tokens.size.xxxl,\n    right: tokens.size.l,\n    bottom: tokens.size.xxxl,\n    sort: true,\n    clipWindow: 'origin',\n    squareRatio: 0.5 * (1 + Math.sqrt(5)),\n    leafDepth: null,\n    drillDownIcon: '▶',\n    // to align specialized icon. ▷▶❒❐▼✚\n    zoomToNodeRatio: 0.32 * 0.32,\n    scaleLimit: {\n      max: 5,\n      min: 0.2\n    },\n    roam: true,\n    roamTrigger: 'global',\n    nodeClick: 'zoomToNode',\n    animation: true,\n    animationDurationUpdate: 900,\n    animationEasing: 'quinticInOut',\n    breadcrumb: {\n      show: true,\n      height: 22,\n      left: 'center',\n      bottom: tokens.size.m,\n      // right\n      // bottom\n      emptyItemWidth: 25,\n      itemStyle: {\n        color: tokens.color.backgroundShade,\n        textStyle: {\n          color: tokens.color.secondary\n        }\n      },\n      emphasis: {\n        itemStyle: {\n          color: tokens.color.background\n        }\n      }\n    },\n    label: {\n      show: true,\n      // Do not use textDistance, for ellipsis rect just the same as treemap node rect.\n      distance: 0,\n      padding: 5,\n      position: 'inside',\n      // formatter: null,\n      color: tokens.color.neutral00,\n      overflow: 'truncate'\n      // align\n      // verticalAlign\n    },\n    upperLabel: {\n      show: false,\n      position: [0, '50%'],\n      height: 20,\n      // formatter: null,\n      // color: '#fff',\n      overflow: 'truncate',\n      // align: null,\n      verticalAlign: 'middle'\n    },\n    itemStyle: {\n      color: null,\n      colorAlpha: null,\n      colorSaturation: null,\n      borderWidth: 0,\n      gapWidth: 0,\n      borderColor: tokens.color.neutral00,\n      borderColorSaturation: null // If specified, borderColor will be ineffective, and the\n      // border color is evaluated by color of current node and\n      // borderColorSaturation.\n    },\n    emphasis: {\n      upperLabel: {\n        show: true,\n        position: [0, '50%'],\n        overflow: 'truncate',\n        verticalAlign: 'middle'\n      }\n    },\n    visualDimension: 0,\n    visualMin: null,\n    visualMax: null,\n    color: [],\n    // level[n].color (if necessary).\n    // + Specify color list of each level. level[0].color would be global\n    // color list if not specified. (see method `setDefault`).\n    // + But set as a empty array to forbid fetch color from global palette\n    // when using nodeModel.get('color'), otherwise nodes on deep level\n    // will always has color palette set and are not able to inherit color\n    // from parent node.\n    // + TreemapSeries.color can not be set as 'none', otherwise effect\n    // legend color fetching (see seriesColor.js).\n    colorAlpha: null,\n    colorSaturation: null,\n    colorMappingBy: 'index',\n    visibleMin: 10,\n    // be rendered. Only works when sort is 'asc' or 'desc'.\n    childrenVisibleMin: null,\n    // grandchildren will not show.\n    // Why grandchildren? If not grandchildren but children,\n    // some siblings show children and some not,\n    // the appearance may be mess and not consistent,\n    levels: [] // Each item: {\n    //     visibleMin, itemStyle, visualDimension, label\n    // }\n  };\n  return TreemapSeriesModel;\n}(SeriesModel);\n/**\n * @param {Object} dataNode\n */\nfunction completeTreeValue(dataNode) {\n  // Postorder travel tree.\n  // If value of none-leaf node is not set,\n  // calculate it by suming up the value of all children.\n  var sum = 0;\n  zrUtil.each(dataNode.children, function (child) {\n    completeTreeValue(child);\n    var childValue = child.value;\n    zrUtil.isArray(childValue) && (childValue = childValue[0]);\n    sum += childValue;\n  });\n  var thisValue = dataNode.value;\n  if (zrUtil.isArray(thisValue)) {\n    thisValue = thisValue[0];\n  }\n  if (thisValue == null || isNaN(thisValue)) {\n    thisValue = sum;\n  }\n  // Value should not less than 0.\n  if (thisValue < 0) {\n    thisValue = 0;\n  }\n  zrUtil.isArray(dataNode.value) ? dataNode.value[0] = thisValue : dataNode.value = thisValue;\n}\n/**\n * set default to level configuration\n */\nfunction setDefault(levels, ecModel) {\n  var globalColorList = normalizeToArray(ecModel.get('color'));\n  var globalDecalList = normalizeToArray(ecModel.get(['aria', 'decal', 'decals']));\n  if (!globalColorList) {\n    return;\n  }\n  levels = levels || [];\n  var hasColorDefine;\n  var hasDecalDefine;\n  zrUtil.each(levels, function (levelDefine) {\n    var model = new Model(levelDefine);\n    var modelColor = model.get('color');\n    var modelDecal = model.get('decal');\n    if (model.get(['itemStyle', 'color']) || modelColor && modelColor !== 'none') {\n      hasColorDefine = true;\n    }\n    if (model.get(['itemStyle', 'decal']) || modelDecal && modelDecal !== 'none') {\n      hasDecalDefine = true;\n    }\n  });\n  var level0 = levels[0] || (levels[0] = {});\n  if (!hasColorDefine) {\n    level0.color = globalColorList.slice();\n  }\n  if (!hasDecalDefine && globalDecalList) {\n    level0.decal = globalDecalList.slice();\n  }\n  return levels;\n}\nexport default TreemapSeriesModel;","map":{"version":3,"names":["__extends","zrUtil","SeriesModel","Tree","Model","wrapTreePathInfo","normalizeToArray","createTooltipMarkup","enableAriaDecalForTree","tokens","TreemapSeriesModel","_super","_this","apply","arguments","type","preventUsingHoverLayer","prototype","getInitialData","option","ecModel","root","name","children","data","completeTreeValue","levels","designatedVisualItemStyle","designatedVisualModel","itemStyle","setDefault","levelModels","map","levelDefine","tree","createTree","beforeLink","nodeData","wrapMethod","model","idx","node","getNodeByDataIndex","levelModel","depth","parentModel","optionUpdated","resetViewRoot","formatTooltip","dataIndex","multipleSeries","dataType","getData","value","getRawValue","getName","getDataParams","params","treeAncestors","treePathInfo","setLayoutInfo","layoutInfo","extend","mapIdToIndex","id","idIndexMap","_idIndexMap","createHashMap","_idIndexMapCount","index","get","set","getViewRoot","_viewRoot","viewRoot","getRawData","contains","enableAriaDecal","layoutMode","defaultOption","progressive","coordinateSystemUsage","left","size","l","top","xxxl","right","bottom","sort","clipWindow","squareRatio","Math","sqrt","leafDepth","drillDownIcon","zoomToNodeRatio","scaleLimit","max","min","roam","roamTrigger","nodeClick","animation","animationDurationUpdate","animationEasing","breadcrumb","show","height","m","emptyItemWidth","color","backgroundShade","textStyle","secondary","emphasis","background","label","distance","padding","position","neutral00","overflow","upperLabel","verticalAlign","colorAlpha","colorSaturation","borderWidth","gapWidth","borderColor","borderColorSaturation","visualDimension","visualMin","visualMax","colorMappingBy","visibleMin","childrenVisibleMin","dataNode","sum","each","child","childValue","isArray","thisValue","isNaN","globalColorList","globalDecalList","hasColorDefine","hasDecalDefine","modelColor","modelDecal","level0","slice","decal"],"sources":["D:/Program Files/JetBrains/IDEAProject/springboot-vue-wms_test/vuedemo2/node_modules/echarts/lib/chart/treemap/TreemapSeries.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport SeriesModel from '../../model/Series.js';\nimport Tree from '../../data/Tree.js';\nimport Model from '../../model/Model.js';\nimport { wrapTreePathInfo } from '../helper/treeHelper.js';\nimport { normalizeToArray } from '../../util/model.js';\nimport { createTooltipMarkup } from '../../component/tooltip/tooltipMarkup.js';\nimport enableAriaDecalForTree from '../helper/enableAriaDecalForTree.js';\nimport tokens from '../../visual/tokens.js';\nvar TreemapSeriesModel = /** @class */function (_super) {\n  __extends(TreemapSeriesModel, _super);\n  function TreemapSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this.type = TreemapSeriesModel.type;\n    _this.preventUsingHoverLayer = true;\n    return _this;\n  }\n  /**\n   * @override\n   */\n  TreemapSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    // Create a virtual root.\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    completeTreeValue(root);\n    var levels = option.levels || [];\n    // Used in \"visual priority\" in `treemapVisual.js`.\n    // This way is a little tricky, must satisfy the precondition:\n    //   1. There is no `treeNode.getModel('itemStyle.xxx')` used.\n    //   2. The `Model.prototype.getModel()` will not use any clone-like way.\n    var designatedVisualItemStyle = this.designatedVisualItemStyle = {};\n    var designatedVisualModel = new Model({\n      itemStyle: designatedVisualItemStyle\n    }, this, ecModel);\n    levels = option.levels = setDefault(levels, ecModel);\n    var levelModels = zrUtil.map(levels || [], function (levelDefine) {\n      return new Model(levelDefine, designatedVisualModel, ecModel);\n    }, this);\n    // Make sure always a new tree is created when setOption,\n    // in TreemapView, we check whether oldTree === newTree\n    // to choose mappings approach among old shapes and new shapes.\n    var tree = Tree.createTree(root, this, beforeLink);\n    function beforeLink(nodeData) {\n      nodeData.wrapMethod('getItemModel', function (model, idx) {\n        var node = tree.getNodeByDataIndex(idx);\n        var levelModel = node ? levelModels[node.depth] : null;\n        // If no levelModel, we also need `designatedVisualModel`.\n        model.parentModel = levelModel || designatedVisualModel;\n        return model;\n      });\n    }\n    return tree.data;\n  };\n  TreemapSeriesModel.prototype.optionUpdated = function () {\n    this.resetViewRoot();\n  };\n  /**\n   * @override\n   * @param {number} dataIndex\n   * @param {boolean} [mutipleSeries=false]\n   */\n  TreemapSeriesModel.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    var data = this.getData();\n    var value = this.getRawValue(dataIndex);\n    var name = data.getName(dataIndex);\n    return createTooltipMarkup('nameValue', {\n      name: name,\n      value: value\n    });\n  };\n  /**\n   * Add tree path to tooltip param\n   *\n   * @override\n   * @param {number} dataIndex\n   * @return {Object}\n   */\n  TreemapSeriesModel.prototype.getDataParams = function (dataIndex) {\n    var params = _super.prototype.getDataParams.apply(this, arguments);\n    var node = this.getData().tree.getNodeByDataIndex(dataIndex);\n    params.treeAncestors = wrapTreePathInfo(node, this);\n    // compatitable the previous code.\n    params.treePathInfo = params.treeAncestors;\n    return params;\n  };\n  /**\n   * @public\n   * @param {Object} layoutInfo {\n   *                                x: containerGroup x\n   *                                y: containerGroup y\n   *                                width: containerGroup width\n   *                                height: containerGroup height\n   *                            }\n   */\n  TreemapSeriesModel.prototype.setLayoutInfo = function (layoutInfo) {\n    /**\n     * @readOnly\n     * @type {Object}\n     */\n    this.layoutInfo = this.layoutInfo || {};\n    zrUtil.extend(this.layoutInfo, layoutInfo);\n  };\n  /**\n   * @param  {string} id\n   * @return {number} index\n   */\n  TreemapSeriesModel.prototype.mapIdToIndex = function (id) {\n    // A feature is implemented:\n    // index is monotone increasing with the sequence of\n    // input id at the first time.\n    // This feature can make sure that each data item and its\n    // mapped color have the same index between data list and\n    // color list at the beginning, which is useful for user\n    // to adjust data-color mapping.\n    /**\n     * @private\n     * @type {Object}\n     */\n    var idIndexMap = this._idIndexMap;\n    if (!idIndexMap) {\n      idIndexMap = this._idIndexMap = zrUtil.createHashMap();\n      /**\n       * @private\n       * @type {number}\n       */\n      this._idIndexMapCount = 0;\n    }\n    var index = idIndexMap.get(id);\n    if (index == null) {\n      idIndexMap.set(id, index = this._idIndexMapCount++);\n    }\n    return index;\n  };\n  TreemapSeriesModel.prototype.getViewRoot = function () {\n    return this._viewRoot;\n  };\n  TreemapSeriesModel.prototype.resetViewRoot = function (viewRoot) {\n    viewRoot ? this._viewRoot = viewRoot : viewRoot = this._viewRoot;\n    var root = this.getRawData().tree.root;\n    if (!viewRoot || viewRoot !== root && !root.contains(viewRoot)) {\n      this._viewRoot = root;\n    }\n  };\n  TreemapSeriesModel.prototype.enableAriaDecal = function () {\n    enableAriaDecalForTree(this);\n  };\n  TreemapSeriesModel.type = 'series.treemap';\n  TreemapSeriesModel.layoutMode = 'box';\n  TreemapSeriesModel.defaultOption = {\n    // Disable progressive rendering\n    progressive: 0,\n    // size: ['80%', '80%'],            // deprecated, compatible with ec2.\n    // `coordinateSystem` can be declared as 'matrix', 'calendar',\n    //  which provides box layout container.\n    coordinateSystemUsage: 'box',\n    left: tokens.size.l,\n    top: tokens.size.xxxl,\n    right: tokens.size.l,\n    bottom: tokens.size.xxxl,\n    sort: true,\n    clipWindow: 'origin',\n    squareRatio: 0.5 * (1 + Math.sqrt(5)),\n    leafDepth: null,\n    drillDownIcon: '▶',\n    // to align specialized icon. ▷▶❒❐▼✚\n    zoomToNodeRatio: 0.32 * 0.32,\n    scaleLimit: {\n      max: 5,\n      min: 0.2\n    },\n    roam: true,\n    roamTrigger: 'global',\n    nodeClick: 'zoomToNode',\n    animation: true,\n    animationDurationUpdate: 900,\n    animationEasing: 'quinticInOut',\n    breadcrumb: {\n      show: true,\n      height: 22,\n      left: 'center',\n      bottom: tokens.size.m,\n      // right\n      // bottom\n      emptyItemWidth: 25,\n      itemStyle: {\n        color: tokens.color.backgroundShade,\n        textStyle: {\n          color: tokens.color.secondary\n        }\n      },\n      emphasis: {\n        itemStyle: {\n          color: tokens.color.background\n        }\n      }\n    },\n    label: {\n      show: true,\n      // Do not use textDistance, for ellipsis rect just the same as treemap node rect.\n      distance: 0,\n      padding: 5,\n      position: 'inside',\n      // formatter: null,\n      color: tokens.color.neutral00,\n      overflow: 'truncate'\n      // align\n      // verticalAlign\n    },\n    upperLabel: {\n      show: false,\n      position: [0, '50%'],\n      height: 20,\n      // formatter: null,\n      // color: '#fff',\n      overflow: 'truncate',\n      // align: null,\n      verticalAlign: 'middle'\n    },\n    itemStyle: {\n      color: null,\n      colorAlpha: null,\n      colorSaturation: null,\n      borderWidth: 0,\n      gapWidth: 0,\n      borderColor: tokens.color.neutral00,\n      borderColorSaturation: null // If specified, borderColor will be ineffective, and the\n      // border color is evaluated by color of current node and\n      // borderColorSaturation.\n    },\n    emphasis: {\n      upperLabel: {\n        show: true,\n        position: [0, '50%'],\n        overflow: 'truncate',\n        verticalAlign: 'middle'\n      }\n    },\n    visualDimension: 0,\n    visualMin: null,\n    visualMax: null,\n    color: [],\n    // level[n].color (if necessary).\n    // + Specify color list of each level. level[0].color would be global\n    // color list if not specified. (see method `setDefault`).\n    // + But set as a empty array to forbid fetch color from global palette\n    // when using nodeModel.get('color'), otherwise nodes on deep level\n    // will always has color palette set and are not able to inherit color\n    // from parent node.\n    // + TreemapSeries.color can not be set as 'none', otherwise effect\n    // legend color fetching (see seriesColor.js).\n    colorAlpha: null,\n    colorSaturation: null,\n    colorMappingBy: 'index',\n    visibleMin: 10,\n    // be rendered. Only works when sort is 'asc' or 'desc'.\n    childrenVisibleMin: null,\n    // grandchildren will not show.\n    // Why grandchildren? If not grandchildren but children,\n    // some siblings show children and some not,\n    // the appearance may be mess and not consistent,\n    levels: [] // Each item: {\n    //     visibleMin, itemStyle, visualDimension, label\n    // }\n  };\n  return TreemapSeriesModel;\n}(SeriesModel);\n/**\n * @param {Object} dataNode\n */\nfunction completeTreeValue(dataNode) {\n  // Postorder travel tree.\n  // If value of none-leaf node is not set,\n  // calculate it by suming up the value of all children.\n  var sum = 0;\n  zrUtil.each(dataNode.children, function (child) {\n    completeTreeValue(child);\n    var childValue = child.value;\n    zrUtil.isArray(childValue) && (childValue = childValue[0]);\n    sum += childValue;\n  });\n  var thisValue = dataNode.value;\n  if (zrUtil.isArray(thisValue)) {\n    thisValue = thisValue[0];\n  }\n  if (thisValue == null || isNaN(thisValue)) {\n    thisValue = sum;\n  }\n  // Value should not less than 0.\n  if (thisValue < 0) {\n    thisValue = 0;\n  }\n  zrUtil.isArray(dataNode.value) ? dataNode.value[0] = thisValue : dataNode.value = thisValue;\n}\n/**\n * set default to level configuration\n */\nfunction setDefault(levels, ecModel) {\n  var globalColorList = normalizeToArray(ecModel.get('color'));\n  var globalDecalList = normalizeToArray(ecModel.get(['aria', 'decal', 'decals']));\n  if (!globalColorList) {\n    return;\n  }\n  levels = levels || [];\n  var hasColorDefine;\n  var hasDecalDefine;\n  zrUtil.each(levels, function (levelDefine) {\n    var model = new Model(levelDefine);\n    var modelColor = model.get('color');\n    var modelDecal = model.get('decal');\n    if (model.get(['itemStyle', 'color']) || modelColor && modelColor !== 'none') {\n      hasColorDefine = true;\n    }\n    if (model.get(['itemStyle', 'decal']) || modelDecal && modelDecal !== 'none') {\n      hasDecalDefine = true;\n    }\n  });\n  var level0 = levels[0] || (levels[0] = {});\n  if (!hasColorDefine) {\n    level0.color = globalColorList.slice();\n  }\n  if (!hasDecalDefine && globalDecalList) {\n    level0.decal = globalDecalList.slice();\n  }\n  return levels;\n}\nexport default TreemapSeriesModel;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}