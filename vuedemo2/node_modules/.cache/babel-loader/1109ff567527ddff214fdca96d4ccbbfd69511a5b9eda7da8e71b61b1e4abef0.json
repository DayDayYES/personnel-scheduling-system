{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { each, map } from 'zrender/lib/core/util.js';\nimport { linearMap, getPixelPrecision, round } from '../util/number.js';\nimport { createAxisTicks, createAxisLabels, calculateCategoryInterval, AxisTickLabelComputingKind, createAxisLabelsComputingContext } from './axisTickLabelBuilder.js';\nvar NORMALIZED_EXTENT = [0, 1];\n/**\n * Base class of Axis.\n *\n * Lifetime: recreate for each main process.\n * [NOTICE]: Some caches is stored on the axis instance (see `axisTickLabelBuilder.ts`)\n *  which is based on this lifetime.\n */\nvar Axis = /** @class */function () {\n  function Axis(dim, scale, extent) {\n    this.onBand = false;\n    // Make sure that `extent[0] > extent[1]` only if `inverse: true`.\n    // `inverse` can be inferred by `extent` unless `extent[0] === extent[1]`.\n    this.inverse = false;\n    this.dim = dim;\n    this.scale = scale;\n    this._extent = extent || [0, 0];\n  }\n  /**\n   * If axis extent contain given coord\n   */\n  Axis.prototype.contain = function (coord) {\n    var extent = this._extent;\n    var min = Math.min(extent[0], extent[1]);\n    var max = Math.max(extent[0], extent[1]);\n    return coord >= min && coord <= max;\n  };\n  /**\n   * If axis extent contain given data\n   */\n  Axis.prototype.containData = function (data) {\n    return this.scale.contain(this.scale.parse(data));\n  };\n  /**\n   * Get coord extent.\n   */\n  Axis.prototype.getExtent = function () {\n    return this._extent.slice();\n  };\n  /**\n   * Get precision used for formatting\n   */\n  Axis.prototype.getPixelPrecision = function (dataExtent) {\n    return getPixelPrecision(dataExtent || this.scale.getExtent(), this._extent);\n  };\n  /**\n   * Set coord extent\n   */\n  Axis.prototype.setExtent = function (start, end) {\n    var extent = this._extent;\n    extent[0] = start;\n    extent[1] = end;\n  };\n  /**\n   * Convert data to coord. Data is the rank if it has an ordinal scale\n   */\n  Axis.prototype.dataToCoord = function (data, clamp) {\n    var extent = this._extent;\n    var scale = this.scale;\n    data = scale.normalize(scale.parse(data));\n    if (this.onBand && scale.type === 'ordinal') {\n      extent = extent.slice();\n      fixExtentWithBands(extent, scale.count());\n    }\n    return linearMap(data, NORMALIZED_EXTENT, extent, clamp);\n  };\n  /**\n   * Convert coord to data. Data is the rank if it has an ordinal scale\n   */\n  Axis.prototype.coordToData = function (coord, clamp) {\n    var extent = this._extent;\n    var scale = this.scale;\n    if (this.onBand && scale.type === 'ordinal') {\n      extent = extent.slice();\n      fixExtentWithBands(extent, scale.count());\n    }\n    var t = linearMap(coord, extent, NORMALIZED_EXTENT, clamp);\n    return this.scale.scale(t);\n  };\n  /**\n   * Convert pixel point to data in axis\n   */\n  Axis.prototype.pointToData = function (point, clamp) {\n    // Should be implemented in derived class if necessary.\n    return;\n  };\n  /**\n   * Different from `zrUtil.map(axis.getTicks(), axis.dataToCoord, axis)`,\n   * `axis.getTicksCoords` considers `onBand`, which is used by\n   * `boundaryGap:true` of category axis and splitLine and splitArea.\n   * @param opt.tickModel default: axis.model.getModel('axisTick')\n   * @param opt.clamp If `true`, the first and the last\n   *        tick must be at the axis end points. Otherwise, clip ticks\n   *        that outside the axis extent.\n   */\n  Axis.prototype.getTicksCoords = function (opt) {\n    opt = opt || {};\n    var tickModel = opt.tickModel || this.getTickModel();\n    var result = createAxisTicks(this, tickModel, {\n      breakTicks: opt.breakTicks,\n      pruneByBreak: opt.pruneByBreak\n    });\n    var ticks = result.ticks;\n    var ticksCoords = map(ticks, function (tickVal) {\n      return {\n        coord: this.dataToCoord(this.scale.type === 'ordinal' ? this.scale.getRawOrdinalNumber(tickVal) : tickVal),\n        tickValue: tickVal\n      };\n    }, this);\n    var alignWithLabel = tickModel.get('alignWithLabel');\n    fixOnBandTicksCoords(this, ticksCoords, alignWithLabel, opt.clamp);\n    return ticksCoords;\n  };\n  Axis.prototype.getMinorTicksCoords = function () {\n    if (this.scale.type === 'ordinal') {\n      // Category axis doesn't support minor ticks\n      return [];\n    }\n    var minorTickModel = this.model.getModel('minorTick');\n    var splitNumber = minorTickModel.get('splitNumber');\n    // Protection.\n    if (!(splitNumber > 0 && splitNumber < 100)) {\n      splitNumber = 5;\n    }\n    var minorTicks = this.scale.getMinorTicks(splitNumber);\n    var minorTicksCoords = map(minorTicks, function (minorTicksGroup) {\n      return map(minorTicksGroup, function (minorTick) {\n        return {\n          coord: this.dataToCoord(minorTick),\n          tickValue: minorTick\n        };\n      }, this);\n    }, this);\n    return minorTicksCoords;\n  };\n  Axis.prototype.getViewLabels = function (ctx) {\n    ctx = ctx || createAxisLabelsComputingContext(AxisTickLabelComputingKind.determine);\n    return createAxisLabels(this, ctx).labels;\n  };\n  Axis.prototype.getLabelModel = function () {\n    return this.model.getModel('axisLabel');\n  };\n  /**\n   * Notice here we only get the default tick model. For splitLine\n   * or splitArea, we should pass the splitLineModel or splitAreaModel\n   * manually when calling `getTicksCoords`.\n   * In GL, this method may be overridden to:\n   * `axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));`\n   */\n  Axis.prototype.getTickModel = function () {\n    return this.model.getModel('axisTick');\n  };\n  /**\n   * Get width of band\n   */\n  Axis.prototype.getBandWidth = function () {\n    var axisExtent = this._extent;\n    var dataExtent = this.scale.getExtent();\n    var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);\n    // Fix #2728, avoid NaN when only one data.\n    len === 0 && (len = 1);\n    var size = Math.abs(axisExtent[1] - axisExtent[0]);\n    return Math.abs(size) / len;\n  };\n  /**\n   * Only be called in category axis.\n   * Can be overridden, consider other axes like in 3D.\n   * @return Auto interval for cateogry axis tick and label\n   */\n  Axis.prototype.calculateCategoryInterval = function (ctx) {\n    ctx = ctx || createAxisLabelsComputingContext(AxisTickLabelComputingKind.determine);\n    return calculateCategoryInterval(this, ctx);\n  };\n  return Axis;\n}();\nfunction fixExtentWithBands(extent, nTick) {\n  var size = extent[1] - extent[0];\n  var len = nTick;\n  var margin = size / len / 2;\n  extent[0] += margin;\n  extent[1] -= margin;\n}\n// If axis has labels [1, 2, 3, 4]. Bands on the axis are\n// |---1---|---2---|---3---|---4---|.\n// So the displayed ticks and splitLine/splitArea should between\n// each data item, otherwise cause misleading (e.g., split tow bars\n// of a single data item when there are two bar series).\n// Also consider if tickCategoryInterval > 0 and onBand, ticks and\n// splitLine/spliteArea should layout appropriately corresponding\n// to displayed labels. (So we should not use `getBandWidth` in this\n// case).\nfunction fixOnBandTicksCoords(axis, ticksCoords, alignWithLabel, clamp) {\n  var ticksLen = ticksCoords.length;\n  if (!axis.onBand || alignWithLabel || !ticksLen) {\n    return;\n  }\n  var axisExtent = axis.getExtent();\n  var last;\n  var diffSize;\n  if (ticksLen === 1) {\n    ticksCoords[0].coord = axisExtent[0];\n    ticksCoords[0].onBand = true;\n    last = ticksCoords[1] = {\n      coord: axisExtent[1],\n      tickValue: ticksCoords[0].tickValue,\n      onBand: true\n    };\n  } else {\n    var crossLen = ticksCoords[ticksLen - 1].tickValue - ticksCoords[0].tickValue;\n    var shift_1 = (ticksCoords[ticksLen - 1].coord - ticksCoords[0].coord) / crossLen;\n    each(ticksCoords, function (ticksItem) {\n      ticksItem.coord -= shift_1 / 2;\n      ticksItem.onBand = true;\n    });\n    var dataExtent = axis.scale.getExtent();\n    diffSize = 1 + dataExtent[1] - ticksCoords[ticksLen - 1].tickValue;\n    last = {\n      coord: ticksCoords[ticksLen - 1].coord + shift_1 * diffSize,\n      tickValue: dataExtent[1] + 1,\n      onBand: true\n    };\n    ticksCoords.push(last);\n  }\n  var inverse = axisExtent[0] > axisExtent[1];\n  // Handling clamp.\n  if (littleThan(ticksCoords[0].coord, axisExtent[0])) {\n    clamp ? ticksCoords[0].coord = axisExtent[0] : ticksCoords.shift();\n  }\n  if (clamp && littleThan(axisExtent[0], ticksCoords[0].coord)) {\n    ticksCoords.unshift({\n      coord: axisExtent[0],\n      onBand: true\n    });\n  }\n  if (littleThan(axisExtent[1], last.coord)) {\n    clamp ? last.coord = axisExtent[1] : ticksCoords.pop();\n  }\n  if (clamp && littleThan(last.coord, axisExtent[1])) {\n    ticksCoords.push({\n      coord: axisExtent[1],\n      onBand: true\n    });\n  }\n  function littleThan(a, b) {\n    // Avoid rounding error cause calculated tick coord different with extent.\n    // It may cause an extra unnecessary tick added.\n    a = round(a);\n    b = round(b);\n    return inverse ? a > b : a < b;\n  }\n}\nexport default Axis;","map":{"version":3,"names":["each","map","linearMap","getPixelPrecision","round","createAxisTicks","createAxisLabels","calculateCategoryInterval","AxisTickLabelComputingKind","createAxisLabelsComputingContext","NORMALIZED_EXTENT","Axis","dim","scale","extent","onBand","inverse","_extent","prototype","contain","coord","min","Math","max","containData","data","parse","getExtent","slice","dataExtent","setExtent","start","end","dataToCoord","clamp","normalize","type","fixExtentWithBands","count","coordToData","t","pointToData","point","getTicksCoords","opt","tickModel","getTickModel","result","breakTicks","pruneByBreak","ticks","ticksCoords","tickVal","getRawOrdinalNumber","tickValue","alignWithLabel","get","fixOnBandTicksCoords","getMinorTicksCoords","minorTickModel","model","getModel","splitNumber","minorTicks","getMinorTicks","minorTicksCoords","minorTicksGroup","minorTick","getViewLabels","ctx","determine","labels","getLabelModel","getBandWidth","axisExtent","len","size","abs","nTick","margin","axis","ticksLen","length","last","diffSize","crossLen","shift_1","ticksItem","push","littleThan","shift","unshift","pop","a","b"],"sources":["D:/Program Files/JetBrains/IDEAProject/springboot-vue-wms_test/vuedemo2/node_modules/echarts/lib/coord/Axis.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { each, map } from 'zrender/lib/core/util.js';\nimport { linearMap, getPixelPrecision, round } from '../util/number.js';\nimport { createAxisTicks, createAxisLabels, calculateCategoryInterval, AxisTickLabelComputingKind, createAxisLabelsComputingContext } from './axisTickLabelBuilder.js';\nvar NORMALIZED_EXTENT = [0, 1];\n/**\n * Base class of Axis.\n *\n * Lifetime: recreate for each main process.\n * [NOTICE]: Some caches is stored on the axis instance (see `axisTickLabelBuilder.ts`)\n *  which is based on this lifetime.\n */\nvar Axis = /** @class */function () {\n  function Axis(dim, scale, extent) {\n    this.onBand = false;\n    // Make sure that `extent[0] > extent[1]` only if `inverse: true`.\n    // `inverse` can be inferred by `extent` unless `extent[0] === extent[1]`.\n    this.inverse = false;\n    this.dim = dim;\n    this.scale = scale;\n    this._extent = extent || [0, 0];\n  }\n  /**\n   * If axis extent contain given coord\n   */\n  Axis.prototype.contain = function (coord) {\n    var extent = this._extent;\n    var min = Math.min(extent[0], extent[1]);\n    var max = Math.max(extent[0], extent[1]);\n    return coord >= min && coord <= max;\n  };\n  /**\n   * If axis extent contain given data\n   */\n  Axis.prototype.containData = function (data) {\n    return this.scale.contain(this.scale.parse(data));\n  };\n  /**\n   * Get coord extent.\n   */\n  Axis.prototype.getExtent = function () {\n    return this._extent.slice();\n  };\n  /**\n   * Get precision used for formatting\n   */\n  Axis.prototype.getPixelPrecision = function (dataExtent) {\n    return getPixelPrecision(dataExtent || this.scale.getExtent(), this._extent);\n  };\n  /**\n   * Set coord extent\n   */\n  Axis.prototype.setExtent = function (start, end) {\n    var extent = this._extent;\n    extent[0] = start;\n    extent[1] = end;\n  };\n  /**\n   * Convert data to coord. Data is the rank if it has an ordinal scale\n   */\n  Axis.prototype.dataToCoord = function (data, clamp) {\n    var extent = this._extent;\n    var scale = this.scale;\n    data = scale.normalize(scale.parse(data));\n    if (this.onBand && scale.type === 'ordinal') {\n      extent = extent.slice();\n      fixExtentWithBands(extent, scale.count());\n    }\n    return linearMap(data, NORMALIZED_EXTENT, extent, clamp);\n  };\n  /**\n   * Convert coord to data. Data is the rank if it has an ordinal scale\n   */\n  Axis.prototype.coordToData = function (coord, clamp) {\n    var extent = this._extent;\n    var scale = this.scale;\n    if (this.onBand && scale.type === 'ordinal') {\n      extent = extent.slice();\n      fixExtentWithBands(extent, scale.count());\n    }\n    var t = linearMap(coord, extent, NORMALIZED_EXTENT, clamp);\n    return this.scale.scale(t);\n  };\n  /**\n   * Convert pixel point to data in axis\n   */\n  Axis.prototype.pointToData = function (point, clamp) {\n    // Should be implemented in derived class if necessary.\n    return;\n  };\n  /**\n   * Different from `zrUtil.map(axis.getTicks(), axis.dataToCoord, axis)`,\n   * `axis.getTicksCoords` considers `onBand`, which is used by\n   * `boundaryGap:true` of category axis and splitLine and splitArea.\n   * @param opt.tickModel default: axis.model.getModel('axisTick')\n   * @param opt.clamp If `true`, the first and the last\n   *        tick must be at the axis end points. Otherwise, clip ticks\n   *        that outside the axis extent.\n   */\n  Axis.prototype.getTicksCoords = function (opt) {\n    opt = opt || {};\n    var tickModel = opt.tickModel || this.getTickModel();\n    var result = createAxisTicks(this, tickModel, {\n      breakTicks: opt.breakTicks,\n      pruneByBreak: opt.pruneByBreak\n    });\n    var ticks = result.ticks;\n    var ticksCoords = map(ticks, function (tickVal) {\n      return {\n        coord: this.dataToCoord(this.scale.type === 'ordinal' ? this.scale.getRawOrdinalNumber(tickVal) : tickVal),\n        tickValue: tickVal\n      };\n    }, this);\n    var alignWithLabel = tickModel.get('alignWithLabel');\n    fixOnBandTicksCoords(this, ticksCoords, alignWithLabel, opt.clamp);\n    return ticksCoords;\n  };\n  Axis.prototype.getMinorTicksCoords = function () {\n    if (this.scale.type === 'ordinal') {\n      // Category axis doesn't support minor ticks\n      return [];\n    }\n    var minorTickModel = this.model.getModel('minorTick');\n    var splitNumber = minorTickModel.get('splitNumber');\n    // Protection.\n    if (!(splitNumber > 0 && splitNumber < 100)) {\n      splitNumber = 5;\n    }\n    var minorTicks = this.scale.getMinorTicks(splitNumber);\n    var minorTicksCoords = map(minorTicks, function (minorTicksGroup) {\n      return map(minorTicksGroup, function (minorTick) {\n        return {\n          coord: this.dataToCoord(minorTick),\n          tickValue: minorTick\n        };\n      }, this);\n    }, this);\n    return minorTicksCoords;\n  };\n  Axis.prototype.getViewLabels = function (ctx) {\n    ctx = ctx || createAxisLabelsComputingContext(AxisTickLabelComputingKind.determine);\n    return createAxisLabels(this, ctx).labels;\n  };\n  Axis.prototype.getLabelModel = function () {\n    return this.model.getModel('axisLabel');\n  };\n  /**\n   * Notice here we only get the default tick model. For splitLine\n   * or splitArea, we should pass the splitLineModel or splitAreaModel\n   * manually when calling `getTicksCoords`.\n   * In GL, this method may be overridden to:\n   * `axisModel.getModel('axisTick', grid3DModel.getModel('axisTick'));`\n   */\n  Axis.prototype.getTickModel = function () {\n    return this.model.getModel('axisTick');\n  };\n  /**\n   * Get width of band\n   */\n  Axis.prototype.getBandWidth = function () {\n    var axisExtent = this._extent;\n    var dataExtent = this.scale.getExtent();\n    var len = dataExtent[1] - dataExtent[0] + (this.onBand ? 1 : 0);\n    // Fix #2728, avoid NaN when only one data.\n    len === 0 && (len = 1);\n    var size = Math.abs(axisExtent[1] - axisExtent[0]);\n    return Math.abs(size) / len;\n  };\n  /**\n   * Only be called in category axis.\n   * Can be overridden, consider other axes like in 3D.\n   * @return Auto interval for cateogry axis tick and label\n   */\n  Axis.prototype.calculateCategoryInterval = function (ctx) {\n    ctx = ctx || createAxisLabelsComputingContext(AxisTickLabelComputingKind.determine);\n    return calculateCategoryInterval(this, ctx);\n  };\n  return Axis;\n}();\nfunction fixExtentWithBands(extent, nTick) {\n  var size = extent[1] - extent[0];\n  var len = nTick;\n  var margin = size / len / 2;\n  extent[0] += margin;\n  extent[1] -= margin;\n}\n// If axis has labels [1, 2, 3, 4]. Bands on the axis are\n// |---1---|---2---|---3---|---4---|.\n// So the displayed ticks and splitLine/splitArea should between\n// each data item, otherwise cause misleading (e.g., split tow bars\n// of a single data item when there are two bar series).\n// Also consider if tickCategoryInterval > 0 and onBand, ticks and\n// splitLine/spliteArea should layout appropriately corresponding\n// to displayed labels. (So we should not use `getBandWidth` in this\n// case).\nfunction fixOnBandTicksCoords(axis, ticksCoords, alignWithLabel, clamp) {\n  var ticksLen = ticksCoords.length;\n  if (!axis.onBand || alignWithLabel || !ticksLen) {\n    return;\n  }\n  var axisExtent = axis.getExtent();\n  var last;\n  var diffSize;\n  if (ticksLen === 1) {\n    ticksCoords[0].coord = axisExtent[0];\n    ticksCoords[0].onBand = true;\n    last = ticksCoords[1] = {\n      coord: axisExtent[1],\n      tickValue: ticksCoords[0].tickValue,\n      onBand: true\n    };\n  } else {\n    var crossLen = ticksCoords[ticksLen - 1].tickValue - ticksCoords[0].tickValue;\n    var shift_1 = (ticksCoords[ticksLen - 1].coord - ticksCoords[0].coord) / crossLen;\n    each(ticksCoords, function (ticksItem) {\n      ticksItem.coord -= shift_1 / 2;\n      ticksItem.onBand = true;\n    });\n    var dataExtent = axis.scale.getExtent();\n    diffSize = 1 + dataExtent[1] - ticksCoords[ticksLen - 1].tickValue;\n    last = {\n      coord: ticksCoords[ticksLen - 1].coord + shift_1 * diffSize,\n      tickValue: dataExtent[1] + 1,\n      onBand: true\n    };\n    ticksCoords.push(last);\n  }\n  var inverse = axisExtent[0] > axisExtent[1];\n  // Handling clamp.\n  if (littleThan(ticksCoords[0].coord, axisExtent[0])) {\n    clamp ? ticksCoords[0].coord = axisExtent[0] : ticksCoords.shift();\n  }\n  if (clamp && littleThan(axisExtent[0], ticksCoords[0].coord)) {\n    ticksCoords.unshift({\n      coord: axisExtent[0],\n      onBand: true\n    });\n  }\n  if (littleThan(axisExtent[1], last.coord)) {\n    clamp ? last.coord = axisExtent[1] : ticksCoords.pop();\n  }\n  if (clamp && littleThan(last.coord, axisExtent[1])) {\n    ticksCoords.push({\n      coord: axisExtent[1],\n      onBand: true\n    });\n  }\n  function littleThan(a, b) {\n    // Avoid rounding error cause calculated tick coord different with extent.\n    // It may cause an extra unnecessary tick added.\n    a = round(a);\n    b = round(b);\n    return inverse ? a > b : a < b;\n  }\n}\nexport default Axis;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}