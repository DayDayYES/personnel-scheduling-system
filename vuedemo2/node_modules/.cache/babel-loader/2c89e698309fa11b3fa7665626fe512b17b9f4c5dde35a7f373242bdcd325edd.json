{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport * as echarts from 'echarts';\nexport default {\n  name: 'GanttChart',\n  props: {\n    scheduleData: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    viewMode: {\n      type: String,\n      default: 'workpoint',\n      validator: value => ['process', 'workpoint', 'team'].includes(value)\n    },\n    makespan: {\n      type: Number,\n      required: true\n    }\n  },\n  data() {\n    return {\n      chartInstance: null,\n      isLoading: false,\n      // 团队颜色映射（与Python的TEAM_COLORS保持一致）\n      teamColors: {\n        'team1': '#FF6B6B',\n        'team2': '#4ECDC4',\n        'team3': '#45B7D1',\n        'team4': '#FFA07A',\n        'team5': '#98D8C8',\n        'team6': '#F7DC6F'\n      },\n      // 团队中文名称\n      teamNames: {\n        'team1': '架子班组',\n        'team2': '保温班组',\n        'team3': '检验班组',\n        'team4': '射线班组',\n        'team5': '维修班组',\n        'team6': '返修班组'\n      }\n    };\n  },\n  mounted() {\n    this.initChart();\n    window.addEventListener('resize', this.handleResize);\n  },\n  beforeDestroy() {\n    if (this.chartInstance) {\n      this.chartInstance.dispose();\n      this.chartInstance = null;\n    }\n    window.removeEventListener('resize', this.handleResize);\n  },\n  watch: {\n    scheduleData: {\n      handler() {\n        this.updateChart();\n      },\n      deep: true\n    },\n    viewMode() {\n      this.updateChart();\n    }\n  },\n  methods: {\n    /**\r\n     * 初始化ECharts实例\r\n     */\n    initChart() {\n      if (!this.$refs.chartContainer) return;\n      this.chartInstance = echarts.init(this.$refs.chartContainer);\n\n      // 绑定点击事件\n      this.chartInstance.on('click', params => {\n        if (params.componentType === 'series' && params.data) {\n          const taskInfo = params.data[3]; // 获取任务详情\n          this.$emit('task-click', taskInfo);\n        }\n      });\n      this.updateChart();\n    },\n    /**\r\n     * 更新图表\r\n     */\n    updateChart() {\n      if (!this.chartInstance || !this.scheduleData || this.scheduleData.length === 0) {\n        return;\n      }\n      this.isLoading = true;\n      try {\n        // 根据视角准备数据\n        let viewData;\n        switch (this.viewMode) {\n          case 'workpoint':\n            viewData = this.prepareWorkpointView(this.scheduleData);\n            break;\n          case 'team':\n            viewData = this.prepareTeamView(this.scheduleData);\n            break;\n          case 'process':\n            viewData = this.prepareProcessView(this.scheduleData);\n            break;\n          default:\n            viewData = this.prepareWorkpointView(this.scheduleData);\n        }\n\n        // 生成图表配置\n        const option = this.generateChartOption(viewData);\n\n        // 应用配置\n        this.chartInstance.setOption(option, true);\n      } catch (error) {\n        console.error('更新图表失败:', error);\n        this.$message.error('图表渲染失败，请检查数据格式');\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    /**\r\n     * 时间单位转日期\r\n     * @param {Number} timeUnit - 时间单位（每10单位 = 1天）\r\n     * @return {Date}\r\n     */\n    timeUnitToDate(timeUnit) {\n      const baseDate = new Date('2024-01-01');\n      const days = timeUnit / 10; // 每10单位 = 1天\n      baseDate.setDate(baseDate.getDate() + days);\n      return baseDate;\n    },\n    /**\r\n     * 日期格式化\r\n     * @param {Date} date\r\n     * @return {String} YYYY-MM-DD格式\r\n     */\n    formatDate(date) {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      return `${year}-${month}-${day}`;\n    },\n    /**\r\n     * 时间单位转显示字符串（用于提示框）\r\n     * @param {Number} timeUnit\r\n     * @return {String}\r\n     */\n    formatTimeUnit(timeUnit) {\n      const date = this.timeUnitToDate(timeUnit);\n      return date.toLocaleDateString('zh-CN', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    /**\r\n     * 检测并行任务并分配层级\r\n     * @param {Array} tasks - 任务列表\r\n     * @return {Array} 带层级信息的任务列表\r\n     */\n    detectParallelTasks(tasks) {\n      if (!tasks || tasks.length === 0) return [];\n\n      // 按开始时间排序\n      const sorted = [...tasks].sort((a, b) => a.start - b.start);\n\n      // 分配层级\n      const layers = []; // 每层的结束时间\n      const result = [];\n      sorted.forEach(task => {\n        // 找到第一个可用层（该层的最后任务已结束）\n        let layerIndex = layers.findIndex(endTime => task.start >= endTime);\n        if (layerIndex === -1) {\n          // 需要新层\n          layerIndex = layers.length;\n          layers.push(task.end);\n        } else {\n          // 更新该层结束时间\n          layers[layerIndex] = task.end;\n        }\n        result.push({\n          ...task,\n          layer: layerIndex,\n          totalLayers: 0 // 稍后更新\n        });\n      });\n\n      // 更新totalLayers\n      const maxLayer = Math.max(...result.map(t => t.layer));\n      result.forEach(t => t.totalLayers = maxLayer + 1);\n      return result;\n    },\n    /**\r\n     * 准备设备视角数据\r\n     */\n    prepareWorkpointView(schedule) {\n      // 按设备分组\n      const grouped = {};\n      schedule.forEach(task => {\n        const wpId = task.workpoint_id || 'unknown';\n        if (!grouped[wpId]) {\n          grouped[wpId] = {\n            name: task.workpoint_name || wpId,\n            tasks: []\n          };\n        }\n        grouped[wpId].tasks.push(task);\n      });\n      const yCategories = [];\n      const seriesData = [];\n      let yIndex = 0;\n\n      // 按设备ID排序\n      const sortedWpIds = Object.keys(grouped).sort();\n      sortedWpIds.forEach(wpId => {\n        const wpData = grouped[wpId];\n        const wpName = wpData.name;\n        const tasks = wpData.tasks;\n\n        // 检测并行任务\n        const layeredTasks = this.detectParallelTasks(tasks);\n        const maxLayers = layeredTasks.length > 0 ? Math.max(...layeredTasks.map(t => t.totalLayers)) : 1;\n\n        // 为每一层创建Y轴分类（但只显示设备名）\n        for (let layer = 0; layer < maxLayers; layer++) {\n          yCategories.push(wpName); // 只显示设备名，不显示层级\n        }\n\n        // 准备series数据\n        layeredTasks.forEach(task => {\n          const taskYIndex = yIndex + task.layer;\n          const startDate = this.timeUnitToDate(task.start);\n          const endDate = this.timeUnitToDate(task.end);\n          seriesData.push([taskYIndex, startDate, endDate, task // 任务详情\n          ]);\n        });\n        yIndex += maxLayers;\n      });\n      return {\n        yCategories,\n        seriesData\n      };\n    },\n    /**\r\n     * 准备团队视角数据\r\n     */\n    prepareTeamView(schedule) {\n      // 按团队分组\n      const grouped = {};\n      schedule.forEach(task => {\n        const team = task.team || 'unknown';\n        if (!grouped[team]) {\n          grouped[team] = [];\n        }\n        grouped[team].push(task);\n      });\n      const yCategories = [];\n      const seriesData = [];\n      let yIndex = 0;\n\n      // 按团队ID排序\n      const sortedTeams = Object.keys(grouped).sort();\n      sortedTeams.forEach(team => {\n        const tasks = grouped[team];\n        const teamName = this.teamNames[team] || team;\n\n        // 检测并行任务\n        const layeredTasks = this.detectParallelTasks(tasks);\n        const maxLayers = layeredTasks.length > 0 ? Math.max(...layeredTasks.map(t => t.totalLayers)) : 1;\n\n        // 为每一层创建Y轴分类（但只显示团队名）\n        for (let layer = 0; layer < maxLayers; layer++) {\n          yCategories.push(teamName); // 只显示团队名\n        }\n\n        // 准备series数据\n        layeredTasks.forEach(task => {\n          const taskYIndex = yIndex + task.layer;\n          const startDate = this.timeUnitToDate(task.start);\n          const endDate = this.timeUnitToDate(task.end);\n          seriesData.push([taskYIndex, startDate, endDate, task]);\n        });\n        yIndex += maxLayers;\n      });\n      return {\n        yCategories,\n        seriesData\n      };\n    },\n    /**\r\n     * 准备工序视角数据\r\n     */\n    prepareProcessView(schedule) {\n      // 按开始时间排序\n      const sorted = [...schedule].sort((a, b) => a.start - b.start);\n      const yCategories = sorted.map(task => task.name);\n      const seriesData = sorted.map((task, index) => {\n        const startDate = this.timeUnitToDate(task.start);\n        const endDate = this.timeUnitToDate(task.end);\n        return [index, startDate, endDate, task];\n      });\n      return {\n        yCategories,\n        seriesData\n      };\n    },\n    /**\r\n     * 生成ECharts配置\r\n     */\n    generateChartOption(viewData) {\n      const {\n        yCategories,\n        seriesData\n      } = viewData;\n\n      // 计算时间范围\n      const minDate = this.timeUnitToDate(0);\n      const maxDate = this.timeUnitToDate(this.makespan * 1.05); // 稍微扩展5%\n\n      // 获取视角标题\n      const titles = {\n        'workpoint': '设备视角甘特图',\n        'team': '团队视角甘特图',\n        'process': '工序视角甘特图'\n      };\n      return {\n        title: {\n          text: `${titles[this.viewMode]} (完工时间: ${this.makespan.toFixed(2)}小时)`,\n          left: 'center',\n          top: 10,\n          textStyle: {\n            fontSize: 18,\n            fontWeight: 'bold'\n          }\n        },\n        tooltip: {\n          trigger: 'item',\n          formatter: params => {\n            if (!params.data || !params.data[3]) return '';\n            const task = params.data[3];\n            const teamName = this.teamNames[task.team] || task.team;\n            const duration = (task.end - task.start).toFixed(2);\n            return `\n              <div style=\"padding: 8px;\">\n                <strong style=\"font-size: 14px;\">${task.name}</strong><br/>\n                <hr style=\"margin: 5px 0; border: none; border-top: 1px solid #ddd;\"/>\n                <div style=\"margin: 5px 0;\">\n                  <span style=\"color: #666;\">开始时间：</span>\n                  <strong>${this.formatTimeUnit(task.start)}</strong>\n                </div>\n                <div style=\"margin: 5px 0;\">\n                  <span style=\"color: #666;\">结束时间：</span>\n                  <strong>${this.formatTimeUnit(task.end)}</strong>\n                </div>\n                <div style=\"margin: 5px 0;\">\n                  <span style=\"color: #666;\">持续时间：</span>\n                  <strong>${duration}小时</strong>\n                </div>\n                <div style=\"margin: 5px 0;\">\n                  <span style=\"color: #666;\">团队：</span>\n                  <strong>${teamName}</strong>\n                </div>\n                <div style=\"margin: 5px 0;\">\n                  <span style=\"color: #666;\">工人数：</span>\n                  <strong>${task.workers}人</strong>\n                </div>\n              </div>\n            `;\n          },\n          backgroundColor: 'rgba(255, 255, 255, 0.95)',\n          borderColor: '#ddd',\n          borderWidth: 1,\n          textStyle: {\n            color: '#333'\n          }\n        },\n        grid: {\n          left: '15%',\n          right: '5%',\n          top: '15%',\n          bottom: '20%'\n        },\n        xAxis: {\n          type: 'time',\n          min: minDate,\n          max: maxDate,\n          axisLabel: {\n            formatter: '{yyyy}-{MM}-{dd}',\n            fontSize: 11\n          },\n          splitLine: {\n            show: true,\n            lineStyle: {\n              type: 'dashed',\n              color: '#e0e0e0'\n            }\n          }\n        },\n        yAxis: {\n          type: 'category',\n          data: yCategories,\n          inverse: false,\n          axisLabel: {\n            fontSize: 12,\n            color: '#333'\n          },\n          axisTick: {\n            show: false\n          },\n          axisLine: {\n            show: true\n          },\n          splitLine: {\n            show: true,\n            lineStyle: {\n              type: 'solid',\n              color: '#f0f0f0'\n            }\n          }\n        },\n        dataZoom: [{\n          type: 'slider',\n          xAxisIndex: 0,\n          start: 0,\n          end: 100,\n          height: 20,\n          bottom: 10,\n          handleStyle: {\n            color: '#667eea'\n          },\n          dataBackground: {\n            areaStyle: {\n              color: '#e9ecef'\n            }\n          }\n        }, {\n          type: 'inside',\n          xAxisIndex: 0,\n          zoomOnMouseWheel: true,\n          moveOnMouseMove: true\n        }],\n        series: [{\n          type: 'custom',\n          renderItem: (params, api) => this.renderGanttItem(params, api),\n          encode: {\n            x: [1, 2],\n            y: 0\n          },\n          data: seriesData\n        }]\n      };\n    },\n    /**\r\n     * 自定义渲染甘特图条形\r\n     */\n    renderGanttItem(params, api) {\n      const categoryIndex = api.value(0);\n      const startTime = api.value(1);\n      const endTime = api.value(2);\n      const taskInfo = api.value(3);\n      const start = api.coord([startTime, categoryIndex]);\n      const end = api.coord([endTime, categoryIndex]);\n      const height = api.size([0, 1])[1] * 0.65;\n      const rectShape = echarts.graphic.clipRectByRect({\n        x: start[0],\n        y: start[1] - height / 2,\n        width: end[0] - start[0],\n        height: height\n      }, {\n        x: params.coordSys.x,\n        y: params.coordSys.y,\n        width: params.coordSys.width,\n        height: params.coordSys.height\n      });\n      return rectShape && {\n        type: 'rect',\n        transition: ['shape'],\n        shape: rectShape,\n        style: {\n          fill: this.teamColors[taskInfo.team] || '#cccccc',\n          stroke: '#333',\n          lineWidth: 1\n        },\n        emphasis: {\n          style: {\n            fill: this.adjustColor(this.teamColors[taskInfo.team], 20),\n            shadowBlur: 10,\n            shadowColor: 'rgba(0, 0, 0, 0.3)'\n          }\n        }\n      };\n    },\n    /**\r\n     * 调整颜色亮度\r\n     */\n    adjustColor(color, amount) {\n      if (!color) return '#cccccc';\n      const num = parseInt(color.replace('#', ''), 16);\n      const r = Math.min(255, Math.max(0, (num >> 16) + amount));\n      const g = Math.min(255, Math.max(0, (num >> 8 & 0x00FF) + amount));\n      const b = Math.min(255, Math.max(0, (num & 0x0000FF) + amount));\n      return '#' + (r << 16 | g << 8 | b).toString(16).padStart(6, '0');\n    },\n    /**\r\n     * 窗口大小调整\r\n     */\n    handleResize() {\n      if (this.chartInstance) {\n        this.chartInstance.resize();\n      }\n    }\n  }\n};","map":{"version":3,"names":["echarts","name","props","scheduleData","type","Array","required","default","viewMode","String","validator","value","includes","makespan","Number","data","chartInstance","isLoading","teamColors","teamNames","mounted","initChart","window","addEventListener","handleResize","beforeDestroy","dispose","removeEventListener","watch","handler","updateChart","deep","methods","$refs","chartContainer","init","on","params","componentType","taskInfo","$emit","length","viewData","prepareWorkpointView","prepareTeamView","prepareProcessView","option","generateChartOption","setOption","error","console","$message","timeUnitToDate","timeUnit","baseDate","Date","days","setDate","getDate","formatDate","date","year","getFullYear","month","getMonth","padStart","day","formatTimeUnit","toLocaleDateString","hour","minute","detectParallelTasks","tasks","sorted","sort","a","b","start","layers","result","forEach","task","layerIndex","findIndex","endTime","push","end","layer","totalLayers","maxLayer","Math","max","map","t","schedule","grouped","wpId","workpoint_id","workpoint_name","yCategories","seriesData","yIndex","sortedWpIds","Object","keys","wpData","wpName","layeredTasks","maxLayers","taskYIndex","startDate","endDate","team","sortedTeams","teamName","index","minDate","maxDate","titles","title","text","toFixed","left","top","textStyle","fontSize","fontWeight","tooltip","trigger","formatter","duration","workers","backgroundColor","borderColor","borderWidth","color","grid","right","bottom","xAxis","min","axisLabel","splitLine","show","lineStyle","yAxis","inverse","axisTick","axisLine","dataZoom","xAxisIndex","height","handleStyle","dataBackground","areaStyle","zoomOnMouseWheel","moveOnMouseMove","series","renderItem","api","renderGanttItem","encode","x","y","categoryIndex","startTime","coord","size","rectShape","graphic","clipRectByRect","width","coordSys","transition","shape","style","fill","stroke","lineWidth","emphasis","adjustColor","shadowBlur","shadowColor","amount","num","parseInt","replace","r","g","toString","resize"],"sources":["src/components/user/GanttChart.vue"],"sourcesContent":["<template>\r\n  <div class=\"gantt-container\">\r\n    <!-- 加载提示 -->\r\n    <div v-if=\"isLoading\" class=\"chart-loading\">\r\n      <el-icon class=\"is-loading\">\r\n        <i class=\"el-icon-loading\"></i>\r\n      </el-icon>\r\n      <span>加载甘特图中...</span>\r\n    </div>\r\n    \r\n    <!-- ECharts容器 -->\r\n    <div ref=\"chartContainer\" class=\"echarts-chart\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\n\r\nexport default {\r\n  name: 'GanttChart',\r\n  props: {\r\n    scheduleData: {\r\n      type: Array,\r\n      required: true,\r\n      default: () => []\r\n    },\r\n    viewMode: {\r\n      type: String,\r\n      default: 'workpoint',\r\n      validator: (value) => ['process', 'workpoint', 'team'].includes(value)\r\n    },\r\n    makespan: {\r\n      type: Number,\r\n      required: true\r\n    }\r\n  },\r\n  data() {\r\n    return {\r\n      chartInstance: null,\r\n      isLoading: false,\r\n      // 团队颜色映射（与Python的TEAM_COLORS保持一致）\r\n      teamColors: {\r\n        'team1': '#FF6B6B',\r\n        'team2': '#4ECDC4',\r\n        'team3': '#45B7D1',\r\n        'team4': '#FFA07A',\r\n        'team5': '#98D8C8',\r\n        'team6': '#F7DC6F'\r\n      },\r\n      // 团队中文名称\r\n      teamNames: {\r\n        'team1': '架子班组',\r\n        'team2': '保温班组',\r\n        'team3': '检验班组',\r\n        'team4': '射线班组',\r\n        'team5': '维修班组',\r\n        'team6': '返修班组'\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    this.initChart();\r\n    window.addEventListener('resize', this.handleResize);\r\n  },\r\n  beforeDestroy() {\r\n    if (this.chartInstance) {\r\n      this.chartInstance.dispose();\r\n      this.chartInstance = null;\r\n    }\r\n    window.removeEventListener('resize', this.handleResize);\r\n  },\r\n  watch: {\r\n    scheduleData: {\r\n      handler() {\r\n        this.updateChart();\r\n      },\r\n      deep: true\r\n    },\r\n    viewMode() {\r\n      this.updateChart();\r\n    }\r\n  },\r\n  methods: {\r\n    /**\r\n     * 初始化ECharts实例\r\n     */\r\n    initChart() {\r\n      if (!this.$refs.chartContainer) return;\r\n      \r\n      this.chartInstance = echarts.init(this.$refs.chartContainer);\r\n      \r\n      // 绑定点击事件\r\n      this.chartInstance.on('click', (params) => {\r\n        if (params.componentType === 'series' && params.data) {\r\n          const taskInfo = params.data[3]; // 获取任务详情\r\n          this.$emit('task-click', taskInfo);\r\n        }\r\n      });\r\n      \r\n      this.updateChart();\r\n    },\r\n    \r\n    /**\r\n     * 更新图表\r\n     */\r\n    updateChart() {\r\n      if (!this.chartInstance || !this.scheduleData || this.scheduleData.length === 0) {\r\n        return;\r\n      }\r\n      \r\n      this.isLoading = true;\r\n      \r\n      try {\r\n        // 根据视角准备数据\r\n        let viewData;\r\n        switch (this.viewMode) {\r\n          case 'workpoint':\r\n            viewData = this.prepareWorkpointView(this.scheduleData);\r\n            break;\r\n          case 'team':\r\n            viewData = this.prepareTeamView(this.scheduleData);\r\n            break;\r\n          case 'process':\r\n            viewData = this.prepareProcessView(this.scheduleData);\r\n            break;\r\n          default:\r\n            viewData = this.prepareWorkpointView(this.scheduleData);\r\n        }\r\n        \r\n        // 生成图表配置\r\n        const option = this.generateChartOption(viewData);\r\n        \r\n        // 应用配置\r\n        this.chartInstance.setOption(option, true);\r\n      } catch (error) {\r\n        console.error('更新图表失败:', error);\r\n        this.$message.error('图表渲染失败，请检查数据格式');\r\n      } finally {\r\n        this.isLoading = false;\r\n      }\r\n    },\r\n    \r\n    /**\r\n     * 时间单位转日期\r\n     * @param {Number} timeUnit - 时间单位（每10单位 = 1天）\r\n     * @return {Date}\r\n     */\r\n    timeUnitToDate(timeUnit) {\r\n      const baseDate = new Date('2024-01-01');\r\n      const days = timeUnit / 10; // 每10单位 = 1天\r\n      baseDate.setDate(baseDate.getDate() + days);\r\n      return baseDate;\r\n    },\r\n    \r\n    /**\r\n     * 日期格式化\r\n     * @param {Date} date\r\n     * @return {String} YYYY-MM-DD格式\r\n     */\r\n    formatDate(date) {\r\n      const year = date.getFullYear();\r\n      const month = String(date.getMonth() + 1).padStart(2, '0');\r\n      const day = String(date.getDate()).padStart(2, '0');\r\n      return `${year}-${month}-${day}`;\r\n    },\r\n    \r\n    /**\r\n     * 时间单位转显示字符串（用于提示框）\r\n     * @param {Number} timeUnit\r\n     * @return {String}\r\n     */\r\n    formatTimeUnit(timeUnit) {\r\n      const date = this.timeUnitToDate(timeUnit);\r\n      return date.toLocaleDateString('zh-CN', {\r\n        year: 'numeric',\r\n        month: 'long',\r\n        day: 'numeric',\r\n        hour: '2-digit',\r\n        minute: '2-digit'\r\n      });\r\n    },\r\n    \r\n    /**\r\n     * 检测并行任务并分配层级\r\n     * @param {Array} tasks - 任务列表\r\n     * @return {Array} 带层级信息的任务列表\r\n     */\r\n    detectParallelTasks(tasks) {\r\n      if (!tasks || tasks.length === 0) return [];\r\n      \r\n      // 按开始时间排序\r\n      const sorted = [...tasks].sort((a, b) => a.start - b.start);\r\n      \r\n      // 分配层级\r\n      const layers = []; // 每层的结束时间\r\n      const result = [];\r\n      \r\n      sorted.forEach(task => {\r\n        // 找到第一个可用层（该层的最后任务已结束）\r\n        let layerIndex = layers.findIndex(endTime => task.start >= endTime);\r\n        \r\n        if (layerIndex === -1) {\r\n          // 需要新层\r\n          layerIndex = layers.length;\r\n          layers.push(task.end);\r\n        } else {\r\n          // 更新该层结束时间\r\n          layers[layerIndex] = task.end;\r\n        }\r\n        \r\n        result.push({\r\n          ...task,\r\n          layer: layerIndex,\r\n          totalLayers: 0 // 稍后更新\r\n        });\r\n      });\r\n      \r\n      // 更新totalLayers\r\n      const maxLayer = Math.max(...result.map(t => t.layer));\r\n      result.forEach(t => t.totalLayers = maxLayer + 1);\r\n      \r\n      return result;\r\n    },\r\n    \r\n    /**\r\n     * 准备设备视角数据\r\n     */\r\n    prepareWorkpointView(schedule) {\r\n      // 按设备分组\r\n      const grouped = {};\r\n      schedule.forEach(task => {\r\n        const wpId = task.workpoint_id || 'unknown';\r\n        if (!grouped[wpId]) {\r\n          grouped[wpId] = {\r\n            name: task.workpoint_name || wpId,\r\n            tasks: []\r\n          };\r\n        }\r\n        grouped[wpId].tasks.push(task);\r\n      });\r\n      \r\n      const yCategories = [];\r\n      const seriesData = [];\r\n      let yIndex = 0;\r\n      \r\n      // 按设备ID排序\r\n      const sortedWpIds = Object.keys(grouped).sort();\r\n      \r\n      sortedWpIds.forEach(wpId => {\r\n        const wpData = grouped[wpId];\r\n        const wpName = wpData.name;\r\n        const tasks = wpData.tasks;\r\n        \r\n        // 检测并行任务\r\n        const layeredTasks = this.detectParallelTasks(tasks);\r\n        const maxLayers = layeredTasks.length > 0 ? \r\n          Math.max(...layeredTasks.map(t => t.totalLayers)) : 1;\r\n        \r\n        // 为每一层创建Y轴分类（但只显示设备名）\r\n        for (let layer = 0; layer < maxLayers; layer++) {\r\n          yCategories.push(wpName); // 只显示设备名，不显示层级\r\n        }\r\n        \r\n        // 准备series数据\r\n        layeredTasks.forEach(task => {\r\n          const taskYIndex = yIndex + task.layer;\r\n          const startDate = this.timeUnitToDate(task.start);\r\n          const endDate = this.timeUnitToDate(task.end);\r\n          \r\n          seriesData.push([\r\n            taskYIndex,\r\n            startDate,\r\n            endDate,\r\n            task // 任务详情\r\n          ]);\r\n        });\r\n        \r\n        yIndex += maxLayers;\r\n      });\r\n      \r\n      return { yCategories, seriesData };\r\n    },\r\n    \r\n    /**\r\n     * 准备团队视角数据\r\n     */\r\n    prepareTeamView(schedule) {\r\n      // 按团队分组\r\n      const grouped = {};\r\n      schedule.forEach(task => {\r\n        const team = task.team || 'unknown';\r\n        if (!grouped[team]) {\r\n          grouped[team] = [];\r\n        }\r\n        grouped[team].push(task);\r\n      });\r\n      \r\n      const yCategories = [];\r\n      const seriesData = [];\r\n      let yIndex = 0;\r\n      \r\n      // 按团队ID排序\r\n      const sortedTeams = Object.keys(grouped).sort();\r\n      \r\n      sortedTeams.forEach(team => {\r\n        const tasks = grouped[team];\r\n        const teamName = this.teamNames[team] || team;\r\n        \r\n        // 检测并行任务\r\n        const layeredTasks = this.detectParallelTasks(tasks);\r\n        const maxLayers = layeredTasks.length > 0 ? \r\n          Math.max(...layeredTasks.map(t => t.totalLayers)) : 1;\r\n        \r\n        // 为每一层创建Y轴分类（但只显示团队名）\r\n        for (let layer = 0; layer < maxLayers; layer++) {\r\n          yCategories.push(teamName); // 只显示团队名\r\n        }\r\n        \r\n        // 准备series数据\r\n        layeredTasks.forEach(task => {\r\n          const taskYIndex = yIndex + task.layer;\r\n          const startDate = this.timeUnitToDate(task.start);\r\n          const endDate = this.timeUnitToDate(task.end);\r\n          \r\n          seriesData.push([\r\n            taskYIndex,\r\n            startDate,\r\n            endDate,\r\n            task\r\n          ]);\r\n        });\r\n        \r\n        yIndex += maxLayers;\r\n      });\r\n      \r\n      return { yCategories, seriesData };\r\n    },\r\n    \r\n    /**\r\n     * 准备工序视角数据\r\n     */\r\n    prepareProcessView(schedule) {\r\n      // 按开始时间排序\r\n      const sorted = [...schedule].sort((a, b) => a.start - b.start);\r\n      \r\n      const yCategories = sorted.map(task => task.name);\r\n      const seriesData = sorted.map((task, index) => {\r\n        const startDate = this.timeUnitToDate(task.start);\r\n        const endDate = this.timeUnitToDate(task.end);\r\n        \r\n        return [\r\n          index,\r\n          startDate,\r\n          endDate,\r\n          task\r\n        ];\r\n      });\r\n      \r\n      return { yCategories, seriesData };\r\n    },\r\n    \r\n    /**\r\n     * 生成ECharts配置\r\n     */\r\n    generateChartOption(viewData) {\r\n      const { yCategories, seriesData } = viewData;\r\n      \r\n      // 计算时间范围\r\n      const minDate = this.timeUnitToDate(0);\r\n      const maxDate = this.timeUnitToDate(this.makespan * 1.05); // 稍微扩展5%\r\n      \r\n      // 获取视角标题\r\n      const titles = {\r\n        'workpoint': '设备视角甘特图',\r\n        'team': '团队视角甘特图',\r\n        'process': '工序视角甘特图'\r\n      };\r\n      \r\n      return {\r\n        title: {\r\n          text: `${titles[this.viewMode]} (完工时间: ${this.makespan.toFixed(2)}小时)`,\r\n          left: 'center',\r\n          top: 10,\r\n          textStyle: {\r\n            fontSize: 18,\r\n            fontWeight: 'bold'\r\n          }\r\n        },\r\n        \r\n        tooltip: {\r\n          trigger: 'item',\r\n          formatter: (params) => {\r\n            if (!params.data || !params.data[3]) return '';\r\n            \r\n            const task = params.data[3];\r\n            const teamName = this.teamNames[task.team] || task.team;\r\n            const duration = (task.end - task.start).toFixed(2);\r\n            \r\n            return `\r\n              <div style=\"padding: 8px;\">\r\n                <strong style=\"font-size: 14px;\">${task.name}</strong><br/>\r\n                <hr style=\"margin: 5px 0; border: none; border-top: 1px solid #ddd;\"/>\r\n                <div style=\"margin: 5px 0;\">\r\n                  <span style=\"color: #666;\">开始时间：</span>\r\n                  <strong>${this.formatTimeUnit(task.start)}</strong>\r\n                </div>\r\n                <div style=\"margin: 5px 0;\">\r\n                  <span style=\"color: #666;\">结束时间：</span>\r\n                  <strong>${this.formatTimeUnit(task.end)}</strong>\r\n                </div>\r\n                <div style=\"margin: 5px 0;\">\r\n                  <span style=\"color: #666;\">持续时间：</span>\r\n                  <strong>${duration}小时</strong>\r\n                </div>\r\n                <div style=\"margin: 5px 0;\">\r\n                  <span style=\"color: #666;\">团队：</span>\r\n                  <strong>${teamName}</strong>\r\n                </div>\r\n                <div style=\"margin: 5px 0;\">\r\n                  <span style=\"color: #666;\">工人数：</span>\r\n                  <strong>${task.workers}人</strong>\r\n                </div>\r\n              </div>\r\n            `;\r\n          },\r\n          backgroundColor: 'rgba(255, 255, 255, 0.95)',\r\n          borderColor: '#ddd',\r\n          borderWidth: 1,\r\n          textStyle: {\r\n            color: '#333'\r\n          }\r\n        },\r\n        \r\n        grid: {\r\n          left: '15%',\r\n          right: '5%',\r\n          top: '15%',\r\n          bottom: '20%'\r\n        },\r\n        \r\n        xAxis: {\r\n          type: 'time',\r\n          min: minDate,\r\n          max: maxDate,\r\n          axisLabel: {\r\n            formatter: '{yyyy}-{MM}-{dd}',\r\n            fontSize: 11\r\n          },\r\n          splitLine: {\r\n            show: true,\r\n            lineStyle: {\r\n              type: 'dashed',\r\n              color: '#e0e0e0'\r\n            }\r\n          }\r\n        },\r\n        \r\n        yAxis: {\r\n          type: 'category',\r\n          data: yCategories,\r\n          inverse: false,\r\n          axisLabel: {\r\n            fontSize: 12,\r\n            color: '#333'\r\n          },\r\n          axisTick: {\r\n            show: false\r\n          },\r\n          axisLine: {\r\n            show: true\r\n          },\r\n          splitLine: {\r\n            show: true,\r\n            lineStyle: {\r\n              type: 'solid',\r\n              color: '#f0f0f0'\r\n            }\r\n          }\r\n        },\r\n        \r\n        dataZoom: [\r\n          {\r\n            type: 'slider',\r\n            xAxisIndex: 0,\r\n            start: 0,\r\n            end: 100,\r\n            height: 20,\r\n            bottom: 10,\r\n            handleStyle: {\r\n              color: '#667eea'\r\n            },\r\n            dataBackground: {\r\n              areaStyle: {\r\n                color: '#e9ecef'\r\n              }\r\n            }\r\n          },\r\n          {\r\n            type: 'inside',\r\n            xAxisIndex: 0,\r\n            zoomOnMouseWheel: true,\r\n            moveOnMouseMove: true\r\n          }\r\n        ],\r\n        \r\n        series: [{\r\n          type: 'custom',\r\n          renderItem: (params, api) => this.renderGanttItem(params, api),\r\n          encode: {\r\n            x: [1, 2],\r\n            y: 0\r\n          },\r\n          data: seriesData\r\n        }]\r\n      };\r\n    },\r\n    \r\n    /**\r\n     * 自定义渲染甘特图条形\r\n     */\r\n    renderGanttItem(params, api) {\r\n      const categoryIndex = api.value(0);\r\n      const startTime = api.value(1);\r\n      const endTime = api.value(2);\r\n      const taskInfo = api.value(3);\r\n      \r\n      const start = api.coord([startTime, categoryIndex]);\r\n      const end = api.coord([endTime, categoryIndex]);\r\n      const height = api.size([0, 1])[1] * 0.65;\r\n      \r\n      const rectShape = echarts.graphic.clipRectByRect(\r\n        {\r\n          x: start[0],\r\n          y: start[1] - height / 2,\r\n          width: end[0] - start[0],\r\n          height: height\r\n        },\r\n        {\r\n          x: params.coordSys.x,\r\n          y: params.coordSys.y,\r\n          width: params.coordSys.width,\r\n          height: params.coordSys.height\r\n        }\r\n      );\r\n      \r\n      return rectShape && {\r\n        type: 'rect',\r\n        transition: ['shape'],\r\n        shape: rectShape,\r\n        style: {\r\n          fill: this.teamColors[taskInfo.team] || '#cccccc',\r\n          stroke: '#333',\r\n          lineWidth: 1\r\n        },\r\n        emphasis: {\r\n          style: {\r\n            fill: this.adjustColor(this.teamColors[taskInfo.team], 20),\r\n            shadowBlur: 10,\r\n            shadowColor: 'rgba(0, 0, 0, 0.3)'\r\n          }\r\n        }\r\n      };\r\n    },\r\n    \r\n    /**\r\n     * 调整颜色亮度\r\n     */\r\n    adjustColor(color, amount) {\r\n      if (!color) return '#cccccc';\r\n      \r\n      const num = parseInt(color.replace('#', ''), 16);\r\n      const r = Math.min(255, Math.max(0, (num >> 16) + amount));\r\n      const g = Math.min(255, Math.max(0, ((num >> 8) & 0x00FF) + amount));\r\n      const b = Math.min(255, Math.max(0, (num & 0x0000FF) + amount));\r\n      \r\n      return '#' + ((r << 16) | (g << 8) | b).toString(16).padStart(6, '0');\r\n    },\r\n    \r\n    /**\r\n     * 窗口大小调整\r\n     */\r\n    handleResize() {\r\n      if (this.chartInstance) {\r\n        this.chartInstance.resize();\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.gantt-container {\r\n  width: 100%;\r\n  height: 600px;\r\n  position: relative;\r\n  background: #fff;\r\n  border-radius: 8px;\r\n}\r\n\r\n.echarts-chart {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n.chart-loading {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 10px;\r\n  color: #667eea;\r\n  font-size: 16px;\r\n  z-index: 10;\r\n}\r\n\r\n.chart-loading i {\r\n  font-size: 32px;\r\n}\r\n\r\n.is-loading {\r\n  animation: rotate 1s linear infinite;\r\n}\r\n\r\n@keyframes rotate {\r\n  from { transform: rotate(0deg); }\r\n  to { transform: rotate(360deg); }\r\n}\r\n</style>\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}