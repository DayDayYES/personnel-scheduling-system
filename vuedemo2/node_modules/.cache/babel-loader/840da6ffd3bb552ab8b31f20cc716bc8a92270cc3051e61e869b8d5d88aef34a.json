{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport { groupData } from '../../util/model.js';\nimport { createBoxLayoutReference, getLayoutRect } from '../../util/layout.js';\nexport default function sankeyLayout(ecModel, api) {\n  ecModel.eachSeriesByType('sankey', function (seriesModel) {\n    var nodeWidth = seriesModel.get('nodeWidth');\n    var nodeGap = seriesModel.get('nodeGap');\n    var refContainer = createBoxLayoutReference(seriesModel, api).refContainer;\n    var layoutInfo = getLayoutRect(seriesModel.getBoxLayoutParams(), refContainer);\n    seriesModel.layoutInfo = layoutInfo;\n    var width = layoutInfo.width;\n    var height = layoutInfo.height;\n    var graph = seriesModel.getGraph();\n    var nodes = graph.nodes;\n    var edges = graph.edges;\n    computeNodeValues(nodes);\n    var filteredNodes = zrUtil.filter(nodes, function (node) {\n      return node.getLayout().value === 0;\n    });\n    var iterations = filteredNodes.length !== 0 ? 0 : seriesModel.get('layoutIterations');\n    var orient = seriesModel.get('orient');\n    var nodeAlign = seriesModel.get('nodeAlign');\n    layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient, nodeAlign);\n  });\n}\nfunction layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient, nodeAlign) {\n  computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient, nodeAlign);\n  computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient);\n  computeEdgeDepths(nodes, orient);\n}\n/**\n * Compute the value of each node by summing the associated edge's value\n */\nfunction computeNodeValues(nodes) {\n  zrUtil.each(nodes, function (node) {\n    var value1 = sum(node.outEdges, getEdgeValue);\n    var value2 = sum(node.inEdges, getEdgeValue);\n    var nodeRawValue = node.getValue() || 0;\n    var value = Math.max(value1, value2, nodeRawValue);\n    node.setLayout({\n      value: value\n    }, true);\n  });\n}\n/**\n * Compute the x-position for each node.\n *\n * Here we use Kahn algorithm to detect cycle when we traverse\n * the node to computer the initial x position.\n */\nfunction computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient, nodeAlign) {\n  // Used to mark whether the edge is deleted. if it is deleted,\n  // the value is 0, otherwise it is 1.\n  var remainEdges = [];\n  // Storage each node's indegree.\n  var indegreeArr = [];\n  // Used to storage the node with indegree is equal to 0.\n  var zeroIndegrees = [];\n  var nextTargetNode = [];\n  var x = 0;\n  // let kx = 0;\n  for (var i = 0; i < edges.length; i++) {\n    remainEdges[i] = 1;\n  }\n  for (var i = 0; i < nodes.length; i++) {\n    indegreeArr[i] = nodes[i].inEdges.length;\n    if (indegreeArr[i] === 0) {\n      zeroIndegrees.push(nodes[i]);\n    }\n  }\n  var maxNodeDepth = -1;\n  // Traversing nodes using topological sorting to calculate the\n  // horizontal(if orient === 'horizontal') or vertical(if orient === 'vertical')\n  // position of the nodes.\n  while (zeroIndegrees.length) {\n    for (var idx = 0; idx < zeroIndegrees.length; idx++) {\n      var node = zeroIndegrees[idx];\n      var item = node.hostGraph.data.getRawDataItem(node.dataIndex);\n      var isItemDepth = item.depth != null && item.depth >= 0;\n      if (isItemDepth && item.depth > maxNodeDepth) {\n        maxNodeDepth = item.depth;\n      }\n      node.setLayout({\n        depth: isItemDepth ? item.depth : x\n      }, true);\n      orient === 'vertical' ? node.setLayout({\n        dy: nodeWidth\n      }, true) : node.setLayout({\n        dx: nodeWidth\n      }, true);\n      for (var edgeIdx = 0; edgeIdx < node.outEdges.length; edgeIdx++) {\n        var edge = node.outEdges[edgeIdx];\n        var indexEdge = edges.indexOf(edge);\n        remainEdges[indexEdge] = 0;\n        var targetNode = edge.node2;\n        var nodeIndex = nodes.indexOf(targetNode);\n        if (--indegreeArr[nodeIndex] === 0 && nextTargetNode.indexOf(targetNode) < 0) {\n          nextTargetNode.push(targetNode);\n        }\n      }\n    }\n    ++x;\n    zeroIndegrees = nextTargetNode;\n    nextTargetNode = [];\n  }\n  for (var i = 0; i < remainEdges.length; i++) {\n    if (remainEdges[i] === 1) {\n      throw new Error('Sankey is a DAG, the original data has cycle!');\n    }\n  }\n  var maxDepth = maxNodeDepth > x - 1 ? maxNodeDepth : x - 1;\n  if (nodeAlign && nodeAlign !== 'left') {\n    adjustNodeWithNodeAlign(nodes, nodeAlign, orient, maxDepth);\n  }\n  var kx = orient === 'vertical' ? (height - nodeWidth) / maxDepth : (width - nodeWidth) / maxDepth;\n  scaleNodeBreadths(nodes, kx, orient);\n}\nfunction isNodeDepth(node) {\n  var item = node.hostGraph.data.getRawDataItem(node.dataIndex);\n  return item.depth != null && item.depth >= 0;\n}\nfunction adjustNodeWithNodeAlign(nodes, nodeAlign, orient, maxDepth) {\n  if (nodeAlign === 'right') {\n    var nextSourceNode = [];\n    var remainNodes = nodes;\n    var nodeHeight = 0;\n    while (remainNodes.length) {\n      for (var i = 0; i < remainNodes.length; i++) {\n        var node = remainNodes[i];\n        node.setLayout({\n          skNodeHeight: nodeHeight\n        }, true);\n        for (var j = 0; j < node.inEdges.length; j++) {\n          var edge = node.inEdges[j];\n          if (nextSourceNode.indexOf(edge.node1) < 0) {\n            nextSourceNode.push(edge.node1);\n          }\n        }\n      }\n      remainNodes = nextSourceNode;\n      nextSourceNode = [];\n      ++nodeHeight;\n    }\n    zrUtil.each(nodes, function (node) {\n      if (!isNodeDepth(node)) {\n        node.setLayout({\n          depth: Math.max(0, maxDepth - node.getLayout().skNodeHeight)\n        }, true);\n      }\n    });\n  } else if (nodeAlign === 'justify') {\n    moveSinksRight(nodes, maxDepth);\n  }\n}\n/**\n * All the node without outEgdes are assigned maximum x-position and\n *     be aligned in the last column.\n *\n * @param nodes.  node of sankey view.\n * @param maxDepth.  use to assign to node without outEdges as x-position.\n */\nfunction moveSinksRight(nodes, maxDepth) {\n  zrUtil.each(nodes, function (node) {\n    if (!isNodeDepth(node) && !node.outEdges.length) {\n      node.setLayout({\n        depth: maxDepth\n      }, true);\n    }\n  });\n}\n/**\n * Scale node x-position to the width\n *\n * @param nodes  node of sankey view\n * @param kx   multiple used to scale nodes\n */\nfunction scaleNodeBreadths(nodes, kx, orient) {\n  zrUtil.each(nodes, function (node) {\n    var nodeDepth = node.getLayout().depth * kx;\n    orient === 'vertical' ? node.setLayout({\n      y: nodeDepth\n    }, true) : node.setLayout({\n      x: nodeDepth\n    }, true);\n  });\n}\n/**\n * Using Gauss-Seidel iterations method to compute the node depth(y-position)\n *\n * @param nodes  node of sankey view\n * @param edges  edge of sankey view\n * @param height  the whole height of the area to draw the view\n * @param nodeGap  the vertical distance between two nodes\n *     in the same column.\n * @param iterations  the number of iterations for the algorithm\n */\nfunction computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient) {\n  var nodesByBreadth = prepareNodesByBreadth(nodes, orient);\n  initializeNodeDepth(nodesByBreadth, edges, height, width, nodeGap, orient);\n  resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n  for (var alpha = 1; iterations > 0; iterations--) {\n    // 0.99 is a experience parameter, ensure that each iterations of\n    // changes as small as possible.\n    alpha *= 0.99;\n    relaxRightToLeft(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n    relaxLeftToRight(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n  }\n}\nfunction prepareNodesByBreadth(nodes, orient) {\n  var nodesByBreadth = [];\n  var keyAttr = orient === 'vertical' ? 'y' : 'x';\n  var groupResult = groupData(nodes, function (node) {\n    return node.getLayout()[keyAttr];\n  });\n  groupResult.keys.sort(function (a, b) {\n    return a - b;\n  });\n  zrUtil.each(groupResult.keys, function (key) {\n    nodesByBreadth.push(groupResult.buckets.get(key));\n  });\n  return nodesByBreadth;\n}\n/**\n * Compute the original y-position for each node\n */\nfunction initializeNodeDepth(nodesByBreadth, edges, height, width, nodeGap, orient) {\n  var minKy = Infinity;\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    var n = nodes.length;\n    var sum = 0;\n    zrUtil.each(nodes, function (node) {\n      sum += node.getLayout().value;\n    });\n    var ky = orient === 'vertical' ? (width - (n - 1) * nodeGap) / sum : (height - (n - 1) * nodeGap) / sum;\n    if (ky < minKy) {\n      minKy = ky;\n    }\n  });\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node, i) {\n      var nodeDy = node.getLayout().value * minKy;\n      if (orient === 'vertical') {\n        node.setLayout({\n          x: i\n        }, true);\n        node.setLayout({\n          dx: nodeDy\n        }, true);\n      } else {\n        node.setLayout({\n          y: i\n        }, true);\n        node.setLayout({\n          dy: nodeDy\n        }, true);\n      }\n    });\n  });\n  zrUtil.each(edges, function (edge) {\n    var edgeDy = +edge.getValue() * minKy;\n    edge.setLayout({\n      dy: edgeDy\n    }, true);\n  });\n}\n/**\n * Resolve the collision of initialized depth (y-position)\n */\nfunction resolveCollisions(nodesByBreadth, nodeGap, height, width, orient) {\n  var keyAttr = orient === 'vertical' ? 'x' : 'y';\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    nodes.sort(function (a, b) {\n      return a.getLayout()[keyAttr] - b.getLayout()[keyAttr];\n    });\n    var nodeX;\n    var node;\n    var dy;\n    var y0 = 0;\n    var n = nodes.length;\n    var nodeDyAttr = orient === 'vertical' ? 'dx' : 'dy';\n    for (var i = 0; i < n; i++) {\n      node = nodes[i];\n      dy = y0 - node.getLayout()[keyAttr];\n      if (dy > 0) {\n        nodeX = node.getLayout()[keyAttr] + dy;\n        orient === 'vertical' ? node.setLayout({\n          x: nodeX\n        }, true) : node.setLayout({\n          y: nodeX\n        }, true);\n      }\n      y0 = node.getLayout()[keyAttr] + node.getLayout()[nodeDyAttr] + nodeGap;\n    }\n    var viewWidth = orient === 'vertical' ? width : height;\n    // If the bottommost node goes outside the bounds, push it back up\n    dy = y0 - nodeGap - viewWidth;\n    if (dy > 0) {\n      nodeX = node.getLayout()[keyAttr] - dy;\n      orient === 'vertical' ? node.setLayout({\n        x: nodeX\n      }, true) : node.setLayout({\n        y: nodeX\n      }, true);\n      y0 = nodeX;\n      for (var i = n - 2; i >= 0; --i) {\n        node = nodes[i];\n        dy = node.getLayout()[keyAttr] + node.getLayout()[nodeDyAttr] + nodeGap - y0;\n        if (dy > 0) {\n          nodeX = node.getLayout()[keyAttr] - dy;\n          orient === 'vertical' ? node.setLayout({\n            x: nodeX\n          }, true) : node.setLayout({\n            y: nodeX\n          }, true);\n        }\n        y0 = node.getLayout()[keyAttr];\n      }\n    }\n  });\n}\n/**\n * Change the y-position of the nodes, except most the right side nodes\n * @param nodesByBreadth\n * @param alpha  parameter used to adjust the nodes y-position\n */\nfunction relaxRightToLeft(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.outEdges.length) {\n        var y = sum(node.outEdges, weightedTarget, orient) / sum(node.outEdges, getEdgeValue);\n        if (isNaN(y)) {\n          var len = node.outEdges.length;\n          y = len ? sum(node.outEdges, centerTarget, orient) / len : 0;\n        }\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\nfunction weightedTarget(edge, orient) {\n  return center(edge.node2, orient) * edge.getValue();\n}\nfunction centerTarget(edge, orient) {\n  return center(edge.node2, orient);\n}\nfunction weightedSource(edge, orient) {\n  return center(edge.node1, orient) * edge.getValue();\n}\nfunction centerSource(edge, orient) {\n  return center(edge.node1, orient);\n}\nfunction center(node, orient) {\n  return orient === 'vertical' ? node.getLayout().x + node.getLayout().dx / 2 : node.getLayout().y + node.getLayout().dy / 2;\n}\nfunction getEdgeValue(edge) {\n  return edge.getValue();\n}\nfunction sum(array, cb, orient) {\n  var sum = 0;\n  var len = array.length;\n  var i = -1;\n  while (++i < len) {\n    var value = +cb(array[i], orient);\n    if (!isNaN(value)) {\n      sum += value;\n    }\n  }\n  return sum;\n}\n/**\n * Change the y-position of the nodes, except most the left side nodes\n */\nfunction relaxLeftToRight(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.inEdges.length) {\n        var y = sum(node.inEdges, weightedSource, orient) / sum(node.inEdges, getEdgeValue);\n        if (isNaN(y)) {\n          var len = node.inEdges.length;\n          y = len ? sum(node.inEdges, centerSource, orient) / len : 0;\n        }\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\n/**\n * Compute the depth(y-position) of each edge\n */\nfunction computeEdgeDepths(nodes, orient) {\n  var keyAttr = orient === 'vertical' ? 'x' : 'y';\n  zrUtil.each(nodes, function (node) {\n    node.outEdges.sort(function (a, b) {\n      return a.node2.getLayout()[keyAttr] - b.node2.getLayout()[keyAttr];\n    });\n    node.inEdges.sort(function (a, b) {\n      return a.node1.getLayout()[keyAttr] - b.node1.getLayout()[keyAttr];\n    });\n  });\n  zrUtil.each(nodes, function (node) {\n    var sy = 0;\n    var ty = 0;\n    zrUtil.each(node.outEdges, function (edge) {\n      edge.setLayout({\n        sy: sy\n      }, true);\n      sy += edge.getLayout().dy;\n    });\n    zrUtil.each(node.inEdges, function (edge) {\n      edge.setLayout({\n        ty: ty\n      }, true);\n      ty += edge.getLayout().dy;\n    });\n  });\n}","map":{"version":3,"names":["zrUtil","groupData","createBoxLayoutReference","getLayoutRect","sankeyLayout","ecModel","api","eachSeriesByType","seriesModel","nodeWidth","get","nodeGap","refContainer","layoutInfo","getBoxLayoutParams","width","height","graph","getGraph","nodes","edges","computeNodeValues","filteredNodes","filter","node","getLayout","value","iterations","length","orient","nodeAlign","layoutSankey","computeNodeBreadths","computeNodeDepths","computeEdgeDepths","each","value1","sum","outEdges","getEdgeValue","value2","inEdges","nodeRawValue","getValue","Math","max","setLayout","remainEdges","indegreeArr","zeroIndegrees","nextTargetNode","x","i","push","maxNodeDepth","idx","item","hostGraph","data","getRawDataItem","dataIndex","isItemDepth","depth","dy","dx","edgeIdx","edge","indexEdge","indexOf","targetNode","node2","nodeIndex","Error","maxDepth","adjustNodeWithNodeAlign","kx","scaleNodeBreadths","isNodeDepth","nextSourceNode","remainNodes","nodeHeight","skNodeHeight","j","node1","moveSinksRight","nodeDepth","y","nodesByBreadth","prepareNodesByBreadth","initializeNodeDepth","resolveCollisions","alpha","relaxRightToLeft","relaxLeftToRight","keyAttr","groupResult","keys","sort","a","b","key","buckets","minKy","Infinity","n","ky","nodeDy","edgeDy","nodeX","y0","nodeDyAttr","viewWidth","slice","reverse","weightedTarget","isNaN","len","centerTarget","center","nodeY","weightedSource","centerSource","array","cb","sy","ty"],"sources":["D:/Program Files/JetBrains/IDEAProject/springboot-vue-wms_test/vuedemo2/node_modules/echarts/lib/chart/sankey/sankeyLayout.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport { groupData } from '../../util/model.js';\nimport { createBoxLayoutReference, getLayoutRect } from '../../util/layout.js';\nexport default function sankeyLayout(ecModel, api) {\n  ecModel.eachSeriesByType('sankey', function (seriesModel) {\n    var nodeWidth = seriesModel.get('nodeWidth');\n    var nodeGap = seriesModel.get('nodeGap');\n    var refContainer = createBoxLayoutReference(seriesModel, api).refContainer;\n    var layoutInfo = getLayoutRect(seriesModel.getBoxLayoutParams(), refContainer);\n    seriesModel.layoutInfo = layoutInfo;\n    var width = layoutInfo.width;\n    var height = layoutInfo.height;\n    var graph = seriesModel.getGraph();\n    var nodes = graph.nodes;\n    var edges = graph.edges;\n    computeNodeValues(nodes);\n    var filteredNodes = zrUtil.filter(nodes, function (node) {\n      return node.getLayout().value === 0;\n    });\n    var iterations = filteredNodes.length !== 0 ? 0 : seriesModel.get('layoutIterations');\n    var orient = seriesModel.get('orient');\n    var nodeAlign = seriesModel.get('nodeAlign');\n    layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient, nodeAlign);\n  });\n}\nfunction layoutSankey(nodes, edges, nodeWidth, nodeGap, width, height, iterations, orient, nodeAlign) {\n  computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient, nodeAlign);\n  computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient);\n  computeEdgeDepths(nodes, orient);\n}\n/**\n * Compute the value of each node by summing the associated edge's value\n */\nfunction computeNodeValues(nodes) {\n  zrUtil.each(nodes, function (node) {\n    var value1 = sum(node.outEdges, getEdgeValue);\n    var value2 = sum(node.inEdges, getEdgeValue);\n    var nodeRawValue = node.getValue() || 0;\n    var value = Math.max(value1, value2, nodeRawValue);\n    node.setLayout({\n      value: value\n    }, true);\n  });\n}\n/**\n * Compute the x-position for each node.\n *\n * Here we use Kahn algorithm to detect cycle when we traverse\n * the node to computer the initial x position.\n */\nfunction computeNodeBreadths(nodes, edges, nodeWidth, width, height, orient, nodeAlign) {\n  // Used to mark whether the edge is deleted. if it is deleted,\n  // the value is 0, otherwise it is 1.\n  var remainEdges = [];\n  // Storage each node's indegree.\n  var indegreeArr = [];\n  // Used to storage the node with indegree is equal to 0.\n  var zeroIndegrees = [];\n  var nextTargetNode = [];\n  var x = 0;\n  // let kx = 0;\n  for (var i = 0; i < edges.length; i++) {\n    remainEdges[i] = 1;\n  }\n  for (var i = 0; i < nodes.length; i++) {\n    indegreeArr[i] = nodes[i].inEdges.length;\n    if (indegreeArr[i] === 0) {\n      zeroIndegrees.push(nodes[i]);\n    }\n  }\n  var maxNodeDepth = -1;\n  // Traversing nodes using topological sorting to calculate the\n  // horizontal(if orient === 'horizontal') or vertical(if orient === 'vertical')\n  // position of the nodes.\n  while (zeroIndegrees.length) {\n    for (var idx = 0; idx < zeroIndegrees.length; idx++) {\n      var node = zeroIndegrees[idx];\n      var item = node.hostGraph.data.getRawDataItem(node.dataIndex);\n      var isItemDepth = item.depth != null && item.depth >= 0;\n      if (isItemDepth && item.depth > maxNodeDepth) {\n        maxNodeDepth = item.depth;\n      }\n      node.setLayout({\n        depth: isItemDepth ? item.depth : x\n      }, true);\n      orient === 'vertical' ? node.setLayout({\n        dy: nodeWidth\n      }, true) : node.setLayout({\n        dx: nodeWidth\n      }, true);\n      for (var edgeIdx = 0; edgeIdx < node.outEdges.length; edgeIdx++) {\n        var edge = node.outEdges[edgeIdx];\n        var indexEdge = edges.indexOf(edge);\n        remainEdges[indexEdge] = 0;\n        var targetNode = edge.node2;\n        var nodeIndex = nodes.indexOf(targetNode);\n        if (--indegreeArr[nodeIndex] === 0 && nextTargetNode.indexOf(targetNode) < 0) {\n          nextTargetNode.push(targetNode);\n        }\n      }\n    }\n    ++x;\n    zeroIndegrees = nextTargetNode;\n    nextTargetNode = [];\n  }\n  for (var i = 0; i < remainEdges.length; i++) {\n    if (remainEdges[i] === 1) {\n      throw new Error('Sankey is a DAG, the original data has cycle!');\n    }\n  }\n  var maxDepth = maxNodeDepth > x - 1 ? maxNodeDepth : x - 1;\n  if (nodeAlign && nodeAlign !== 'left') {\n    adjustNodeWithNodeAlign(nodes, nodeAlign, orient, maxDepth);\n  }\n  var kx = orient === 'vertical' ? (height - nodeWidth) / maxDepth : (width - nodeWidth) / maxDepth;\n  scaleNodeBreadths(nodes, kx, orient);\n}\nfunction isNodeDepth(node) {\n  var item = node.hostGraph.data.getRawDataItem(node.dataIndex);\n  return item.depth != null && item.depth >= 0;\n}\nfunction adjustNodeWithNodeAlign(nodes, nodeAlign, orient, maxDepth) {\n  if (nodeAlign === 'right') {\n    var nextSourceNode = [];\n    var remainNodes = nodes;\n    var nodeHeight = 0;\n    while (remainNodes.length) {\n      for (var i = 0; i < remainNodes.length; i++) {\n        var node = remainNodes[i];\n        node.setLayout({\n          skNodeHeight: nodeHeight\n        }, true);\n        for (var j = 0; j < node.inEdges.length; j++) {\n          var edge = node.inEdges[j];\n          if (nextSourceNode.indexOf(edge.node1) < 0) {\n            nextSourceNode.push(edge.node1);\n          }\n        }\n      }\n      remainNodes = nextSourceNode;\n      nextSourceNode = [];\n      ++nodeHeight;\n    }\n    zrUtil.each(nodes, function (node) {\n      if (!isNodeDepth(node)) {\n        node.setLayout({\n          depth: Math.max(0, maxDepth - node.getLayout().skNodeHeight)\n        }, true);\n      }\n    });\n  } else if (nodeAlign === 'justify') {\n    moveSinksRight(nodes, maxDepth);\n  }\n}\n/**\n * All the node without outEgdes are assigned maximum x-position and\n *     be aligned in the last column.\n *\n * @param nodes.  node of sankey view.\n * @param maxDepth.  use to assign to node without outEdges as x-position.\n */\nfunction moveSinksRight(nodes, maxDepth) {\n  zrUtil.each(nodes, function (node) {\n    if (!isNodeDepth(node) && !node.outEdges.length) {\n      node.setLayout({\n        depth: maxDepth\n      }, true);\n    }\n  });\n}\n/**\n * Scale node x-position to the width\n *\n * @param nodes  node of sankey view\n * @param kx   multiple used to scale nodes\n */\nfunction scaleNodeBreadths(nodes, kx, orient) {\n  zrUtil.each(nodes, function (node) {\n    var nodeDepth = node.getLayout().depth * kx;\n    orient === 'vertical' ? node.setLayout({\n      y: nodeDepth\n    }, true) : node.setLayout({\n      x: nodeDepth\n    }, true);\n  });\n}\n/**\n * Using Gauss-Seidel iterations method to compute the node depth(y-position)\n *\n * @param nodes  node of sankey view\n * @param edges  edge of sankey view\n * @param height  the whole height of the area to draw the view\n * @param nodeGap  the vertical distance between two nodes\n *     in the same column.\n * @param iterations  the number of iterations for the algorithm\n */\nfunction computeNodeDepths(nodes, edges, height, width, nodeGap, iterations, orient) {\n  var nodesByBreadth = prepareNodesByBreadth(nodes, orient);\n  initializeNodeDepth(nodesByBreadth, edges, height, width, nodeGap, orient);\n  resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n  for (var alpha = 1; iterations > 0; iterations--) {\n    // 0.99 is a experience parameter, ensure that each iterations of\n    // changes as small as possible.\n    alpha *= 0.99;\n    relaxRightToLeft(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n    relaxLeftToRight(nodesByBreadth, alpha, orient);\n    resolveCollisions(nodesByBreadth, nodeGap, height, width, orient);\n  }\n}\nfunction prepareNodesByBreadth(nodes, orient) {\n  var nodesByBreadth = [];\n  var keyAttr = orient === 'vertical' ? 'y' : 'x';\n  var groupResult = groupData(nodes, function (node) {\n    return node.getLayout()[keyAttr];\n  });\n  groupResult.keys.sort(function (a, b) {\n    return a - b;\n  });\n  zrUtil.each(groupResult.keys, function (key) {\n    nodesByBreadth.push(groupResult.buckets.get(key));\n  });\n  return nodesByBreadth;\n}\n/**\n * Compute the original y-position for each node\n */\nfunction initializeNodeDepth(nodesByBreadth, edges, height, width, nodeGap, orient) {\n  var minKy = Infinity;\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    var n = nodes.length;\n    var sum = 0;\n    zrUtil.each(nodes, function (node) {\n      sum += node.getLayout().value;\n    });\n    var ky = orient === 'vertical' ? (width - (n - 1) * nodeGap) / sum : (height - (n - 1) * nodeGap) / sum;\n    if (ky < minKy) {\n      minKy = ky;\n    }\n  });\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node, i) {\n      var nodeDy = node.getLayout().value * minKy;\n      if (orient === 'vertical') {\n        node.setLayout({\n          x: i\n        }, true);\n        node.setLayout({\n          dx: nodeDy\n        }, true);\n      } else {\n        node.setLayout({\n          y: i\n        }, true);\n        node.setLayout({\n          dy: nodeDy\n        }, true);\n      }\n    });\n  });\n  zrUtil.each(edges, function (edge) {\n    var edgeDy = +edge.getValue() * minKy;\n    edge.setLayout({\n      dy: edgeDy\n    }, true);\n  });\n}\n/**\n * Resolve the collision of initialized depth (y-position)\n */\nfunction resolveCollisions(nodesByBreadth, nodeGap, height, width, orient) {\n  var keyAttr = orient === 'vertical' ? 'x' : 'y';\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    nodes.sort(function (a, b) {\n      return a.getLayout()[keyAttr] - b.getLayout()[keyAttr];\n    });\n    var nodeX;\n    var node;\n    var dy;\n    var y0 = 0;\n    var n = nodes.length;\n    var nodeDyAttr = orient === 'vertical' ? 'dx' : 'dy';\n    for (var i = 0; i < n; i++) {\n      node = nodes[i];\n      dy = y0 - node.getLayout()[keyAttr];\n      if (dy > 0) {\n        nodeX = node.getLayout()[keyAttr] + dy;\n        orient === 'vertical' ? node.setLayout({\n          x: nodeX\n        }, true) : node.setLayout({\n          y: nodeX\n        }, true);\n      }\n      y0 = node.getLayout()[keyAttr] + node.getLayout()[nodeDyAttr] + nodeGap;\n    }\n    var viewWidth = orient === 'vertical' ? width : height;\n    // If the bottommost node goes outside the bounds, push it back up\n    dy = y0 - nodeGap - viewWidth;\n    if (dy > 0) {\n      nodeX = node.getLayout()[keyAttr] - dy;\n      orient === 'vertical' ? node.setLayout({\n        x: nodeX\n      }, true) : node.setLayout({\n        y: nodeX\n      }, true);\n      y0 = nodeX;\n      for (var i = n - 2; i >= 0; --i) {\n        node = nodes[i];\n        dy = node.getLayout()[keyAttr] + node.getLayout()[nodeDyAttr] + nodeGap - y0;\n        if (dy > 0) {\n          nodeX = node.getLayout()[keyAttr] - dy;\n          orient === 'vertical' ? node.setLayout({\n            x: nodeX\n          }, true) : node.setLayout({\n            y: nodeX\n          }, true);\n        }\n        y0 = node.getLayout()[keyAttr];\n      }\n    }\n  });\n}\n/**\n * Change the y-position of the nodes, except most the right side nodes\n * @param nodesByBreadth\n * @param alpha  parameter used to adjust the nodes y-position\n */\nfunction relaxRightToLeft(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth.slice().reverse(), function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.outEdges.length) {\n        var y = sum(node.outEdges, weightedTarget, orient) / sum(node.outEdges, getEdgeValue);\n        if (isNaN(y)) {\n          var len = node.outEdges.length;\n          y = len ? sum(node.outEdges, centerTarget, orient) / len : 0;\n        }\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\nfunction weightedTarget(edge, orient) {\n  return center(edge.node2, orient) * edge.getValue();\n}\nfunction centerTarget(edge, orient) {\n  return center(edge.node2, orient);\n}\nfunction weightedSource(edge, orient) {\n  return center(edge.node1, orient) * edge.getValue();\n}\nfunction centerSource(edge, orient) {\n  return center(edge.node1, orient);\n}\nfunction center(node, orient) {\n  return orient === 'vertical' ? node.getLayout().x + node.getLayout().dx / 2 : node.getLayout().y + node.getLayout().dy / 2;\n}\nfunction getEdgeValue(edge) {\n  return edge.getValue();\n}\nfunction sum(array, cb, orient) {\n  var sum = 0;\n  var len = array.length;\n  var i = -1;\n  while (++i < len) {\n    var value = +cb(array[i], orient);\n    if (!isNaN(value)) {\n      sum += value;\n    }\n  }\n  return sum;\n}\n/**\n * Change the y-position of the nodes, except most the left side nodes\n */\nfunction relaxLeftToRight(nodesByBreadth, alpha, orient) {\n  zrUtil.each(nodesByBreadth, function (nodes) {\n    zrUtil.each(nodes, function (node) {\n      if (node.inEdges.length) {\n        var y = sum(node.inEdges, weightedSource, orient) / sum(node.inEdges, getEdgeValue);\n        if (isNaN(y)) {\n          var len = node.inEdges.length;\n          y = len ? sum(node.inEdges, centerSource, orient) / len : 0;\n        }\n        if (orient === 'vertical') {\n          var nodeX = node.getLayout().x + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            x: nodeX\n          }, true);\n        } else {\n          var nodeY = node.getLayout().y + (y - center(node, orient)) * alpha;\n          node.setLayout({\n            y: nodeY\n          }, true);\n        }\n      }\n    });\n  });\n}\n/**\n * Compute the depth(y-position) of each edge\n */\nfunction computeEdgeDepths(nodes, orient) {\n  var keyAttr = orient === 'vertical' ? 'x' : 'y';\n  zrUtil.each(nodes, function (node) {\n    node.outEdges.sort(function (a, b) {\n      return a.node2.getLayout()[keyAttr] - b.node2.getLayout()[keyAttr];\n    });\n    node.inEdges.sort(function (a, b) {\n      return a.node1.getLayout()[keyAttr] - b.node1.getLayout()[keyAttr];\n    });\n  });\n  zrUtil.each(nodes, function (node) {\n    var sy = 0;\n    var ty = 0;\n    zrUtil.each(node.outEdges, function (edge) {\n      edge.setLayout({\n        sy: sy\n      }, true);\n      sy += edge.getLayout().dy;\n    });\n    zrUtil.each(node.inEdges, function (edge) {\n      edge.setLayout({\n        ty: ty\n      }, true);\n      ty += edge.getLayout().dy;\n    });\n  });\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}