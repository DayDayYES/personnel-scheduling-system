{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport GanttChart from './GanttChart.vue';\nexport default {\n  name: \"AlgorithmTest\",\n  components: {\n    GanttChart\n  },\n  data() {\n    return {\n      selectedAlgorithm: \"ddpg\",\n      inputData: {\n        max_episodes: 100,\n        params: \"10,5,8,6,7,9,6,7,6,7,7,7,4,7,5\"\n      },\n      result: null,\n      isLoading: false,\n      progressVisible: false,\n      progressPercentage: 0,\n      progressStatus: null,\n      startTime: null,\n      activeChartTab: 'process',\n      totalRuns: 0,\n      runHistory: [],\n      // 新增：调度数据（用于ECharts甘特图）\n      scheduleData: [],\n      makespan: 0,\n      // 新增：任务详情弹窗\n      taskDetailVisible: false,\n      selectedTask: null,\n      algorithmInfo: {\n        ddpg: {\n          name: 'DDPG - 深度确定性策略梯度',\n          description: '基于Actor-Critic架构的深度强化学习算法，适用于连续动作空间的调度优化问题。',\n          features: ['连续控制', '策略梯度', '经验回放', '目标网络']\n        },\n        ddqn: {\n          name: 'DDQN - 双深度Q网络',\n          description: '改进的深度Q学习算法，通过双网络结构减少过估计问题，提高调度决策的稳定性。',\n          features: ['双网络', 'Q学习', '离散动作', '经验回放']\n        },\n        ga: {\n          name: 'CGA - 改进遗传算法',\n          description: '基于自然选择和遗传机制的优化算法，通过进化过程寻找最优调度方案。',\n          features: ['全局搜索', '并行优化', '自适应变异', '精英保留']\n        }\n      }\n    };\n  },\n  computed: {\n    canRun() {\n      if (!this.selectedAlgorithm) return false;\n      if (this.selectedAlgorithm === 'ddpg') {\n        return this.inputData.max_episodes > 0;\n      }\n      if (this.selectedAlgorithm === 'ddqn' || this.selectedAlgorithm === 'ga') {\n        return this.inputData.params.trim() !== '';\n      }\n      return false;\n    }\n  },\n  methods: {\n    getAlgorithmInfo(algorithm) {\n      return this.algorithmInfo[algorithm] || {};\n    },\n    getEstimatedTime() {\n      if (this.selectedAlgorithm === 'ddpg') {\n        const episodes = this.inputData.max_episodes || 100;\n        return `约 ${Math.ceil(episodes / 20)} 分钟`;\n      }\n      return '约 20 秒';\n    },\n    getRunningTime() {\n      if (!this.startTime) return '0秒';\n      const elapsed = Math.floor((Date.now() - this.startTime) / 1000);\n      return `${elapsed}秒`;\n    },\n    onAlgorithmChange() {\n      this.result = null;\n      this.progressVisible = false;\n      this.progressPercentage = 0;\n    },\n    async runAlgorithm() {\n      if (!this.selectedAlgorithm) {\n        this.$message.error(\"请选择算法\");\n        return;\n      }\n\n      // 验证输入\n      if (this.selectedAlgorithm === 'ddpg' && !this.inputData.max_episodes) {\n        this.$message.error(\"请输入训练的最大迭代次数\");\n        return;\n      }\n      if ((this.selectedAlgorithm === 'ddqn' || this.selectedAlgorithm === 'ga') && !this.inputData.params) {\n        this.$message.error(\"请输入参数\");\n        return;\n      }\n      this.isLoading = true;\n      this.progressVisible = true;\n      this.progressPercentage = 0;\n      this.progressStatus = null;\n      this.startTime = Date.now();\n      try {\n        let requestData = {};\n        let apiUrl = \"\";\n        if (this.selectedAlgorithm === 'ddpg') {\n          apiUrl = \"http://localhost:5000/run_rl\";\n          requestData = {\n            algorithm_name: this.selectedAlgorithm,\n            max_episodes: parseInt(this.inputData.max_episodes)\n          };\n        } else if (this.selectedAlgorithm === 'ddqn') {\n          apiUrl = \"http://localhost:5001/run_ddqn\";\n          requestData = {\n            algorithm_name: this.selectedAlgorithm,\n            params: this.inputData.params.split(\",\").map(Number)\n          };\n        } else if (this.selectedAlgorithm === 'ga') {\n          apiUrl = \"http://localhost:5002/run_ga\";\n          requestData = {\n            algorithm_name: this.selectedAlgorithm,\n            params: this.inputData.params.split(\",\").map(Number)\n          };\n        }\n\n        // 验证数字输入\n        if (this.selectedAlgorithm === 'ddpg' && isNaN(requestData.max_episodes)) {\n          this.$message.error(\"请输入有效的整数\");\n          return;\n        }\n        if ((this.selectedAlgorithm === 'ddqn' || this.selectedAlgorithm === 'ga') && requestData.params.some(isNaN)) {\n          this.$message.error(\"请输入有效的数字\");\n          return;\n        }\n\n        // 模拟进度更新\n        const progressInterval = setInterval(() => {\n          if (this.progressPercentage < 90) {\n            this.progressPercentage += Math.random() * 10;\n          }\n        }, 1000);\n        const response = await this.$axios.post(apiUrl, requestData, {\n          headers: {\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        clearInterval(progressInterval);\n        this.progressPercentage = 100;\n        this.progressStatus = \"success\";\n        this.result = response.data;\n\n        // 新增：提取调度数据用于ECharts甘特图\n        if (response.data.result && response.data.result.schedule_data) {\n          this.scheduleData = response.data.result.schedule_data;\n          this.makespan = response.data.result.makespan || 0;\n          console.log('调度数据加载成功:', this.scheduleData.length, '个任务，完工时间:', this.makespan);\n        }\n        this.totalRuns++;\n\n        // 添加到历史记录\n        this.runHistory.unshift({\n          timestamp: new Date().toLocaleString(),\n          algorithm: this.getAlgorithmInfo(this.selectedAlgorithm).name,\n          status: 'success',\n          statusText: '运行成功',\n          params: this.selectedAlgorithm === 'ddpg' ? `迭代次数: ${this.inputData.max_episodes}` : `参数: ${this.inputData.params}`\n        });\n\n        // 保留最近10条记录\n        if (this.runHistory.length > 10) {\n          this.runHistory = this.runHistory.slice(0, 10);\n        }\n        this.$message.success(\"算法运行完成！\");\n      } catch (error) {\n        console.error(\"调用算法失败:\", error);\n        this.$message.error(\"调用算法失败，请检查输入或后端服务\");\n        this.progressStatus = \"exception\";\n\n        // 添加失败记录\n        this.runHistory.unshift({\n          timestamp: new Date().toLocaleString(),\n          algorithm: this.getAlgorithmInfo(this.selectedAlgorithm).name,\n          status: 'error',\n          statusText: '运行失败',\n          params: this.selectedAlgorithm === 'ddpg' ? `迭代次数: ${this.inputData.max_episodes}` : `参数: ${this.inputData.params}`\n        });\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    exportResult() {\n      if (!this.result) return;\n      const content = this.result.result.schedule_details;\n      const blob = new Blob([content], {\n        type: 'text/plain'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = `调度结果_${this.selectedAlgorithm}_${new Date().getTime()}.txt`;\n      a.click();\n      window.URL.revokeObjectURL(url);\n      this.$message.success('结果导出成功！');\n    },\n    downloadChart(chartType) {\n      if (!this.result || !this.result.result.gantt_charts || !this.result.result.gantt_charts[chartType]) return;\n      const chartNames = {\n        'process': '工序视角甘特图',\n        'workpoint': '工作点视角甘特图',\n        'team': '团队视角甘特图'\n      };\n      const link = document.createElement('a');\n      link.href = 'data:image/png;base64,' + this.result.result.gantt_charts[chartType];\n      link.download = `${chartNames[chartType]}_${this.selectedAlgorithm}_${new Date().getTime()}.png`;\n      link.click();\n      this.$message.success(`${chartNames[chartType]}下载成功！`);\n    },\n    downloadAllCharts() {\n      if (!this.result || !this.result.result.gantt_charts) return;\n      const charts = this.result.result.gantt_charts;\n      const chartNames = {\n        'process': '工序视角甘特图',\n        'workpoint': '工作点视角甘特图',\n        'team': '团队视角甘特图'\n      };\n      let downloadCount = 0;\n      Object.keys(charts).forEach(chartType => {\n        if (charts[chartType]) {\n          setTimeout(() => {\n            const link = document.createElement('a');\n            link.href = 'data:image/png;base64,' + charts[chartType];\n            link.download = `${chartNames[chartType]}_${this.selectedAlgorithm}_${new Date().getTime()}.png`;\n            link.click();\n            downloadCount++;\n          }, downloadCount * 500); // 间隔500ms下载，避免浏览器阻止\n        }\n      });\n      this.$message.success('所有甘特图开始下载！');\n    },\n    clearHistory() {\n      this.$confirm('确定要清空运行历史吗？', '确认操作', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(() => {\n        this.runHistory = [];\n        this.$message.success('历史记录已清空');\n      });\n    },\n    /**\r\n     * 显示任务详情弹窗\r\n     */\n    showTaskDetail(task) {\n      this.selectedTask = task;\n      this.taskDetailVisible = true;\n    },\n    /**\r\n     * 时间单位转显示字符串\r\n     */\n    formatTimeUnit(timeUnit) {\n      const baseDate = new Date('2024-01-01');\n      const days = timeUnit / 10; // 每10单位 = 1天\n      baseDate.setDate(baseDate.getDate() + days);\n      return baseDate.toLocaleDateString('zh-CN', {\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    /**\r\n     * 获取团队中文名称\r\n     */\n    getTeamName(team) {\n      const teamNames = {\n        'team1': '团队1',\n        'team2': '团队2',\n        'team3': '团队3',\n        'team4': '团队4',\n        'team5': '团队5',\n        'team6': '团队6'\n      };\n      return teamNames[team] || team;\n    }\n  }\n};","map":{"version":3,"names":["GanttChart","name","components","data","selectedAlgorithm","inputData","max_episodes","params","result","isLoading","progressVisible","progressPercentage","progressStatus","startTime","activeChartTab","totalRuns","runHistory","scheduleData","makespan","taskDetailVisible","selectedTask","algorithmInfo","ddpg","description","features","ddqn","ga","computed","canRun","trim","methods","getAlgorithmInfo","algorithm","getEstimatedTime","episodes","Math","ceil","getRunningTime","elapsed","floor","Date","now","onAlgorithmChange","runAlgorithm","$message","error","requestData","apiUrl","algorithm_name","parseInt","split","map","Number","isNaN","some","progressInterval","setInterval","random","response","$axios","post","headers","clearInterval","schedule_data","console","log","length","unshift","timestamp","toLocaleString","status","statusText","slice","success","exportResult","content","schedule_details","blob","Blob","type","url","window","URL","createObjectURL","a","document","createElement","href","download","getTime","click","revokeObjectURL","downloadChart","chartType","gantt_charts","chartNames","link","downloadAllCharts","charts","downloadCount","Object","keys","forEach","setTimeout","clearHistory","$confirm","confirmButtonText","cancelButtonText","then","showTaskDetail","task","formatTimeUnit","timeUnit","baseDate","days","setDate","getDate","toLocaleDateString","year","month","day","hour","minute","getTeamName","team","teamNames"],"sources":["src/components/user/Test.vue"],"sourcesContent":["<template>\r\n    <div class=\"algorithm-container\">\r\n      <!-- 页面标题 -->\r\n      <div class=\"page-header\">\r\n        <div class=\"header-content\">\r\n          <div class=\"title-section\">\r\n            <h2 class=\"page-title\">\r\n              <i class=\"el-icon-cpu title-icon\"></i>\r\n              调度算法\r\n            </h2>\r\n            <p class=\"page-subtitle\">智能调度算法平台，支持DDPG、DDQN、CGA多种算法</p>\r\n          </div>\r\n          <div class=\"header-stats\">\r\n            <div class=\"stat-item\">\r\n              <div class=\"stat-value\">3</div>\r\n              <div class=\"stat-label\">算法类型</div>\r\n            </div>\r\n            <div class=\"stat-item\">\r\n              <div class=\"stat-value\">{{ totalRuns }}</div>\r\n              <div class=\"stat-label\">总运行次数</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n  \r\n      <!-- 算法配置区域 -->\r\n      <div class=\"config-section\">\r\n        <el-card class=\"config-card\" shadow=\"never\">\r\n          <div class=\"config-header\">\r\n            <h3 class=\"config-title\">\r\n              <i class=\"el-icon-setting\"></i>\r\n              算法配置\r\n            </h3>\r\n          </div>\r\n  \r\n          <div class=\"config-content\">\r\n            <!-- 算法选择 -->\r\n            <div class=\"config-row\">\r\n              <div class=\"config-item\">\r\n                <label class=\"config-label\">选择算法：</label>\r\n                <el-select \r\n                  v-model=\"selectedAlgorithm\" \r\n                  placeholder=\"请选择调度算法\" \r\n                  class=\"algorithm-select\"\r\n                  @change=\"onAlgorithmChange\">\r\n                  <el-option \r\n                    label=\"DDPG - 深度确定性策略梯度\" \r\n                    value=\"ddpg\">\r\n                    <div class=\"algorithm-option\">\r\n                      <i class=\"el-icon-cpu\"></i>\r\n                      <span>DDPG</span>\r\n                      <small>深度确定性策略梯度</small>\r\n                    </div>\r\n                  </el-option>\r\n                  <el-option \r\n                    label=\"DDQN - 双深度Q网络\" \r\n                    value=\"ddqn\">\r\n                    <div class=\"algorithm-option\">\r\n                      <i class=\"el-icon-connection\"></i>\r\n                      <span>DDQN</span>\r\n                      <small>双深度Q网络</small>\r\n                    </div>\r\n                  </el-option>\r\n                  <el-option \r\n                    label=\"CGA - 改进遗传算法\" \r\n                    value=\"ga\">\r\n                    <div class=\"algorithm-option\">\r\n                      <i class=\"el-icon-s-data\"></i>\r\n                      <span>CGA</span>\r\n                      <small>改进遗传算法</small>\r\n                    </div>\r\n                  </el-option>\r\n                </el-select>\r\n              </div>\r\n            </div>\r\n  \r\n            <!-- 算法描述 -->\r\n            <div class=\"algorithm-description\" v-if=\"selectedAlgorithm\">\r\n              <div class=\"description-card\">\r\n                <h4>{{ getAlgorithmInfo(selectedAlgorithm).name }}</h4>\r\n                <p>{{ getAlgorithmInfo(selectedAlgorithm).description }}</p>\r\n                <div class=\"algorithm-features\">\r\n                  <el-tag \r\n                    v-for=\"feature in getAlgorithmInfo(selectedAlgorithm).features\" \r\n                    :key=\"feature\"\r\n                    size=\"small\"\r\n                    class=\"feature-tag\">\r\n                    {{ feature }}\r\n                  </el-tag>\r\n                </div>\r\n              </div>\r\n            </div>\r\n  \r\n            <!-- 参数输入区域 -->\r\n            <div class=\"params-section\" v-if=\"selectedAlgorithm\">\r\n              <!-- DDPG 参数 -->\r\n              <div v-if=\"selectedAlgorithm === 'ddpg'\" class=\"param-group\">\r\n                <label class=\"param-label\">\r\n                  <i class=\"el-icon-time\"></i>\r\n                  训练迭代次数：\r\n                </label>\r\n                <el-input-number\r\n                  v-model=\"inputData.max_episodes\"\r\n                  :min=\"1\"\r\n                  :max=\"10000\"\r\n                  :step=\"10\"\r\n                  placeholder=\"请输入训练的最大迭代次数\"\r\n                  class=\"param-input\">\r\n                </el-input-number>\r\n                <small class=\"param-hint\">建议范围：100-1000次</small>\r\n              </div>\r\n  \r\n              <!-- DDQN 和 GA 参数 -->\r\n              <div v-if=\"selectedAlgorithm === 'ddqn' || selectedAlgorithm === 'ga'\" class=\"param-group\">\r\n                <label class=\"param-label\">\r\n                  <i class=\"el-icon-s-data\"></i>\r\n                  算法参数：\r\n                </label>\r\n                <el-input\r\n                  v-model=\"inputData.params\"\r\n                  placeholder=\"请输入参数（用逗号隔开，例如：10,5,8,6,7,9,6,7,6,7,7,7,4,7,5）\"\r\n                  class=\"param-input-text\">\r\n                </el-input>\r\n                <small class=\"param-hint\">参数示例：10,5,8,6,7,9,6,7,6,7,7,7,4,7,5</small>\r\n              </div>\r\n            </div>\r\n  \r\n            <!-- 运行按钮 -->\r\n            <div class=\"run-section\">\r\n              <el-button \r\n                type=\"primary\" \r\n                size=\"large\"\r\n                @click=\"runAlgorithm\" \r\n                :loading=\"isLoading\"\r\n                :disabled=\"!canRun\"\r\n                class=\"run-button\">\r\n                <i class=\"el-icon-video-play\" v-if=\"!isLoading\"></i>\r\n                {{ isLoading ? '算法运行中...' : '开始运行算法' }}\r\n              </el-button>\r\n              <div class=\"run-info\" v-if=\"selectedAlgorithm\">\r\n                <small>\r\n                  <i class=\"el-icon-info\"></i>\r\n                  预计运行时间：{{ getEstimatedTime() }}\r\n                </small>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </el-card>\r\n      </div>\r\n  \r\n      <!-- 运行状态区域 -->\r\n      <div v-if=\"progressVisible\" class=\"progress-section\">\r\n        <el-card class=\"progress-card\" shadow=\"never\">\r\n          <div class=\"progress-header\">\r\n            <h3 class=\"progress-title\">\r\n              <i class=\"el-icon-loading\" v-if=\"isLoading\" style=\"animation: rotate 1s linear infinite;\"></i>\r\n              <i class=\"el-icon-check\" v-else style=\"color: #67c23a;\"></i>\r\n              {{ isLoading ? '算法运行中' : '算法运行完成' }}\r\n            </h3>\r\n            <div class=\"progress-info\">\r\n              <span class=\"current-algorithm\">{{ getAlgorithmInfo(selectedAlgorithm).name }}</span>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"progress-content\">\r\n            <el-progress \r\n              :percentage=\"progressPercentage\" \r\n              :status=\"progressStatus\"\r\n              :stroke-width=\"8\"\r\n              :show-text=\"false\"\r\n              class=\"main-progress\">\r\n            </el-progress>\r\n            <div class=\"progress-details\">\r\n              <span class=\"progress-text\">当前进度：{{ progressPercentage.toFixed(1) }}%</span>\r\n              <span class=\"progress-time\" v-if=\"startTime\">\r\n                运行时间：{{ getRunningTime() }}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </el-card>\r\n      </div>\r\n  \r\n      <!-- 结果展示区域 -->\r\n      <div v-if=\"result\" class=\"result-section\">\r\n        <el-row :gutter=\"20\">\r\n          <!-- 调度结果 -->\r\n          <el-col :xs=\"24\" :lg=\"12\">\r\n            <el-card class=\"result-card\" shadow=\"never\">\r\n              <div class=\"result-header\">\r\n                <h3 class=\"result-title\">\r\n                  <i class=\"el-icon-s-data\"></i>\r\n                  调度结果\r\n                </h3>\r\n                <el-button size=\"small\" type=\"primary\" @click=\"exportResult\">\r\n                  <i class=\"el-icon-download\"></i>\r\n                  导出结果\r\n                </el-button>\r\n              </div>\r\n              <div class=\"result-content\">\r\n                <pre class=\"schedule-result\">{{ result.result.schedule_details }}</pre>\r\n              </div>\r\n            </el-card>\r\n          </el-col>\r\n  \r\n          <!-- 甘特图展示区域 -->\r\n          <el-col :span=\"24\" v-if=\"result.result.gantt_charts\">\r\n            <el-card class=\"result-card charts-card\" shadow=\"never\">\r\n              <div class=\"result-header\">\r\n                <h3 class=\"result-title\">\r\n                  <i class=\"el-icon-picture\"></i>\r\n                  多视角甘特图分析\r\n                </h3>\r\n                <el-button size=\"small\" type=\"success\" @click=\"downloadAllCharts\">\r\n                  <i class=\"el-icon-download\"></i>\r\n                  下载所有图片\r\n                </el-button>\r\n              </div>\r\n              \r\n              <!-- 交互式甘特图标签页 -->\r\n              <el-tabs v-model=\"activeChartTab\" class=\"chart-tabs\" v-if=\"scheduleData.length > 0\">\r\n                <!-- 工序视角 -->\r\n                <el-tab-pane label=\"工序视角\" name=\"process\">\r\n                  <div class=\"chart-tab-content\">\r\n                    <div class=\"chart-info\">\r\n                      <i class=\"el-icon-info\"></i>\r\n                      工序视角甘特图 - 按工序顺序显示调度方案（可缩放、点击查看详情）\r\n                    </div>\r\n                    <div class=\"chart-container\">\r\n                      <GanttChart\r\n                        :schedule-data=\"scheduleData\"\r\n                        :view-mode=\"'process'\"\r\n                        :makespan=\"makespan\"\r\n                        @task-click=\"showTaskDetail\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </el-tab-pane>\r\n\r\n                <!-- 设备视角 -->\r\n                <el-tab-pane label=\"设备视角\" name=\"workpoint\">\r\n                  <div class=\"chart-tab-content\">\r\n                    <div class=\"chart-info\">\r\n                      <i class=\"el-icon-info\"></i>\r\n                      设备视角甘特图 - 按设备分组显示任务分配（可缩放、点击查看详情）\r\n                    </div>\r\n                    <div class=\"chart-container\">\r\n                      <GanttChart\r\n                        :schedule-data=\"scheduleData\"\r\n                        :view-mode=\"'workpoint'\"\r\n                        :makespan=\"makespan\"\r\n                        @task-click=\"showTaskDetail\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </el-tab-pane>\r\n\r\n                <!-- 团队视角 -->\r\n                <el-tab-pane label=\"团队视角\" name=\"team\">\r\n                  <div class=\"chart-tab-content\">\r\n                    <div class=\"chart-info\">\r\n                      <i class=\"el-icon-info\"></i>\r\n                      团队视角甘特图 - 按团队分组显示工作负载（可缩放、点击查看详情）\r\n                    </div>\r\n                    <div class=\"chart-container\">\r\n                      <GanttChart\r\n                        :schedule-data=\"scheduleData\"\r\n                        :view-mode=\"'team'\"\r\n                        :makespan=\"makespan\"\r\n                        @task-click=\"showTaskDetail\"\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </el-tab-pane>\r\n              </el-tabs>\r\n              \r\n              <!-- 如果没有调度数据，显示提示 -->\r\n              <div v-else class=\"no-data-hint\">\r\n                <i class=\"el-icon-info\"></i>\r\n                <p>暂无调度数据，请先运行算法</p>\r\n              </div>\r\n            </el-card>\r\n          </el-col>\r\n        </el-row>\r\n  \r\n        <!-- 运行历史 -->\r\n        <el-card class=\"history-card\" shadow=\"never\">\r\n          <div class=\"history-header\">\r\n            <h3 class=\"history-title\">\r\n              <i class=\"el-icon-time\"></i>\r\n              运行历史\r\n            </h3>\r\n            <el-button size=\"small\" @click=\"clearHistory\">\r\n              <i class=\"el-icon-delete\"></i>\r\n              清空历史\r\n            </el-button>\r\n          </div>\r\n          <div class=\"history-content\">\r\n            <el-timeline>\r\n              <el-timeline-item \r\n                v-for=\"(record, index) in runHistory\" \r\n                :key=\"index\"\r\n                :timestamp=\"record.timestamp\"\r\n                placement=\"top\">\r\n                <el-card>\r\n                  <div class=\"history-item\">\r\n                    <div class=\"history-info\">\r\n                      <span class=\"algorithm-name\">{{ record.algorithm }}</span>\r\n                      <span class=\"run-status\" :class=\"record.status\">{{ record.statusText }}</span>\r\n                    </div>\r\n                    <div class=\"history-params\">\r\n                      <small>参数：{{ record.params }}</small>\r\n                    </div>\r\n                  </div>\r\n                </el-card>\r\n              </el-timeline-item>\r\n            </el-timeline>\r\n          </div>\r\n        </el-card>\r\n      </div>\r\n      \r\n      <!-- 任务详情弹窗 -->\r\n      <el-dialog\r\n        title=\"任务详情\"\r\n        :visible.sync=\"taskDetailVisible\"\r\n        width=\"500px\"\r\n        :close-on-click-modal=\"true\">\r\n        <div v-if=\"selectedTask\" class=\"task-detail-content\">\r\n          <el-descriptions :column=\"1\" border>\r\n            <el-descriptions-item label=\"任务名称\">\r\n              <strong>{{ selectedTask.name }}</strong>\r\n            </el-descriptions-item>\r\n            <el-descriptions-item label=\"设备\">\r\n              {{ selectedTask.workpoint_name || '未知设备' }}\r\n            </el-descriptions-item>\r\n            <el-descriptions-item label=\"团队\">\r\n              {{ getTeamName(selectedTask.team) }}\r\n            </el-descriptions-item>\r\n            <el-descriptions-item label=\"开始时间\">\r\n              {{ formatTimeUnit(selectedTask.start) }}\r\n            </el-descriptions-item>\r\n            <el-descriptions-item label=\"结束时间\">\r\n              {{ formatTimeUnit(selectedTask.end) }}\r\n            </el-descriptions-item>\r\n            <el-descriptions-item label=\"持续时间\">\r\n              <el-tag type=\"success\">\r\n                {{ (selectedTask.end - selectedTask.start).toFixed(2) }} 小时\r\n              </el-tag>\r\n            </el-descriptions-item>\r\n            <el-descriptions-item label=\"分配人数\">\r\n              <el-tag type=\"primary\">\r\n                {{ selectedTask.workers }} 人\r\n              </el-tag>\r\n            </el-descriptions-item>\r\n            <el-descriptions-item label=\"工序顺序\">\r\n              第 {{ selectedTask.order }} 阶段\r\n            </el-descriptions-item>\r\n          </el-descriptions>\r\n        </div>\r\n        <span slot=\"footer\" class=\"dialog-footer\">\r\n          <el-button @click=\"taskDetailVisible = false\">关闭</el-button>\r\n        </span>\r\n      </el-dialog>\r\n  \r\n    </div>\r\n  </template>\r\n  \r\n<script>\r\nimport GanttChart from './GanttChart.vue';\r\n\r\nexport default {\r\n  name: \"AlgorithmTest\",\r\n  components: {\r\n    GanttChart\r\n  },\r\n  data() {\r\n    return {\r\n      selectedAlgorithm: \"ddpg\",\r\n      inputData: {\r\n        max_episodes: 100,\r\n        params: \"10,5,8,6,7,9,6,7,6,7,7,7,4,7,5\",\r\n      },\r\n      result: null,\r\n      isLoading: false,\r\n      progressVisible: false,\r\n      progressPercentage: 0,\r\n      progressStatus: null,\r\n      startTime: null,\r\n      activeChartTab: 'process',\r\n      totalRuns: 0,\r\n      runHistory: [],\r\n      \r\n      // 新增：调度数据（用于ECharts甘特图）\r\n      scheduleData: [],\r\n      makespan: 0,\r\n      \r\n      // 新增：任务详情弹窗\r\n      taskDetailVisible: false,\r\n      selectedTask: null,\r\n        algorithmInfo: {\r\n          ddpg: {\r\n            name: 'DDPG - 深度确定性策略梯度',\r\n            description: '基于Actor-Critic架构的深度强化学习算法，适用于连续动作空间的调度优化问题。',\r\n            features: ['连续控制', '策略梯度', '经验回放', '目标网络']\r\n          },\r\n          ddqn: {\r\n            name: 'DDQN - 双深度Q网络',\r\n            description: '改进的深度Q学习算法，通过双网络结构减少过估计问题，提高调度决策的稳定性。',\r\n            features: ['双网络', 'Q学习', '离散动作', '经验回放']\r\n          },\r\n          ga: {\r\n            name: 'CGA - 改进遗传算法',\r\n            description: '基于自然选择和遗传机制的优化算法，通过进化过程寻找最优调度方案。',\r\n            features: ['全局搜索', '并行优化', '自适应变异', '精英保留']\r\n          }\r\n        }\r\n      };\r\n    },\r\n    computed: {\r\n      canRun() {\r\n        if (!this.selectedAlgorithm) return false;\r\n        if (this.selectedAlgorithm === 'ddpg') {\r\n          return this.inputData.max_episodes > 0;\r\n        }\r\n        if (this.selectedAlgorithm === 'ddqn' || this.selectedAlgorithm === 'ga') {\r\n          return this.inputData.params.trim() !== '';\r\n        }\r\n        return false;\r\n      }\r\n    },\r\n    methods: {\r\n      getAlgorithmInfo(algorithm) {\r\n        return this.algorithmInfo[algorithm] || {};\r\n      },\r\n      getEstimatedTime() {\r\n        if (this.selectedAlgorithm === 'ddpg') {\r\n          const episodes = this.inputData.max_episodes || 100;\r\n          return `约 ${Math.ceil(episodes / 20)} 分钟`;\r\n        }\r\n        return '约 20 秒';\r\n      },\r\n      getRunningTime() {\r\n        if (!this.startTime) return '0秒';\r\n        const elapsed = Math.floor((Date.now() - this.startTime) / 1000);\r\n        return `${elapsed}秒`;\r\n      },\r\n      onAlgorithmChange() {\r\n        this.result = null;\r\n        this.progressVisible = false;\r\n        this.progressPercentage = 0;\r\n      },\r\n      async runAlgorithm() {\r\n        if (!this.selectedAlgorithm) {\r\n          this.$message.error(\"请选择算法\");\r\n          return;\r\n        }\r\n  \r\n        // 验证输入\r\n        if (this.selectedAlgorithm === 'ddpg' && !this.inputData.max_episodes) {\r\n          this.$message.error(\"请输入训练的最大迭代次数\");\r\n          return;\r\n        }\r\n        if ((this.selectedAlgorithm === 'ddqn' || this.selectedAlgorithm === 'ga') && !this.inputData.params) {\r\n          this.$message.error(\"请输入参数\");\r\n          return;\r\n        }\r\n  \r\n        this.isLoading = true;\r\n        this.progressVisible = true;\r\n        this.progressPercentage = 0;\r\n        this.progressStatus = null;\r\n        this.startTime = Date.now();\r\n  \r\n        try {\r\n          let requestData = {};\r\n          let apiUrl = \"\";\r\n  \r\n          if (this.selectedAlgorithm === 'ddpg') {\r\n            apiUrl = \"http://localhost:5000/run_rl\";\r\n            requestData = {\r\n              algorithm_name: this.selectedAlgorithm,\r\n              max_episodes: parseInt(this.inputData.max_episodes),\r\n            };\r\n          } else if (this.selectedAlgorithm === 'ddqn') {\r\n            apiUrl = \"http://localhost:5001/run_ddqn\";\r\n            requestData = {\r\n              algorithm_name: this.selectedAlgorithm,\r\n              params: this.inputData.params.split(\",\").map(Number),\r\n            };\r\n          } else if (this.selectedAlgorithm === 'ga') {\r\n            apiUrl = \"http://localhost:5002/run_ga\";\r\n            requestData = {\r\n              algorithm_name: this.selectedAlgorithm,\r\n              params: this.inputData.params.split(\",\").map(Number),\r\n            };\r\n          }\r\n  \r\n          // 验证数字输入\r\n          if (this.selectedAlgorithm === 'ddpg' && isNaN(requestData.max_episodes)) {\r\n            this.$message.error(\"请输入有效的整数\");\r\n            return;\r\n          }\r\n          if ((this.selectedAlgorithm === 'ddqn' || this.selectedAlgorithm === 'ga') && requestData.params.some(isNaN)) {\r\n            this.$message.error(\"请输入有效的数字\");\r\n            return;\r\n          }\r\n  \r\n          // 模拟进度更新\r\n          const progressInterval = setInterval(() => {\r\n            if (this.progressPercentage < 90) {\r\n              this.progressPercentage += Math.random() * 10;\r\n            }\r\n          }, 1000);\r\n  \r\n          const response = await this.$axios.post(apiUrl, requestData, {\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          });\r\n  \r\n          clearInterval(progressInterval);\r\n          this.progressPercentage = 100;\r\n          this.progressStatus = \"success\";\r\n  \r\n          this.result = response.data;\r\n          \r\n          // 新增：提取调度数据用于ECharts甘特图\r\n          if (response.data.result && response.data.result.schedule_data) {\r\n            this.scheduleData = response.data.result.schedule_data;\r\n            this.makespan = response.data.result.makespan || 0;\r\n            console.log('调度数据加载成功:', this.scheduleData.length, '个任务，完工时间:', this.makespan);\r\n          }\r\n          \r\n          this.totalRuns++;\r\n  \r\n          // 添加到历史记录\r\n          this.runHistory.unshift({\r\n            timestamp: new Date().toLocaleString(),\r\n            algorithm: this.getAlgorithmInfo(this.selectedAlgorithm).name,\r\n            status: 'success',\r\n            statusText: '运行成功',\r\n            params: this.selectedAlgorithm === 'ddpg' ? \r\n              `迭代次数: ${this.inputData.max_episodes}` : \r\n              `参数: ${this.inputData.params}`\r\n          });\r\n  \r\n          // 保留最近10条记录\r\n          if (this.runHistory.length > 10) {\r\n            this.runHistory = this.runHistory.slice(0, 10);\r\n          }\r\n  \r\n          this.$message.success(\"算法运行完成！\");\r\n  \r\n        } catch (error) {\r\n          console.error(\"调用算法失败:\", error);\r\n          this.$message.error(\"调用算法失败，请检查输入或后端服务\");\r\n          this.progressStatus = \"exception\";\r\n          \r\n          // 添加失败记录\r\n          this.runHistory.unshift({\r\n            timestamp: new Date().toLocaleString(),\r\n            algorithm: this.getAlgorithmInfo(this.selectedAlgorithm).name,\r\n            status: 'error',\r\n            statusText: '运行失败',\r\n            params: this.selectedAlgorithm === 'ddpg' ? \r\n              `迭代次数: ${this.inputData.max_episodes}` : \r\n              `参数: ${this.inputData.params}`\r\n          });\r\n  \r\n        } finally {\r\n          this.isLoading = false;\r\n        }\r\n      },\r\n      exportResult() {\r\n        if (!this.result) return;\r\n        \r\n        const content = this.result.result.schedule_details;\r\n        const blob = new Blob([content], { type: 'text/plain' });\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = `调度结果_${this.selectedAlgorithm}_${new Date().getTime()}.txt`;\r\n        a.click();\r\n        window.URL.revokeObjectURL(url);\r\n        \r\n        this.$message.success('结果导出成功！');\r\n      },\r\n      downloadChart(chartType) {\r\n        if (!this.result || !this.result.result.gantt_charts || !this.result.result.gantt_charts[chartType]) return;\r\n        \r\n        const chartNames = {\r\n          'process': '工序视角甘特图',\r\n          'workpoint': '工作点视角甘特图', \r\n          'team': '团队视角甘特图'\r\n        };\r\n        \r\n        const link = document.createElement('a');\r\n        link.href = 'data:image/png;base64,' + this.result.result.gantt_charts[chartType];\r\n        link.download = `${chartNames[chartType]}_${this.selectedAlgorithm}_${new Date().getTime()}.png`;\r\n        link.click();\r\n        \r\n        this.$message.success(`${chartNames[chartType]}下载成功！`);\r\n      },\r\n      downloadAllCharts() {\r\n        if (!this.result || !this.result.result.gantt_charts) return;\r\n        \r\n        const charts = this.result.result.gantt_charts;\r\n        const chartNames = {\r\n          'process': '工序视角甘特图',\r\n          'workpoint': '工作点视角甘特图',\r\n          'team': '团队视角甘特图'\r\n        };\r\n        \r\n        let downloadCount = 0;\r\n        Object.keys(charts).forEach(chartType => {\r\n          if (charts[chartType]) {\r\n            setTimeout(() => {\r\n              const link = document.createElement('a');\r\n              link.href = 'data:image/png;base64,' + charts[chartType];\r\n              link.download = `${chartNames[chartType]}_${this.selectedAlgorithm}_${new Date().getTime()}.png`;\r\n              link.click();\r\n              downloadCount++;\r\n            }, downloadCount * 500); // 间隔500ms下载，避免浏览器阻止\r\n          }\r\n        });\r\n        \r\n        this.$message.success('所有甘特图开始下载！');\r\n      },\r\n      clearHistory() {\r\n        this.$confirm('确定要清空运行历史吗？', '确认操作', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning',\r\n        }).then(() => {\r\n          this.runHistory = [];\r\n          this.$message.success('历史记录已清空');\r\n        });\r\n      },\r\n      \r\n      /**\r\n       * 显示任务详情弹窗\r\n       */\r\n      showTaskDetail(task) {\r\n        this.selectedTask = task;\r\n        this.taskDetailVisible = true;\r\n      },\r\n      \r\n      /**\r\n       * 时间单位转显示字符串\r\n       */\r\n      formatTimeUnit(timeUnit) {\r\n        const baseDate = new Date('2024-01-01');\r\n        const days = timeUnit / 10; // 每10单位 = 1天\r\n        baseDate.setDate(baseDate.getDate() + days);\r\n        return baseDate.toLocaleDateString('zh-CN', {\r\n          year: 'numeric',\r\n          month: 'long',\r\n          day: 'numeric',\r\n          hour: '2-digit',\r\n          minute: '2-digit'\r\n        });\r\n      },\r\n      \r\n      /**\r\n       * 获取团队中文名称\r\n       */\r\n      getTeamName(team) {\r\n        const teamNames = {\r\n          'team1': '团队1',\r\n          'team2': '团队2',\r\n          'team3': '团队3',\r\n          'team4': '团队4',\r\n          'team5': '团队5',\r\n          'team6': '团队6'\r\n        };\r\n        return teamNames[team] || team;\r\n      }\r\n    },\r\n  };\r\n  </script>\r\n  \r\n  <style scoped>\r\n  .algorithm-container {\r\n    padding: 0;\r\n    background: transparent;\r\n  }\r\n  \r\n  /* 页面头部 */\r\n  .page-header {\r\n    margin-bottom: 24px;\r\n  }\r\n  \r\n  .header-content {\r\n    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\r\n    border-radius: 16px;\r\n    padding: 32px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    color: white;\r\n  }\r\n  \r\n  .title-section {\r\n    flex: 1;\r\n  }\r\n  \r\n  .page-title {\r\n    margin: 0 0 12px 0;\r\n    font-size: 32px;\r\n    font-weight: 700;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 12px;\r\n  }\r\n  \r\n  .title-icon {\r\n    color: #ffd700;\r\n    font-size: 36px;\r\n    animation: pulse 2s ease-in-out infinite alternate;\r\n  }\r\n  \r\n  @keyframes pulse {\r\n    from { transform: scale(1); }\r\n    to { transform: scale(1.1); }\r\n  }\r\n  \r\n  @keyframes rotate {\r\n    from { transform: rotate(0deg); }\r\n    to { transform: rotate(360deg); }\r\n  }\r\n  \r\n  .page-subtitle {\r\n    margin: 0;\r\n    opacity: 0.9;\r\n    font-size: 16px;\r\n    line-height: 1.5;\r\n  }\r\n  \r\n  .header-stats {\r\n    display: flex;\r\n    gap: 32px;\r\n  }\r\n  \r\n  .stat-item {\r\n    text-align: center;\r\n  }\r\n  \r\n  .stat-value {\r\n    font-size: 36px;\r\n    font-weight: 700;\r\n    color: #ffd700;\r\n    line-height: 1;\r\n  }\r\n  \r\n  .stat-label {\r\n    font-size: 14px;\r\n    opacity: 0.8;\r\n    margin-top: 4px;\r\n  }\r\n  \r\n  /* 配置区域 */\r\n  .config-section {\r\n    margin-bottom: 24px;\r\n  }\r\n  \r\n  .config-card {\r\n    border: none;\r\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\r\n    border-radius: 12px;\r\n  }\r\n  \r\n  .config-header {\r\n    padding: 20px 24px;\r\n    border-bottom: 1px solid #ebeef5;\r\n  }\r\n  \r\n  .config-title {\r\n    margin: 0;\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: #303133;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .config-content {\r\n    padding: 24px;\r\n  }\r\n  \r\n  .config-row {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 24px;\r\n    margin-bottom: 24px;\r\n  }\r\n  \r\n  .config-item {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 12px;\r\n  }\r\n  \r\n  .config-label {\r\n    font-weight: 500;\r\n    color: #606266;\r\n    white-space: nowrap;\r\n  }\r\n  \r\n  .algorithm-select {\r\n    width: 300px;\r\n  }\r\n  \r\n  .algorithm-option {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .algorithm-option small {\r\n    color: #909399;\r\n    margin-left: auto;\r\n  }\r\n  \r\n  /* 算法描述 */\r\n  .algorithm-description {\r\n    margin-bottom: 24px;\r\n  }\r\n  \r\n  .description-card {\r\n    background: linear-gradient(135deg, #f8f9fa, #e9ecef);\r\n    border-radius: 12px;\r\n    padding: 20px;\r\n    border-left: 4px solid #667eea;\r\n  }\r\n  \r\n  .description-card h4 {\r\n    margin: 0 0 8px 0;\r\n    color: #303133;\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .description-card p {\r\n    margin: 0 0 12px 0;\r\n    color: #606266;\r\n    line-height: 1.6;\r\n  }\r\n  \r\n  .algorithm-features {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .feature-tag {\r\n    background: rgba(102, 126, 234, 0.1);\r\n    border-color: rgba(102, 126, 234, 0.3);\r\n    color: #667eea;\r\n  }\r\n  \r\n  /* 参数区域 */\r\n  .params-section {\r\n    margin-bottom: 32px;\r\n  }\r\n  \r\n  .param-group {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 8px;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .param-label {\r\n    font-weight: 500;\r\n    color: #606266;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 6px;\r\n  }\r\n  \r\n  .param-input {\r\n    width: 300px;\r\n  }\r\n  \r\n  .param-input-text {\r\n    width: 500px;\r\n  }\r\n  \r\n  .param-hint {\r\n    color: #909399;\r\n    font-size: 12px;\r\n  }\r\n  \r\n  /* 运行区域 */\r\n  .run-section {\r\n    text-align: center;\r\n    padding: 24px;\r\n    background: #f8f9fa;\r\n    border-radius: 12px;\r\n  }\r\n  \r\n  .run-button {\r\n    padding: 12px 32px;\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n    background: linear-gradient(135deg, #667eea, #764ba2);\r\n    border: none;\r\n    border-radius: 25px;\r\n    min-width: 200px;\r\n  }\r\n  \r\n  .run-button:hover {\r\n    background: linear-gradient(135deg, #5a67d8, #6b46c1);\r\n  }\r\n  \r\n  .run-info {\r\n    margin-top: 12px;\r\n    color: #909399;\r\n  }\r\n  \r\n  /* 进度区域 */\r\n  .progress-section {\r\n    margin-bottom: 24px;\r\n  }\r\n  \r\n  .progress-card {\r\n    border: none;\r\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\r\n    border-radius: 12px;\r\n  }\r\n  \r\n  .progress-header {\r\n    padding: 20px 24px;\r\n    border-bottom: 1px solid #ebeef5;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n  \r\n  .progress-title {\r\n    margin: 0;\r\n    font-size: 18px;\r\n    font-weight: 600;\r\n    color: #303133;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .current-algorithm {\r\n    background: linear-gradient(135deg, #667eea, #764ba2);\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    font-weight: 600;\r\n  }\r\n  \r\n  .progress-content {\r\n    padding: 24px;\r\n  }\r\n  \r\n  .main-progress {\r\n    margin-bottom: 16px;\r\n  }\r\n  \r\n  .progress-details {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    color: #606266;\r\n  }\r\n  \r\n  /* 结果区域 */\r\n  .result-section {\r\n    margin-bottom: 24px;\r\n  }\r\n  \r\n  .result-card {\r\n    border: none;\r\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\r\n    border-radius: 12px;\r\n    margin-bottom: 20px;\r\n  }\r\n  \r\n  .result-header {\r\n    padding: 20px 24px;\r\n    border-bottom: 1px solid #ebeef5;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n  \r\n  .result-title {\r\n    margin: 0;\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n    color: #303133;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .result-content {\r\n    padding: 24px;\r\n  }\r\n  \r\n  .schedule-result {\r\n    background: #f8f9fa;\r\n    padding: 20px;\r\n    border-radius: 8px;\r\n    white-space: pre;\r\n    font-family: 'Courier New', monospace;\r\n    line-height: 1.6;\r\n    overflow-x: auto;\r\n    border: 1px solid #e4e7ed;\r\n    max-height: 400px;\r\n    overflow-y: auto;\r\n  }\r\n  \r\n  /* 甘特图 */\r\n  .chart-container {\r\n    position: relative;\r\n    text-align: center;\r\n  }\r\n  \r\n  .gantt-chart {\r\n    max-width: 100%;\r\n    height: auto;\r\n    border-radius: 8px;\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  }\r\n  \r\n  /* 历史记录 */\r\n  .history-card {\r\n    border: none;\r\n    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);\r\n    border-radius: 12px;\r\n  }\r\n  \r\n  .history-header {\r\n    padding: 20px 24px;\r\n    border-bottom: 1px solid #ebeef5;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n  \r\n  .history-title {\r\n    margin: 0;\r\n    font-size: 16px;\r\n    font-weight: 600;\r\n    color: #303133;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .history-content {\r\n    padding: 24px;\r\n    max-height: 400px;\r\n    overflow-y: auto;\r\n  }\r\n  \r\n  .history-item {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 4px;\r\n  }\r\n  \r\n  .history-info {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  }\r\n  \r\n  .algorithm-name {\r\n    font-weight: 500;\r\n    color: #303133;\r\n  }\r\n  \r\n  .run-status {\r\n    padding: 2px 8px;\r\n    border-radius: 4px;\r\n    font-size: 12px;\r\n  }\r\n\r\n  .run-status.success {\r\n    background: #f0f9ff;\r\n    color: #67c23a;\r\n  }\r\n  \r\n  .run-status.error {\r\n    background: #fef0f0;\r\n    color: #f56c6c;\r\n  }\r\n  \r\n  .history-params {\r\n    color: #909399;\r\n  }\r\n  \r\n  /* 响应式设计 */\r\n  @media (max-width: 768px) {\r\n    .header-content {\r\n      flex-direction: column;\r\n      gap: 20px;\r\n      text-align: center;\r\n    }\r\n    \r\n    .header-stats {\r\n      gap: 20px;\r\n    }\r\n    \r\n    .config-row {\r\n      flex-direction: column;\r\n    }\r\n    \r\n    .algorithm-select,\r\n    .param-input,\r\n    .param-input-text {\r\n      width: 100%;\r\n    }\r\n    \r\n    .progress-details {\r\n      flex-direction: column;\r\n      gap: 8px;\r\n    }\r\n    \r\n    .result-header {\r\n      flex-direction: column;\r\n      gap: 12px;\r\n      align-items: flex-start;\r\n    }\r\n  }\r\n  \r\n  /* 多视角甘特图样式 */\r\n  .charts-card {\r\n    margin-top: 20px;\r\n  }\r\n  \r\n  .chart-tabs {\r\n    margin-top: 20px;\r\n  }\r\n  \r\n  .chart-tab-content {\r\n    padding: 20px 0;\r\n  }\r\n  \r\n  .chart-info {\r\n    background: #f0f9ff;\r\n    border: 1px solid #bae6fd;\r\n    border-radius: 8px;\r\n    padding: 12px 16px;\r\n    margin-bottom: 20px;\r\n    color: #0369a1;\r\n    font-size: 14px;\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 8px;\r\n  }\r\n  \r\n  .chart-info i {\r\n    font-size: 16px;\r\n  }\r\n  \r\n  .chart-actions {\r\n    text-align: center;\r\n    padding: 12px 0;\r\n    border-top: 1px solid #ebeef5;\r\n    background: #fafafa;\r\n    border-radius: 0 0 8px 8px;\r\n  }\r\n  \r\n  /* 无数据提示 */\r\n  .no-data-hint {\r\n    text-align: center;\r\n    padding: 60px 20px;\r\n    color: #909399;\r\n  }\r\n  \r\n  .no-data-hint i {\r\n    font-size: 48px;\r\n    color: #dcdfe6;\r\n    margin-bottom: 16px;\r\n  }\r\n  \r\n  .no-data-hint p {\r\n    font-size: 16px;\r\n    margin: 0;\r\n  }\r\n  \r\n  /* 任务详情弹窗 */\r\n  .task-detail-content {\r\n    padding: 10px 0;\r\n  }\r\n  \r\n  .task-detail-content >>> .el-descriptions-item__label {\r\n    font-weight: 600;\r\n    color: #606266;\r\n    width: 120px;\r\n  }\r\n  \r\n  .task-detail-content >>> .el-descriptions-item__content {\r\n    color: #303133;\r\n  }\r\n  \r\n  /* 图表容器高度调整 */\r\n  .chart-tab-content {\r\n    padding: 20px 0;\r\n    min-height: 650px;\r\n  }\r\n  \r\n  </style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}