{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.for-each.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport gantt from 'dhtmlx-gantt';\nimport 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\nexport default {\n  name: 'GanttTest',\n  data() {\n    return {\n      viewMode: 'workpoint',\n      // workpoint | team | process\n      makespan: 0,\n      taskCount: 0,\n      // 新增：历史结果列表\n      scheduleResultList: [],\n      // 新增：当前选中的表名\n      selectedTableName: '',\n      // 新增：加载状态\n      loading: false,\n      // 修改：testScheduleData 初始为空，从数据库加载\n      testScheduleData: [],\n      // 团队颜色映射\n      teamColors: {\n        'team1': '#FF6B6B',\n        'team2': '#4ECDC4',\n        'team3': '#45B7D1',\n        'team4': '#FFA07A',\n        'team5': '#98D8C8',\n        'team6': '#F7DC6F'\n      },\n      // 团队名称\n      teamNames: {\n        'team1': '团队1',\n        'team2': '团队2',\n        'team3': '团队3',\n        'team4': '团队4',\n        'team5': '团队5',\n        'team6': '团队6'\n      }\n    };\n  },\n  mounted() {\n    this.initGantt();\n    // 修改：从数据库加载历史结果\n    this.loadScheduleResultList();\n  },\n  beforeDestroy() {\n    if (gantt.$initialized) {\n      gantt.clearAll();\n    }\n  },\n  methods: {\n    /**\n     * 加载调度结果列表\n     */\n    async loadScheduleResultList() {\n      this.loading = true;\n      try {\n        console.log('📋 开始加载调度结果列表...');\n        const response = await this.$axios.get(this.$httpUrl + '/schedule_results/list?limit=50');\n\n        // 检查响应数据是否存在\n        if (!response || !response.data) {\n          this.$message.error('服务器响应异常');\n          return;\n        }\n        if (response.data.code === 200) {\n          this.scheduleResultList = response.data.data || [];\n          console.log(`✅ 加载成功，共 ${this.scheduleResultList.length} 个调度结果`);\n\n          // 默认选择最新的\n          if (this.scheduleResultList.length > 0) {\n            this.selectedTableName = this.scheduleResultList[0].tableName;\n            await this.loadScheduleData(this.selectedTableName);\n          } else {\n            this.$message.warning('暂无调度结果，请先运行算法');\n          }\n        } else {\n          const errorMsg = response.data.msg || '未知错误';\n          this.$message.error('加载调度结果列表失败: ' + errorMsg);\n        }\n      } catch (error) {\n        // 详细的错误日志\n        if (error.response) {\n          // 服务器返回了错误状态码\n          console.error('服务器错误:', error.response.status, error.response.data);\n          this.$message.error(`服务器错误: ${error.response.status}`);\n        } else if (error.request) {\n          // 请求已发送但没有收到响应\n          console.error('网络错误:', error.request);\n          this.$message.error('网络错误，请检查后端服务是否启动');\n        } else {\n          // 其他错误\n          console.error('未知错误:', error.message);\n          this.$message.error('加载失败: ' + error.message);\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    /**\n     * 加载指定表的调度数据\n     */\n    async loadScheduleData(tableName) {\n      if (!tableName) {\n        console.warn('⚠️  表名为空，无法加载数据');\n        return;\n      }\n      this.loading = true;\n      try {\n        console.log(`📖 加载调度数据: ${tableName}`);\n        const response = await this.$axios.get(`/schedule_results/${tableName}`);\n\n        // 检查响应数据是否存在\n        if (!response || !response.data) {\n          this.$message.error('服务器响应异常');\n          return;\n        }\n        if (response.data.code === 200) {\n          this.testScheduleData = response.data.data || [];\n          this.taskCount = this.testScheduleData.length;\n\n          // 计算完工时间\n          if (this.testScheduleData.length > 0) {\n            this.makespan = Math.max(...this.testScheduleData.map(t => t.end));\n          } else {\n            this.makespan = 0;\n          }\n          console.log(`✅ 加载成功: ${this.taskCount} 个任务, 完工时间: ${this.makespan.toFixed(2)}h`);\n\n          // 重新加载甘特图\n          this.loadData();\n          this.$message.success(`调度数据加载成功 (${this.taskCount}个任务)`);\n        } else {\n          const errorMsg = response.data.msg || '未知错误';\n          this.$message.error('加载调度数据失败: ' + errorMsg);\n        }\n      } catch (error) {\n        // 详细的错误日志\n        if (error.response) {\n          console.error('服务器错误:', error.response.status, error.response.data);\n          this.$message.error(`服务器错误: ${error.response.status}`);\n        } else if (error.request) {\n          console.error('网络错误:', error.request);\n          this.$message.error('网络错误，请检查后端服务是否启动');\n        } else {\n          console.error('未知错误:', error.message);\n          this.$message.error('加载失败: ' + error.message);\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    /**\n     * 处理下拉框选择变化\n     */\n    handleTableChange(tableName) {\n      console.log(`🔄 切换调度结果: ${tableName}`);\n      this.loadScheduleData(tableName);\n    },\n    /**\n     * 刷新调度结果列表\n     */\n    refreshScheduleList() {\n      console.log('🔄 刷新调度结果列表');\n      this.loadScheduleResultList();\n    },\n    /**\n     * 初始化DHTMLX Gantt\n     */\n    initGantt() {\n      // 基础配置\n      gantt.config.date_format = '%Y-%m-%d %H:%i';\n      gantt.config.xml_date = '%Y-%m-%d %H:%i';\n      gantt.config.scale_unit = 'day';\n      gantt.config.date_scale = '%Y-%m-%d';\n      gantt.config.subscales = [{\n        unit: 'hour',\n        step: 12,\n        date: '%H:%i'\n      }];\n\n      // 列配置\n      gantt.config.columns = [{\n        name: 'text',\n        label: '任务名称',\n        width: 200,\n        tree: true\n      }, {\n        name: 'start_date',\n        label: '开始时间',\n        width: 100,\n        align: 'center'\n      }, {\n        name: 'duration',\n        label: '持续时间',\n        width: 80,\n        align: 'center'\n      }];\n\n      // 工具提示配置\n      gantt.config.tooltip_hide_timeout = 1000;\n      gantt.templates.tooltip_text = (start, end, task) => {\n        if (task.type === 'project') return '';\n        const duration = ((task.end_date - task.start_date) / (1000 * 60 * 60)).toFixed(1);\n        return `\n          <div style=\"padding: 10px; min-width: 200px;\">\n            <strong style=\"font-size: 14px;\">${task.text}</strong><br/>\n            <hr style=\"margin: 5px 0; border: none; border-top: 1px solid #ddd;\"/>\n            <div style=\"margin: 5px 0;\">\n              <span style=\"color: #666;\">开始时间：</span>\n              <strong>${this.formatDate(task.start_date)}</strong>\n            </div>\n            <div style=\"margin: 5px 0;\">\n              <span style=\"color: #666;\">结束时间：</span>\n              <strong>${this.formatDate(task.end_date)}</strong>\n            </div>\n            <div style=\"margin: 5px 0;\">\n              <span style=\"color: #666;\">持续时间：</span>\n              <strong>${duration}小时</strong>\n            </div>\n            <div style=\"margin: 5px 0;\">\n              <span style=\"color: #666;\">团队：</span>\n              <strong>${task.teamName || ''}</strong>\n            </div>\n            <div style=\"margin: 5px 0;\">\n              <span style=\"color: #666;\">工人数：</span>\n              <strong>${task.workers || 0}人</strong>\n            </div>\n          </div>\n        `;\n      };\n\n      // 任务颜色配置\n      gantt.templates.task_class = (start, end, task) => {\n        if (task.type === 'project') return 'gantt_project';\n        return `gantt_task_${task.team}`;\n      };\n\n      // 初始化\n      gantt.init(this.$refs.ganttContainer);\n      console.log('✅ DHTMLX Gantt 初始化完成');\n    },\n    /**\n     * 加载数据\n     */\n    loadData() {\n      let ganttData;\n      switch (this.viewMode) {\n        case 'workpoint':\n          ganttData = this.prepareWorkpointView();\n          break;\n        case 'team':\n          ganttData = this.prepareTeamView();\n          break;\n        case 'process':\n          ganttData = this.prepareProcessView();\n          break;\n        default:\n          ganttData = this.prepareWorkpointView();\n      }\n      gantt.clearAll();\n      gantt.parse(ganttData);\n      console.log(`✅ 加载${this.viewMode}视角数据，共${ganttData.data.length}条`);\n    },\n    /**\n     * 时间单位转日期\n     */\n    timeUnitToDate(timeUnit) {\n      const baseDate = new Date('2024-01-01T00:00:00');\n      const hours = timeUnit;\n      baseDate.setHours(baseDate.getHours() + hours);\n      return baseDate;\n    },\n    /**\n     * 格式化日期\n     */\n    formatDate(date) {\n      if (typeof date === 'string') {\n        date = new Date(date);\n      }\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    /**\n     * 检测并行任务（复用之前的逻辑）\n     */\n    detectParallelTasks(tasks) {\n      if (!tasks || tasks.length === 0) return [];\n      const sorted = [...tasks].sort((a, b) => a.start - b.start);\n      const layers = [];\n      const result = [];\n      sorted.forEach(task => {\n        let layerIndex = layers.findIndex(endTime => task.start >= endTime);\n        if (layerIndex === -1) {\n          layerIndex = layers.length;\n          layers.push(task.end);\n        } else {\n          layers[layerIndex] = task.end;\n        }\n        result.push({\n          ...task,\n          layer: layerIndex,\n          totalLayers: 0\n        });\n      });\n      const maxLayer = Math.max(...result.map(t => t.layer));\n      result.forEach(t => t.totalLayers = maxLayer + 1);\n      return result;\n    },\n    /**\n     * 准备设备视角数据\n     */\n    prepareWorkpointView() {\n      const data = [];\n      const links = [];\n\n      // 按设备分组\n      const grouped = {};\n      this.testScheduleData.forEach(task => {\n        const wpId = task.workpoint_id;\n        if (!grouped[wpId]) {\n          grouped[wpId] = [];\n        }\n        grouped[wpId].push(task);\n      });\n\n      // 生成DHTMLX数据\n      Object.keys(grouped).sort().forEach(wpId => {\n        const wpTasks = grouped[wpId];\n        const wpName = wpTasks[0].workpoint_name;\n\n        // 添加父节点（设备）\n        data.push({\n          id: wpId,\n          text: wpName,\n          type: 'project',\n          open: true\n        });\n\n        // 检测并行任务\n        const layered = this.detectParallelTasks(wpTasks);\n\n        // 添加任务\n        layered.forEach(task => {\n          data.push({\n            id: `task_${task.id}`,\n            text: task.name,\n            start_date: this.formatGanttDate(this.timeUnitToDate(task.start)),\n            end_date: this.formatGanttDate(this.timeUnitToDate(task.end)),\n            duration: ((task.end - task.start) / 24).toFixed(1),\n            // 转换为天\n            parent: wpId,\n            team: task.team,\n            teamName: this.teamNames[task.team],\n            workers: task.workers,\n            layer: task.layer,\n            type: 'task'\n          });\n        });\n      });\n      return {\n        data,\n        links\n      };\n    },\n    /**\n     * 准备团队视角数据\n     */\n    prepareTeamView() {\n      const data = [];\n      const links = [];\n\n      // 按团队分组\n      const grouped = {};\n      this.testScheduleData.forEach(task => {\n        const team = task.team;\n        if (!grouped[team]) {\n          grouped[team] = [];\n        }\n        grouped[team].push(task);\n      });\n\n      // 生成DHTMLX数据\n      Object.keys(grouped).sort().forEach(team => {\n        const teamTasks = grouped[team];\n        const teamName = this.teamNames[team];\n\n        // 添加父节点（团队）\n        data.push({\n          id: team,\n          text: teamName,\n          type: 'project',\n          open: true\n        });\n\n        // 检测并行任务\n        const layered = this.detectParallelTasks(teamTasks);\n\n        // 添加任务\n        layered.forEach(task => {\n          data.push({\n            id: `task_${task.id}`,\n            text: task.name,\n            start_date: this.formatGanttDate(this.timeUnitToDate(task.start)),\n            end_date: this.formatGanttDate(this.timeUnitToDate(task.end)),\n            duration: ((task.end - task.start) / 24).toFixed(1),\n            parent: team,\n            team: task.team,\n            teamName: this.teamNames[task.team],\n            workers: task.workers,\n            layer: task.layer,\n            type: 'task'\n          });\n        });\n      });\n      return {\n        data,\n        links\n      };\n    },\n    /**\n     * 准备工序视角数据\n     */\n    prepareProcessView() {\n      const data = [];\n      const links = [];\n\n      // 按开始时间排序\n      const sorted = [...this.testScheduleData].sort((a, b) => a.start - b.start);\n      sorted.forEach(task => {\n        data.push({\n          id: `task_${task.id}`,\n          text: task.name,\n          start_date: this.formatGanttDate(this.timeUnitToDate(task.start)),\n          end_date: this.formatGanttDate(this.timeUnitToDate(task.end)),\n          duration: ((task.end - task.start) / 24).toFixed(1),\n          team: task.team,\n          teamName: this.teamNames[task.team],\n          workers: task.workers,\n          type: 'task'\n        });\n      });\n      return {\n        data,\n        links\n      };\n    },\n    /**\n     * 格式化DHTMLX日期\n     */\n    formatGanttDate(date) {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hour = String(date.getHours()).padStart(2, '0');\n      const minute = String(date.getMinutes()).padStart(2, '0');\n      return `${year}-${month}-${day} ${hour}:${minute}`;\n    },\n    /**\n     * 切换视角\n     */\n    switchView() {\n      this.loadData();\n      this.$message.success(`已切换到${this.getViewName()}视角`);\n    },\n    /**\n     * 获取视角名称\n     */\n    getViewName() {\n      const names = {\n        'workpoint': '设备',\n        'team': '团队',\n        'process': '工序'\n      };\n      return names[this.viewMode] || '未知';\n    },\n    /**\n     * 改变缩放级别\n     */\n    changeZoom(scale) {\n      switch (scale) {\n        case 'day':\n          gantt.config.scale_unit = 'day';\n          gantt.config.date_scale = '%Y-%m-%d';\n          gantt.config.subscales = [{\n            unit: 'hour',\n            step: 6,\n            date: '%H:%i'\n          }];\n          break;\n        case 'week':\n          gantt.config.scale_unit = 'week';\n          gantt.config.date_scale = '第%W周';\n          gantt.config.subscales = [{\n            unit: 'day',\n            step: 1,\n            date: '%d日'\n          }];\n          break;\n        case 'month':\n          gantt.config.scale_unit = 'month';\n          gantt.config.date_scale = '%Y年%m月';\n          gantt.config.subscales = [{\n            unit: 'week',\n            step: 1,\n            date: '第%W周'\n          }];\n          break;\n      }\n      gantt.render();\n      this.$message.success(`已切换到${scale}视图`);\n    }\n  }\n};","map":{"version":3,"names":["gantt","name","data","viewMode","makespan","taskCount","scheduleResultList","selectedTableName","loading","testScheduleData","teamColors","teamNames","mounted","initGantt","loadScheduleResultList","beforeDestroy","$initialized","clearAll","methods","console","log","response","$axios","get","$httpUrl","$message","error","code","length","tableName","loadScheduleData","warning","errorMsg","msg","status","request","message","warn","Math","max","map","t","end","toFixed","loadData","success","handleTableChange","refreshScheduleList","config","date_format","xml_date","scale_unit","date_scale","subscales","unit","step","date","columns","label","width","tree","align","tooltip_hide_timeout","templates","tooltip_text","start","task","type","duration","end_date","start_date","text","formatDate","teamName","workers","task_class","team","init","$refs","ganttContainer","ganttData","prepareWorkpointView","prepareTeamView","prepareProcessView","parse","timeUnitToDate","timeUnit","baseDate","Date","hours","setHours","getHours","toLocaleString","year","month","day","hour","minute","detectParallelTasks","tasks","sorted","sort","a","b","layers","result","forEach","layerIndex","findIndex","endTime","push","layer","totalLayers","maxLayer","links","grouped","wpId","workpoint_id","Object","keys","wpTasks","wpName","workpoint_name","id","open","layered","formatGanttDate","parent","teamTasks","getFullYear","String","getMonth","padStart","getDate","getMinutes","switchView","getViewName","names","changeZoom","scale","render"],"sources":["src/components/user/GanttTest.vue"],"sourcesContent":["<template>\n  <div class=\"gantt-test-container\">\n    <!-- 页面头部 -->\n    <div class=\"page-header\">\n      <div class=\"header-content\">\n        <h2 class=\"page-title\">\n          <i class=\"el-icon-date\"></i>\n          DHTMLX Gantt 测试页面\n        </h2>\n        <p class=\"page-subtitle\">测试多设备并行任务甘特图显示效果</p>\n      </div>\n    </div>\n\n    <!-- 工具栏 -->\n    <div class=\"toolbar-section\">\n      <el-card shadow=\"never\">\n        <div class=\"toolbar-content\">\n          <!-- 新增：历史结果选择 -->\n          <div class=\"result-selector\">\n            <label>选择调度结果：</label>\n            <el-select \n              v-model=\"selectedTableName\" \n              @change=\"handleTableChange\"\n              placeholder=\"请选择调度结果\"\n              style=\"width: 400px;\"\n              :loading=\"loading\"\n              size=\"small\">\n              <el-option\n                v-for=\"item in scheduleResultList\"\n                :key=\"item.tableName\"\n                :label=\"`${item.createdTime} | 完工时间: ${item.makespan}h | ${item.taskCount}个任务`\"\n                :value=\"item.tableName\">\n              </el-option>\n            </el-select>\n            <el-button \n              size=\"small\" \n              icon=\"el-icon-refresh\" \n              @click=\"refreshScheduleList\"\n              :loading=\"loading\"\n              style=\"margin-left: 10px;\">\n              刷新\n            </el-button>\n          </div>\n          \n          <div class=\"view-switch\">\n            <label>视角切换：</label>\n            <el-radio-group v-model=\"viewMode\" @change=\"switchView\" size=\"small\">\n              <el-radio-button label=\"workpoint\">设备视角</el-radio-button>\n              <el-radio-button label=\"team\">团队视角</el-radio-button>\n              <el-radio-button label=\"process\">工序视角</el-radio-button>\n            </el-radio-group>\n          </div>\n          \n          <div class=\"zoom-controls\">\n            <label>缩放级别：</label>\n            <el-button-group>\n              <el-button size=\"small\" @click=\"changeZoom('day')\">天</el-button>\n              <el-button size=\"small\" @click=\"changeZoom('week')\">周</el-button>\n              <el-button size=\"small\" @click=\"changeZoom('month')\">月</el-button>\n            </el-button-group>\n          </div>\n\n          <div class=\"info-display\">\n            <el-tag type=\"success\">完工时间: {{ makespan.toFixed(2) }}小时</el-tag>\n            <el-tag type=\"info\">任务数: {{ taskCount }}</el-tag>\n          </div>\n        </div>\n      </el-card>\n    </div>\n\n    <!-- Gantt图表容器 -->\n    <div class=\"gantt-section\">\n      <el-card shadow=\"never\" class=\"gantt-card\">\n        <div ref=\"ganttContainer\" class=\"gantt-container\"></div>\n      </el-card>\n    </div>\n\n    <!-- 说明文档 -->\n    <div class=\"info-section\">\n      <el-card shadow=\"never\">\n        <div slot=\"header\">\n          <span><i class=\"el-icon-info\"></i> 测试数据说明</span>\n        </div>\n        <el-descriptions :column=\"2\" border>\n          <el-descriptions-item label=\"设备数量\">3个（设备1、设备2、设备3）</el-descriptions-item>\n          <el-descriptions-item label=\"任务总数\">{{ taskCount }}个</el-descriptions-item>\n          <el-descriptions-item label=\"团队数量\">6个（架子班组、保温班组等）</el-descriptions-item>\n          <el-descriptions-item label=\"完工时间\">{{ makespan }}小时</el-descriptions-item>\n          <el-descriptions-item label=\"并行任务\">✅ 已包含同时进行的任务</el-descriptions-item>\n          <el-descriptions-item label=\"时间范围\">2024-01-01 至 2024-01-08</el-descriptions-item>\n        </el-descriptions>\n        \n        <div class=\"test-notes\">\n          <h4>🧪 测试要点：</h4>\n          <ul>\n            <li>✅ 查看并行任务是否重叠（设备1有多个同时进行的任务）</li>\n            <li>✅ 测试三种视角切换效果</li>\n            <li>✅ 测试鼠标悬停显示详情</li>\n            <li>✅ 测试时间轴缩放功能</li>\n            <li>✅ 查看不同团队的颜色区分</li>\n          </ul>\n        </div>\n      </el-card>\n    </div>\n  </div>\n</template>\n\n<script>\nimport gantt from 'dhtmlx-gantt';\nimport 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\n\nexport default {\n  name: 'GanttTest',\n  data() {\n    return {\n      viewMode: 'workpoint', // workpoint | team | process\n      makespan: 0,\n      taskCount: 0,\n      \n      // 新增：历史结果列表\n      scheduleResultList: [],\n      \n      // 新增：当前选中的表名\n      selectedTableName: '',\n      \n      // 新增：加载状态\n      loading: false,\n      \n      // 修改：testScheduleData 初始为空，从数据库加载\n      testScheduleData: [],\n      \n      // 团队颜色映射\n      teamColors: {\n        'team1': '#FF6B6B',\n        'team2': '#4ECDC4',\n        'team3': '#45B7D1',\n        'team4': '#FFA07A',\n        'team5': '#98D8C8',\n        'team6': '#F7DC6F'\n      },\n      \n      // 团队名称\n      teamNames: {\n        'team1': '团队1',\n        'team2': '团队2',\n        'team3': '团队3',\n        'team4': '团队4',\n        'team5': '团队5',\n        'team6': '团队6'\n      }\n    };\n  },\n  mounted() {\n    this.initGantt();\n    // 修改：从数据库加载历史结果\n    this.loadScheduleResultList();\n  },\n  beforeDestroy() {\n    if (gantt.$initialized) {\n      gantt.clearAll();\n    }\n  },\n  methods: {\n    /**\n     * 加载调度结果列表\n     */\n    async loadScheduleResultList() {\n      this.loading = true;\n      try {\n        console.log('📋 开始加载调度结果列表...');\n        const response = await this.$axios.get(this.$httpUrl + '/schedule_results/list?limit=50');\n        \n        // 检查响应数据是否存在\n        if (!response || !response.data) {\n          this.$message.error('服务器响应异常');\n          return;\n        }\n        \n        if (response.data.code === 200) {\n          this.scheduleResultList = response.data.data || [];\n          console.log(`✅ 加载成功，共 ${this.scheduleResultList.length} 个调度结果`);\n          \n          // 默认选择最新的\n          if (this.scheduleResultList.length > 0) {\n            this.selectedTableName = this.scheduleResultList[0].tableName;\n            await this.loadScheduleData(this.selectedTableName);\n          } else {\n            this.$message.warning('暂无调度结果，请先运行算法');\n          }\n        } else {\n          const errorMsg = response.data.msg || '未知错误';\n          this.$message.error('加载调度结果列表失败: ' + errorMsg);\n        }\n      } catch (error) {\n        // 详细的错误日志\n        if (error.response) {\n          // 服务器返回了错误状态码\n          console.error('服务器错误:', error.response.status, error.response.data);\n          this.$message.error(`服务器错误: ${error.response.status}`);\n        } else if (error.request) {\n          // 请求已发送但没有收到响应\n          console.error('网络错误:', error.request);\n          this.$message.error('网络错误，请检查后端服务是否启动');\n        } else {\n          // 其他错误\n          console.error('未知错误:', error.message);\n          this.$message.error('加载失败: ' + error.message);\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    /**\n     * 加载指定表的调度数据\n     */\n    async loadScheduleData(tableName) {\n      if (!tableName) {\n        console.warn('⚠️  表名为空，无法加载数据');\n        return;\n      }\n      \n      this.loading = true;\n      try {\n        console.log(`📖 加载调度数据: ${tableName}`);\n        const response = await this.$axios.get(`/schedule_results/${tableName}`);\n        \n        // 检查响应数据是否存在\n        if (!response || !response.data) {\n          this.$message.error('服务器响应异常');\n          return;\n        }\n        \n        if (response.data.code === 200) {\n          this.testScheduleData = response.data.data || [];\n          this.taskCount = this.testScheduleData.length;\n          \n          // 计算完工时间\n          if (this.testScheduleData.length > 0) {\n            this.makespan = Math.max(...this.testScheduleData.map(t => t.end));\n          } else {\n            this.makespan = 0;\n          }\n          \n          console.log(`✅ 加载成功: ${this.taskCount} 个任务, 完工时间: ${this.makespan.toFixed(2)}h`);\n          \n          // 重新加载甘特图\n          this.loadData();\n          \n          this.$message.success(`调度数据加载成功 (${this.taskCount}个任务)`);\n        } else {\n          const errorMsg = response.data.msg || '未知错误';\n          this.$message.error('加载调度数据失败: ' + errorMsg);\n        }\n      } catch (error) {\n        // 详细的错误日志\n        if (error.response) {\n          console.error('服务器错误:', error.response.status, error.response.data);\n          this.$message.error(`服务器错误: ${error.response.status}`);\n        } else if (error.request) {\n          console.error('网络错误:', error.request);\n          this.$message.error('网络错误，请检查后端服务是否启动');\n        } else {\n          console.error('未知错误:', error.message);\n          this.$message.error('加载失败: ' + error.message);\n        }\n      } finally {\n        this.loading = false;\n      }\n    },\n    \n    /**\n     * 处理下拉框选择变化\n     */\n    handleTableChange(tableName) {\n      console.log(`🔄 切换调度结果: ${tableName}`);\n      this.loadScheduleData(tableName);\n    },\n    \n    /**\n     * 刷新调度结果列表\n     */\n    refreshScheduleList() {\n      console.log('🔄 刷新调度结果列表');\n      this.loadScheduleResultList();\n    },\n    \n    /**\n     * 初始化DHTMLX Gantt\n     */\n    initGantt() {\n      // 基础配置\n      gantt.config.date_format = '%Y-%m-%d %H:%i';\n      gantt.config.xml_date = '%Y-%m-%d %H:%i';\n      gantt.config.scale_unit = 'day';\n      gantt.config.date_scale = '%Y-%m-%d';\n      gantt.config.subscales = [\n        { unit: 'hour', step: 12, date: '%H:%i' }\n      ];\n      \n      // 列配置\n      gantt.config.columns = [\n        { name: 'text', label: '任务名称', width: 200, tree: true },\n        { name: 'start_date', label: '开始时间', width: 100, align: 'center' },\n        { name: 'duration', label: '持续时间', width: 80, align: 'center' }\n      ];\n      \n      // 工具提示配置\n      gantt.config.tooltip_hide_timeout = 1000;\n      gantt.templates.tooltip_text = (start, end, task) => {\n        if (task.type === 'project') return '';\n        \n        const duration = ((task.end_date - task.start_date) / (1000 * 60 * 60)).toFixed(1);\n        return `\n          <div style=\"padding: 10px; min-width: 200px;\">\n            <strong style=\"font-size: 14px;\">${task.text}</strong><br/>\n            <hr style=\"margin: 5px 0; border: none; border-top: 1px solid #ddd;\"/>\n            <div style=\"margin: 5px 0;\">\n              <span style=\"color: #666;\">开始时间：</span>\n              <strong>${this.formatDate(task.start_date)}</strong>\n            </div>\n            <div style=\"margin: 5px 0;\">\n              <span style=\"color: #666;\">结束时间：</span>\n              <strong>${this.formatDate(task.end_date)}</strong>\n            </div>\n            <div style=\"margin: 5px 0;\">\n              <span style=\"color: #666;\">持续时间：</span>\n              <strong>${duration}小时</strong>\n            </div>\n            <div style=\"margin: 5px 0;\">\n              <span style=\"color: #666;\">团队：</span>\n              <strong>${task.teamName || ''}</strong>\n            </div>\n            <div style=\"margin: 5px 0;\">\n              <span style=\"color: #666;\">工人数：</span>\n              <strong>${task.workers || 0}人</strong>\n            </div>\n          </div>\n        `;\n      };\n      \n      // 任务颜色配置\n      gantt.templates.task_class = (start, end, task) => {\n        if (task.type === 'project') return 'gantt_project';\n        return `gantt_task_${task.team}`;\n      };\n      \n      // 初始化\n      gantt.init(this.$refs.ganttContainer);\n      \n      console.log('✅ DHTMLX Gantt 初始化完成');\n    },\n    \n    /**\n     * 加载数据\n     */\n    loadData() {\n      let ganttData;\n      \n      switch (this.viewMode) {\n        case 'workpoint':\n          ganttData = this.prepareWorkpointView();\n          break;\n        case 'team':\n          ganttData = this.prepareTeamView();\n          break;\n        case 'process':\n          ganttData = this.prepareProcessView();\n          break;\n        default:\n          ganttData = this.prepareWorkpointView();\n      }\n      \n      gantt.clearAll();\n      gantt.parse(ganttData);\n      \n      console.log(`✅ 加载${this.viewMode}视角数据，共${ganttData.data.length}条`);\n    },\n    \n    /**\n     * 时间单位转日期\n     */\n    timeUnitToDate(timeUnit) {\n      const baseDate = new Date('2024-01-01T00:00:00');\n      const hours = timeUnit;\n      baseDate.setHours(baseDate.getHours() + hours);\n      return baseDate;\n    },\n    \n    /**\n     * 格式化日期\n     */\n    formatDate(date) {\n      if (typeof date === 'string') {\n        date = new Date(date);\n      }\n      return date.toLocaleString('zh-CN', {\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      });\n    },\n    \n    /**\n     * 检测并行任务（复用之前的逻辑）\n     */\n    detectParallelTasks(tasks) {\n      if (!tasks || tasks.length === 0) return [];\n      \n      const sorted = [...tasks].sort((a, b) => a.start - b.start);\n      const layers = [];\n      const result = [];\n      \n      sorted.forEach(task => {\n        let layerIndex = layers.findIndex(endTime => task.start >= endTime);\n        \n        if (layerIndex === -1) {\n          layerIndex = layers.length;\n          layers.push(task.end);\n        } else {\n          layers[layerIndex] = task.end;\n        }\n        \n        result.push({\n          ...task,\n          layer: layerIndex,\n          totalLayers: 0\n        });\n      });\n      \n      const maxLayer = Math.max(...result.map(t => t.layer));\n      result.forEach(t => t.totalLayers = maxLayer + 1);\n      \n      return result;\n    },\n    \n    /**\n     * 准备设备视角数据\n     */\n    prepareWorkpointView() {\n      const data = [];\n      const links = [];\n      \n      // 按设备分组\n      const grouped = {};\n      this.testScheduleData.forEach(task => {\n        const wpId = task.workpoint_id;\n        if (!grouped[wpId]) {\n          grouped[wpId] = [];\n        }\n        grouped[wpId].push(task);\n      });\n      \n      // 生成DHTMLX数据\n      Object.keys(grouped).sort().forEach(wpId => {\n        const wpTasks = grouped[wpId];\n        const wpName = wpTasks[0].workpoint_name;\n        \n        // 添加父节点（设备）\n        data.push({\n          id: wpId,\n          text: wpName,\n          type: 'project',\n          open: true\n        });\n        \n        // 检测并行任务\n        const layered = this.detectParallelTasks(wpTasks);\n        \n        // 添加任务\n        layered.forEach(task => {\n          data.push({\n            id: `task_${task.id}`,\n            text: task.name,\n            start_date: this.formatGanttDate(this.timeUnitToDate(task.start)),\n            end_date: this.formatGanttDate(this.timeUnitToDate(task.end)),\n            duration: ((task.end - task.start) / 24).toFixed(1), // 转换为天\n            parent: wpId,\n            team: task.team,\n            teamName: this.teamNames[task.team],\n            workers: task.workers,\n            layer: task.layer,\n            type: 'task'\n          });\n        });\n      });\n      \n      return { data, links };\n    },\n    \n    /**\n     * 准备团队视角数据\n     */\n    prepareTeamView() {\n      const data = [];\n      const links = [];\n      \n      // 按团队分组\n      const grouped = {};\n      this.testScheduleData.forEach(task => {\n        const team = task.team;\n        if (!grouped[team]) {\n          grouped[team] = [];\n        }\n        grouped[team].push(task);\n      });\n      \n      // 生成DHTMLX数据\n      Object.keys(grouped).sort().forEach(team => {\n        const teamTasks = grouped[team];\n        const teamName = this.teamNames[team];\n        \n        // 添加父节点（团队）\n        data.push({\n          id: team,\n          text: teamName,\n          type: 'project',\n          open: true\n        });\n        \n        // 检测并行任务\n        const layered = this.detectParallelTasks(teamTasks);\n        \n        // 添加任务\n        layered.forEach(task => {\n          data.push({\n            id: `task_${task.id}`,\n            text: task.name,\n            start_date: this.formatGanttDate(this.timeUnitToDate(task.start)),\n            end_date: this.formatGanttDate(this.timeUnitToDate(task.end)),\n            duration: ((task.end - task.start) / 24).toFixed(1),\n            parent: team,\n            team: task.team,\n            teamName: this.teamNames[task.team],\n            workers: task.workers,\n            layer: task.layer,\n            type: 'task'\n          });\n        });\n      });\n      \n      return { data, links };\n    },\n    \n    /**\n     * 准备工序视角数据\n     */\n    prepareProcessView() {\n      const data = [];\n      const links = [];\n      \n      // 按开始时间排序\n      const sorted = [...this.testScheduleData].sort((a, b) => a.start - b.start);\n      \n      sorted.forEach(task => {\n        data.push({\n          id: `task_${task.id}`,\n          text: task.name,\n          start_date: this.formatGanttDate(this.timeUnitToDate(task.start)),\n          end_date: this.formatGanttDate(this.timeUnitToDate(task.end)),\n          duration: ((task.end - task.start) / 24).toFixed(1),\n          team: task.team,\n          teamName: this.teamNames[task.team],\n          workers: task.workers,\n          type: 'task'\n        });\n      });\n      \n      return { data, links };\n    },\n    \n    /**\n     * 格式化DHTMLX日期\n     */\n    formatGanttDate(date) {\n      const year = date.getFullYear();\n      const month = String(date.getMonth() + 1).padStart(2, '0');\n      const day = String(date.getDate()).padStart(2, '0');\n      const hour = String(date.getHours()).padStart(2, '0');\n      const minute = String(date.getMinutes()).padStart(2, '0');\n      return `${year}-${month}-${day} ${hour}:${minute}`;\n    },\n    \n    /**\n     * 切换视角\n     */\n    switchView() {\n      this.loadData();\n      this.$message.success(`已切换到${this.getViewName()}视角`);\n    },\n    \n    /**\n     * 获取视角名称\n     */\n    getViewName() {\n      const names = {\n        'workpoint': '设备',\n        'team': '团队',\n        'process': '工序'\n      };\n      return names[this.viewMode] || '未知';\n    },\n    \n    /**\n     * 改变缩放级别\n     */\n    changeZoom(scale) {\n      switch (scale) {\n        case 'day':\n          gantt.config.scale_unit = 'day';\n          gantt.config.date_scale = '%Y-%m-%d';\n          gantt.config.subscales = [\n            { unit: 'hour', step: 6, date: '%H:%i' }\n          ];\n          break;\n        case 'week':\n          gantt.config.scale_unit = 'week';\n          gantt.config.date_scale = '第%W周';\n          gantt.config.subscales = [\n            { unit: 'day', step: 1, date: '%d日' }\n          ];\n          break;\n        case 'month':\n          gantt.config.scale_unit = 'month';\n          gantt.config.date_scale = '%Y年%m月';\n          gantt.config.subscales = [\n            { unit: 'week', step: 1, date: '第%W周' }\n          ];\n          break;\n      }\n      gantt.render();\n      this.$message.success(`已切换到${scale}视图`);\n    }\n  }\n};\n</script>\n\n<style scoped>\n.gantt-test-container {\n  padding: 20px;\n  background: #f5f7fa;\n  min-height: 100vh;\n}\n\n/* 页面头部 */\n.page-header {\n  margin-bottom: 20px;\n}\n\n.header-content {\n  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n  border-radius: 12px;\n  padding: 30px;\n  color: white;\n}\n\n.page-title {\n  margin: 0 0 8px 0;\n  font-size: 28px;\n  font-weight: 700;\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.page-subtitle {\n  margin: 0;\n  opacity: 0.9;\n  font-size: 14px;\n}\n\n/* 工具栏 */\n.toolbar-section {\n  margin-bottom: 20px;\n}\n\n.toolbar-content {\n  display: flex;\n  align-items: center;\n  gap: 30px;\n  flex-wrap: wrap;\n}\n\n.result-selector,\n.view-switch,\n.zoom-controls {\n  display: flex;\n  align-items: center;\n  gap: 10px;\n}\n\n.result-selector label,\n.view-switch label,\n.zoom-controls label {\n  font-weight: 600;\n  color: #606266;\n  white-space: nowrap;\n}\n\n.info-display {\n  margin-left: auto;\n  display: flex;\n  gap: 10px;\n}\n\n/* Gantt容器 */\n.gantt-section {\n  margin-bottom: 20px;\n}\n\n.gantt-card {\n  border-radius: 12px;\n}\n\n.gantt-container {\n  width: 100%;\n  height: 600px;\n  position: relative;\n}\n\n/* 信息区域 */\n.info-section {\n  margin-bottom: 20px;\n}\n\n.test-notes {\n  margin-top: 20px;\n  padding: 15px;\n  background: #f0f9ff;\n  border-left: 4px solid #667eea;\n  border-radius: 4px;\n}\n\n.test-notes h4 {\n  margin: 0 0 10px 0;\n  color: #667eea;\n}\n\n.test-notes ul {\n  margin: 0;\n  padding-left: 20px;\n}\n\n.test-notes li {\n  margin: 5px 0;\n  color: #606266;\n}\n\n/* DHTMLX Gantt样式定制 */\n.gantt-test-container ::v-deep .gantt_task_line {\n  border-radius: 4px;\n}\n\n.gantt-test-container ::v-deep .gantt_project {\n  background-color: #e0e7ff !important;\n  border-color: #667eea !important;\n}\n\n/* 团队颜色 */\n.gantt-test-container ::v-deep .gantt_task_team1 { background-color: #FF6B6B !important; border-color: #ff5252 !important; }\n.gantt-test-container ::v-deep .gantt_task_team2 { background-color: #4ECDC4 !important; border-color: #26a69a !important; }\n.gantt-test-container ::v-deep .gantt_task_team3 { background-color: #45B7D1 !important; border-color: #039be5 !important; }\n.gantt-test-container ::v-deep .gantt_task_team4 { background-color: #FFA07A !important; border-color: #ff8a50 !important; }\n.gantt-test-container ::v-deep .gantt_task_team5 { background-color: #98D8C8 !important; border-color: #80cbc4 !important; }\n.gantt-test-container ::v-deep .gantt_task_team6 { background-color: #F7DC6F !important; border-color: #ffd54f !important; }\n\n.gantt-test-container ::v-deep .gantt_grid_scale {\n  background-color: #667eea;\n  color: white;\n  font-weight: 600;\n}\n\n.gantt-test-container ::v-deep .gantt_task_scale {\n  background-color: #667eea;\n  color: white;\n  font-weight: 600;\n}\n\n.gantt-test-container ::v-deep .gantt_grid_head_cell {\n  color: white;\n}\n</style>\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}