{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nexport default {\n  name: \"MyTest\",\n  data() {\n    return {\n      selectedAlgorithm: \"ddpg\",\n      // 默认选择 DDPG 算法\n      inputData: {\n        max_episodes: \"\",\n        // DDPG 算法的输入\n        params: \"\" // DDQN 和 GA 算法的输入\n      },\n      result: null,\n      // 算法返回的结果\n      isLoading: false,\n      // 加载状态\n      progressVisible: false,\n      // 是否显示进度条\n      progressPercentage: 0,\n      // 进度条百分比\n      progressStatus: null // 进度条状态（success/exception）\n    };\n  },\n  methods: {\n    async runAlgorithm() {\n      if (!this.selectedAlgorithm) {\n        this.$message.error(\"请选择算法\");\n        return;\n      }\n\n      // 检查输入是否为空\n      if (this.selectedAlgorithm === 'ddpg' && !this.inputData.max_episodes) {\n        this.$message.error(\"请输入训练的最大迭代次数\");\n        return;\n      }\n      if ((this.selectedAlgorithm === 'ddqn' || this.selectedAlgorithm === 'ga') && !this.inputData.params) {\n        this.$message.error(\"请输入参数\");\n        return;\n      }\n      this.isLoading = true; // 开始加载\n      this.progressVisible = true; // 显示进度条\n      this.progressPercentage = 0; // 重置进度条\n      this.progressStatus = null; // 重置状态\n\n      try {\n        // 构造请求数据\n        let requestData = {};\n        let apiUrl = \"\";\n        if (this.selectedAlgorithm === 'ddpg') {\n          // DDPG 算法\n          apiUrl = \"http://localhost:5000/run_rl\"; // DDPG 服务地址\n          requestData = {\n            algorithm_name: this.selectedAlgorithm,\n            max_episodes: parseInt(this.inputData.max_episodes) // 确保输入值不为空\n          };\n        } else if (this.selectedAlgorithm === 'ddqn') {\n          // DDQN 算法\n          apiUrl = \"http://localhost:5001/run_ddqn\"; // DDQN 服务地址\n          requestData = {\n            algorithm_name: this.selectedAlgorithm,\n            params: this.inputData.params.split(\",\").map(Number) // 将逗号分隔的字符串转换为数字数组\n          };\n        } else if (this.selectedAlgorithm === 'ga') {\n          // GA 算法\n          apiUrl = \"http://localhost:5002/run_ga\"; // GA 服务地址\n          requestData = {\n            algorithm_name: this.selectedAlgorithm,\n            params: this.inputData.params.split(\",\").map(Number) // 将逗号分隔的字符串转换为数字数组\n          };\n        }\n\n        // 检查输入是否为有效数字\n        if (this.selectedAlgorithm === 'ddpg' && isNaN(requestData.max_episodes)) {\n          this.$message.error(\"请输入有效的整数\");\n          return;\n        }\n        if ((this.selectedAlgorithm === 'ddqn' || this.selectedAlgorithm === 'ga') && requestData.params.some(isNaN)) {\n          this.$message.error(\"请输入有效的数字\");\n          return;\n        }\n\n        // 发送 POST 请求到对应的后端服务\n        const response = await this.$axios.post(apiUrl, requestData);\n\n        // 模拟进度更新\n        const maxEpisodes = this.inputData.max_episodes || 10;\n        for (let i = 1; i <= maxEpisodes; i++) {\n          await new Promise(resolve => setTimeout(resolve, 500)); // 模拟每次训练耗时\n          this.progressPercentage = Math.round(i / maxEpisodes * 100); // 更新进度\n        }\n\n        // 显示算法结果\n        this.result = response.data;\n        this.progressStatus = \"success\"; // 进度条状态：成功\n      } catch (error) {\n        console.error(\"调用算法失败:\", error);\n        this.$message.error(\"调用算法失败，请检查输入或后端服务\");\n        this.progressStatus = \"exception\"; // 进度条状态：失败\n      } finally {\n        this.isLoading = false; // 结束加载\n      }\n    }\n  }\n};","map":{"version":3,"names":["name","data","selectedAlgorithm","inputData","max_episodes","params","result","isLoading","progressVisible","progressPercentage","progressStatus","methods","runAlgorithm","$message","error","requestData","apiUrl","algorithm_name","parseInt","split","map","Number","isNaN","some","response","$axios","post","maxEpisodes","i","Promise","resolve","setTimeout","Math","round","console"],"sources":["src/components/user/Test.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <!-- 选择算法 -->\r\n    <el-select v-model=\"selectedAlgorithm\" placeholder=\"请选择算法\" style=\"width: 200px; margin-right: 10px;\">\r\n      <el-option label=\"DDPG\" value=\"ddpg\"></el-option>\r\n      <el-option label=\"DDQN\" value=\"ddqn\"></el-option>\r\n      <el-option label=\"GA\" value=\"ga\"></el-option>\r\n    </el-select>\r\n\r\n    <!-- 运行按钮 -->\r\n    <el-button type=\"primary\" @click=\"runAlgorithm\" :loading=\"isLoading\" style=\"margin-top: 10px;\">运行算法</el-button>\r\n\r\n    <!-- 动态输入字段 -->\r\n    <div v-if=\"selectedAlgorithm === 'ddpg'\" style=\"margin-top: 10px;\">\r\n      <el-input v-model=\"inputData.max_episodes\" placeholder=\"请输入训练的最大迭代次数\" style=\"width: 300px; margin-right: 10px;\"></el-input>\r\n    </div>\r\n\r\n    <!-- DDQN 和 GA 的输入框 -->\r\n    <div v-if=\"selectedAlgorithm === 'ddqn' || selectedAlgorithm === 'ga'\" style=\"margin-top: 10px;\">\r\n      <el-input v-model=\"inputData.params\" placeholder=\"请输入参数（用逗号隔开）\" style=\"width: 300px; margin-right: 10px;\"></el-input>\r\n    </div>\r\n\r\n    <!-- 进度条 -->\r\n    <div v-if=\"progressVisible\" style=\"margin-top: 20px;\">\r\n      <el-progress :percentage=\"progressPercentage\" :status=\"progressStatus\"></el-progress>\r\n      <p style=\"margin-top: 10px;\">当前进度：{{ progressPercentage }}%</p>\r\n    </div>\r\n\r\n    <!-- 显示算法结果 -->\r\n    <div v-if=\"result\" style=\"margin-top: 20px;\">\r\n      <h3>算法结果：</h3>\r\n      <pre>{{ result }}</pre>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"MyTest\",\r\n  data() {\r\n    return {\r\n      selectedAlgorithm: \"ddpg\", // 默认选择 DDPG 算法\r\n      inputData: {\r\n        max_episodes: \"\", // DDPG 算法的输入\r\n        params: \"\", // DDQN 和 GA 算法的输入\r\n      },\r\n      result: null, // 算法返回的结果\r\n      isLoading: false, // 加载状态\r\n      progressVisible: false, // 是否显示进度条\r\n      progressPercentage: 0, // 进度条百分比\r\n      progressStatus: null, // 进度条状态（success/exception）\r\n    };\r\n  },\r\n  methods: {\r\n    async runAlgorithm() {\r\n      if (!this.selectedAlgorithm) {\r\n        this.$message.error(\"请选择算法\");\r\n        return;\r\n      }\r\n\r\n      // 检查输入是否为空\r\n      if (this.selectedAlgorithm === 'ddpg' && !this.inputData.max_episodes) {\r\n        this.$message.error(\"请输入训练的最大迭代次数\");\r\n        return;\r\n      }\r\n      if ((this.selectedAlgorithm === 'ddqn' || this.selectedAlgorithm === 'ga') && !this.inputData.params) {\r\n        this.$message.error(\"请输入参数\");\r\n        return;\r\n      }\r\n\r\n      this.isLoading = true; // 开始加载\r\n      this.progressVisible = true; // 显示进度条\r\n      this.progressPercentage = 0; // 重置进度条\r\n      this.progressStatus = null; // 重置状态\r\n\r\n      try {\r\n        // 构造请求数据\r\n        let requestData = {};\r\n        let apiUrl = \"\";\r\n\r\n        if (this.selectedAlgorithm === 'ddpg') {\r\n          // DDPG 算法\r\n          apiUrl = \"http://localhost:5000/run_rl\"; // DDPG 服务地址\r\n          requestData = {\r\n            algorithm_name: this.selectedAlgorithm,\r\n            max_episodes: parseInt(this.inputData.max_episodes), // 确保输入值不为空\r\n          };\r\n        } else if (this.selectedAlgorithm === 'ddqn') {\r\n          // DDQN 算法\r\n          apiUrl = \"http://localhost:5001/run_ddqn\"; // DDQN 服务地址\r\n          requestData = {\r\n            algorithm_name: this.selectedAlgorithm,\r\n            params: this.inputData.params.split(\",\").map(Number), // 将逗号分隔的字符串转换为数字数组\r\n          };\r\n        } else if (this.selectedAlgorithm === 'ga') {\r\n          // GA 算法\r\n          apiUrl = \"http://localhost:5002/run_ga\"; // GA 服务地址\r\n          requestData = {\r\n            algorithm_name: this.selectedAlgorithm,\r\n            params: this.inputData.params.split(\",\").map(Number), // 将逗号分隔的字符串转换为数字数组\r\n          };\r\n        }\r\n\r\n        // 检查输入是否为有效数字\r\n        if (this.selectedAlgorithm === 'ddpg' && isNaN(requestData.max_episodes)) {\r\n          this.$message.error(\"请输入有效的整数\");\r\n          return;\r\n        }\r\n        if ((this.selectedAlgorithm === 'ddqn' || this.selectedAlgorithm === 'ga') && requestData.params.some(isNaN)) {\r\n          this.$message.error(\"请输入有效的数字\");\r\n          return;\r\n        }\r\n\r\n        // 发送 POST 请求到对应的后端服务\r\n        const response = await this.$axios.post(apiUrl, requestData);\r\n\r\n        // 模拟进度更新\r\n        const maxEpisodes = this.inputData.max_episodes || 10;\r\n        for (let i = 1; i <= maxEpisodes; i++) {\r\n          await new Promise((resolve) => setTimeout(resolve, 500)); // 模拟每次训练耗时\r\n          this.progressPercentage = Math.round((i / maxEpisodes) * 100); // 更新进度\r\n        }\r\n\r\n        // 显示算法结果\r\n        this.result = response.data;\r\n        this.progressStatus = \"success\"; // 进度条状态：成功\r\n      } catch (error) {\r\n        console.error(\"调用算法失败:\", error);\r\n        this.$message.error(\"调用算法失败，请检查输入或后端服务\");\r\n        this.progressStatus = \"exception\"; // 进度条状态：失败\r\n      } finally {\r\n        this.isLoading = false; // 结束加载\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\npre {\r\n  background-color: #f5f5f5;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  font-family: monospace;\r\n}\r\n</style>"],"mappings":";;;AAqCA;EACAA,IAAA;EACAC,KAAA;IACA;MACAC,iBAAA;MAAA;MACAC,SAAA;QACAC,YAAA;QAAA;QACAC,MAAA;MACA;MACAC,MAAA;MAAA;MACAC,SAAA;MAAA;MACAC,eAAA;MAAA;MACAC,kBAAA;MAAA;MACAC,cAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,aAAA;MACA,UAAAV,iBAAA;QACA,KAAAW,QAAA,CAAAC,KAAA;QACA;MACA;;MAEA;MACA,SAAAZ,iBAAA,qBAAAC,SAAA,CAAAC,YAAA;QACA,KAAAS,QAAA,CAAAC,KAAA;QACA;MACA;MACA,UAAAZ,iBAAA,oBAAAA,iBAAA,oBAAAC,SAAA,CAAAE,MAAA;QACA,KAAAQ,QAAA,CAAAC,KAAA;QACA;MACA;MAEA,KAAAP,SAAA;MACA,KAAAC,eAAA;MACA,KAAAC,kBAAA;MACA,KAAAC,cAAA;;MAEA;QACA;QACA,IAAAK,WAAA;QACA,IAAAC,MAAA;QAEA,SAAAd,iBAAA;UACA;UACAc,MAAA;UACAD,WAAA;YACAE,cAAA,OAAAf,iBAAA;YACAE,YAAA,EAAAc,QAAA,MAAAf,SAAA,CAAAC,YAAA;UACA;QACA,gBAAAF,iBAAA;UACA;UACAc,MAAA;UACAD,WAAA;YACAE,cAAA,OAAAf,iBAAA;YACAG,MAAA,OAAAF,SAAA,CAAAE,MAAA,CAAAc,KAAA,MAAAC,GAAA,CAAAC,MAAA;UACA;QACA,gBAAAnB,iBAAA;UACA;UACAc,MAAA;UACAD,WAAA;YACAE,cAAA,OAAAf,iBAAA;YACAG,MAAA,OAAAF,SAAA,CAAAE,MAAA,CAAAc,KAAA,MAAAC,GAAA,CAAAC,MAAA;UACA;QACA;;QAEA;QACA,SAAAnB,iBAAA,eAAAoB,KAAA,CAAAP,WAAA,CAAAX,YAAA;UACA,KAAAS,QAAA,CAAAC,KAAA;UACA;QACA;QACA,UAAAZ,iBAAA,oBAAAA,iBAAA,cAAAa,WAAA,CAAAV,MAAA,CAAAkB,IAAA,CAAAD,KAAA;UACA,KAAAT,QAAA,CAAAC,KAAA;UACA;QACA;;QAEA;QACA,MAAAU,QAAA,cAAAC,MAAA,CAAAC,IAAA,CAAAV,MAAA,EAAAD,WAAA;;QAEA;QACA,MAAAY,WAAA,QAAAxB,SAAA,CAAAC,YAAA;QACA,SAAAwB,CAAA,MAAAA,CAAA,IAAAD,WAAA,EAAAC,CAAA;UACA,UAAAC,OAAA,CAAAC,OAAA,IAAAC,UAAA,CAAAD,OAAA;UACA,KAAArB,kBAAA,GAAAuB,IAAA,CAAAC,KAAA,CAAAL,CAAA,GAAAD,WAAA;QACA;;QAEA;QACA,KAAArB,MAAA,GAAAkB,QAAA,CAAAvB,IAAA;QACA,KAAAS,cAAA;MACA,SAAAI,KAAA;QACAoB,OAAA,CAAApB,KAAA,YAAAA,KAAA;QACA,KAAAD,QAAA,CAAAC,KAAA;QACA,KAAAJ,cAAA;MACA;QACA,KAAAH,SAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}